import React, { Component, Fragment } from "react";
import BlackDeleteIcon from "./../assets/Images/del-big.png";
import Modal from "react-responsive-modal";
// import JSZip from "jszip";
import fileDownload from "js-file-download";
import { faCalculator } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import HeadphoneImg from "./../assets/Images/headphone.png";
import MailImg from "./../assets/Images/mail_img.png";
import Headphone2Img from "./../assets/Images/headphone2.png";
import BlackUserIcon from "./../assets/Images/avatar.png";
import Cancel from "./../assets/Images/CancelBlue.png";
import DownImg from "./../assets/Images/down.png";
import moment from "moment";
import SearchBlackImg from "./../assets/Images/searchBlack.png";
import LoadingImg from "./../assets/Images/loading.png";
import EyeImg from "./../assets/Images/eye.png";
import BillInvoiceImg from "./../assets/Images/bill-Invoice.png";
import commentImg from "./../assets/Images/page-icon.png";
import Down1Img from "./../assets/Images/down-1.png";
import PlusImg from "./../assets/Images/plus.png";
import MinusImg from "./../assets/Images/minus.png";
import Up1Img from "./../assets/Images/up-1.png";
import ClipImg from "./../assets/Images/clip.png";
import PencilImg from "./../assets/Images/pencil.png";
import CancelImg from "./../assets/Images/cancel.png";
import downArrowWhite from "./../assets/Images/downArrow-white.png";
import tringleRight from "./../assets/Images/triangle_right_arrow_icon.svg";
import DownArrowIcon from "./../assets/Images/down-1.png";
import cross_circle_white from "./../assets/Images/cross_circle_white.svg";
import edit_white from "./../assets/Images/edit_white.svg";
import blueLeftArrow from "./../assets/Images/blueLeftArrow.svg";
import white_sync from "./../assets/Images/white_sync.svg";
import CircleCancelImg from "./../assets/Images/Circle-cancel.png";
import MergeTicketImg from "./../assets/Images/LinkImg.png";
import MergedTicketsImg from "./../assets/Images/iconsmerge.png";


import {
  UncontrolledCollapse,
  Collapse,
  CardBody,
  Card,
  Progress,
  Input,
} from "reactstrap";

import CustomerIcon from "./../assets/Images/customer-icon.png";
import UserIcon from "./../assets/Images/UserIcon.png";
import CrossIcon from "./../assets/Images/cancel.png";
import StoreIcon from "./../assets/Images/store.png";
import MyTicketTask from "./Tabs/MyTicketTask";
import MyTicketClaim from "./Tabs/MyTicketClaim";
import FileUpload from "./../assets/Images/file.png";
import CKEditor from "ckeditor4-react";
import ReactTable from "react-table";
import KnowledgeLogo from "./../assets/Images/knowledge.png";
import CopyBlue from "./../assets/Images/copyblue.png";
import ViewBlue from "./../assets/Images/viewblue.png";
import Ticket from "./../assets/Images/TicketGrey.png";
import MoreUp from "./../assets/Images/table-arr-up.png";
import CancelImgGrey from "./../assets/Images/CancelGrey.png";
import Order from "./../assets/Images/order.png";
import axios from "axios";
import { authHeader } from "../helpers/authHeader";
import config from "./../helpers/config";
import { NotificationManager } from "react-notifications";
//import TicketStatus from "./MyTicketStatus";
import TicketActionType from "./TicketActionType";
import { CopyToClipboard } from "react-copy-to-clipboard";
import CircleCancel from "./../assets/Images/Circle-cancel.png";
import DatePicker from "react-datepicker";
import ThumbTick from "./../assets/Images/thumbticket.png"; // Don't comment this line
import PDF from "./../assets/Images/pdf.png"; // Don't comment this line
import CSVi from "./../assets/Images/csvicon.png"; // Don't comment this line
import Excel from "./../assets/Images/excel.png"; // Don't comment this line
import Word from "./../assets/Images/word.png"; // Don't comment this line
import TxtLogo from "./../assets/Images/TxtIcon.png"; // Don't comment this line
import { withRouter } from "react-router";
import ReactHtmlParser from "react-html-parser";
import Demo from "../store/Hashtag";
import * as translationHI from "./../translations/hindi";
import * as translationMA from "./../translations/marathi";
import TicketSystemOrder from "./Tabs/TicketSystemOrder";
import loaderGif from "./../assets/Images/loader.gif";
import Call from "./../assets/Images/blue-call.png";
import {
  Button,
  Select,
  Input as AntdInput,
  Checkbox,
  Popover,
  notification,
} from "antd";
import CallModal from "../Component/CallModal";
import backBtn from "./../assets/Images/arwdwn.png";
import { Link } from "react-router-dom";
import InfoIcon from "./../assets/Images/user-info.png";
import InfoIcon2 from "./../assets/Images/info-icon.png";
import Assign from "../assets/Images/sent-icon.svg";
import { socket } from "../helpers/SocketConnection";
import CustomerTickets from "./Tabs/CustomerTickets";
import { data } from "browserslist";
import picon from "../assets/Images/picon.png";
import cicon from "../assets/Images/cicon.png";
import { async } from "rxjs";
import { string } from "prop-types";

const { Option } = Select;

class MyTicket extends Component {
  constructor(props) {
    super(props);
    this.state = {
      // programCode:JSON.parse(window.localStorage.getItem('Programcode')),
      open: false,
      InformStore: false,
      ReplyInformStore: false,
      ForwardInformStore: false,
      collapseUp: false,
      profilemodal: false,
      storemodal: false,
      storeproductsearch: false,
      OrderTable: false,
      labelModal: false,
      EmailCollapse: false,
      CommentsDrawer: false,
      BillInvoiceModal: false,
      ReAssignComment: false,
      FreeTextComment: false,
      CommentCollapse: false,
      CommentCollapse2: false,
      Comment1Collapse: false,
      KbLink: false,
      CheckBoxChecked: false,
      OrdItmBtnStatus: false,
      ticket_Id: 0,
      NotesTab: 0,
      TaskTab: 0,
      ClaimTab: 0,
      AppointmentTab: 0,
      Notesdetails: [],
      TicketPriorityData: [],
      BrandData: [],
      CategoryData: [],
      SubCategoryData: [],
      SubSubCategoryData: [],
      businessUnitData: [],
      subbusinessUnitData: [],
      resolutionData: [],
      EscalationStatusData: [],
      pendingReasonData: [],
      ecrData: [],
      IssueTypeData: [],
      ChannelOfPurchaseData: [],
      historicalDetails: [],
      storeDetails: [],
      ticketDetailsData: {},
      tabCounts: {},
      fileName: "",
      NoteAddComment: "",
      values: [
        {
          taskTitle: "",
          taskDescription: "",
          department: "",
          type: "",
          assign: "",
        },
      ],
      // TicketStatusData: TicketStatus(),
      TicketStatusData: [],
      selectedTicketActionType: [],
      TicketActionTypeData: TicketActionType(),
      SearchAssignData: [],
      claimDetailsData: [],
      selectetedParameters: {},
      KbPopupData: [],
      orderDetails: [],
      selectedIssueTypeKB: 0,
      selectedCategoryKB: 0,
      selectedSubCategoryKB: 0,
      CkEditorTemplateData: [],
      filtertemplateArr: [],
      filterTemplateArrReply: [],
      ReplyCKEditoertemplat: [],
      CkEditorTemplateDetails: [],
      selectedStore: [],
      selectedIndex: -1,
      // selectedProduct: [],
      tempName: "",
      selectTicketTemplateId: 0,
      mailBodyData: "",
      replymailBodyData: "",
      SearchStore: "",
      custID: 0,
      loading: false,
      Plus: false,
      replyAttachedFiles: false,
      forwardAttachedFiles: false,
      selectedStoreData: [],
      selectedStoreDataBloom: [],

      // selectedDataRow: [],
      CheckStoreID: {},
      CheckOrderID: {},
      notesCommentCompulsion: "",
      userCC: "",
      userBCC: "",
      messageDetails: [],
      fileText: 0,
      ReplyfileText: 0,
      file: [],
      Rplyfile: [],
      fileDummy: [],
      userCcCount: 0,
      userBccCount: 0,
      mailFiled: {},
      orderNumber: "",
      orderDetailsData: [],
      StoreName: "",
      ProductName: "",
      //sum
      isorderattached: [],
      //sum
      OrderInvoiceAttach: "",
      agentId: 0,
      AttachementrData: [],
      ticketcommentMSG: "",
      addReassignCmmt: "",
      CustStoreStatusDrop: 1,
      OrderSubItem: [],
      FileData: [],
      ReplyFileData: [],
      expanded: {},
      mailId: 0,
      selectProductOrd: true,
      CheckBoxAllOrder: {},
      CheckBoxAllItem: {},
      SelectedAllOrder: [],
      SelectedAllItem: [],
      progressBarData: [],
      progressDataWithcColor: [],
      collapseId: "",
      tckcmtMSGCompulsory: "",
      hasAttachmentModal: false,
      hasAttachmentFile: [],
      FileAttachment: [],
      hasDataFile: [],
      ticketSourceId: "Mails",
      ReplySourceId: "Mails",
      forwardSourceId: "Mails",
      FinalAttachmentData: [],
      skipComment: "",
      oldAgentId: 0,
      AssignCommentCompulsory: "",
      AssignToData: [],
      placeholderData: [],
      followUpIds: "",
      ticketFreeTextcomment: "",
      freetextCommentCompulsory: "",
      role_Name: "",
      logInEmail: "",
      userEmailID: "",
      statusValidate: false,
      KnowledgeBaseModal: false,
      isaddKnowledge: false,
      ckCusrsorPosition: 0,
      ckCusrsorData: "",
      ckCusrsorPositionReply: 0,
      ckCusrsorDataReply: "",
      ckCusrsorPositionForward: 0,
      ckCusrsorDataForward: "",
      notiCountCmnt: 0,
      notiCurPosiCmnt: 0,
      notiCountFreeCmnt: 0,
      notiCurPosiFreeCmnt: 0,
      isKB: false,
      selectedInvoiceNo: "",
      isDataAttached: false,
      isSystemGenerated: false,
      translateLanguage: {},
      checkPriorityDetails: false,
      ticketFields: [],
      displayTicketFields: {},
      complaintCallData: [],
      customerTypeData: [],
      consultingDoctorData: [],
      purposeVisitData: [],
      consultingHospitalData: [],
      departmentData: [],
      unitNameData: [],
      unitCitytData: [],
      lOBData: [],
      emailIDData: [],
      sourceName: "",
      appointmentList: [],
      programCode: "",
      storeList: [],
      mktPlaceList: [],
      channelOfPurchaseName: "",
      isPhoneDisabled: true,
      openAddOrder: false,
      modeData: {},
      customerID: null,
      attachedFiles: [],
      isAttachedFileModal: false,
      isSendingEmail: false,
      ticketMailerFooter: "",
      isEditCustomerProfile: false,
      customerProfileInfo: {},
      mobileNoLength: "",
      countryCode: "",
      IsCategoryBusinessUnit_Dependent: false,
      validMobileNoStatus: false,
      validAltMobileNoStatus: false,
      customerInfoLoading: false,
      loggedInProfileDetails: [],
      isViewSignature: false,
      isEditProfiledetails: false,
      showitemtable: true,
      isForward: false,
      forwardTo: "",
      productCategory: [],
      productDetail: [],
      itemName: [],
      selectedproduct: {},
      selecteProduct: [],
      selectedproductValue: "",
      itemCode: [],
      attchData: [],
      orderMasterIDNew: "",
      showProductDetails: false,
      showItemCode: false,
      productNameIdNew: "",
      mergingTicketsData: [],
      mergedTicketsData: [],
      tempMergingTicketsList: [],
      txtSearchTicket: "",
      selectedParentTicketDetails: [],
      isCopyRecepient: false,
      isAutoReply: false,
      isCopyContent: false,
      emailSignature: (
        <>
          <p>Warm Regards</p>

          <p>@UserName</p>

          <p>Investor Service Department&nbsp;</p>

          <p>@UserMobileNumber</p>

          <p>&nbsp;</p>

          <p>&nbsp;</p>

          <p>Venture Catalysts Private Limited</p>

          <p>
            203-206, 2nd floor, B &ndash; Wing| Mittal Commercia| Asan Pada Rd|
            Marol, Andheri (E) | Mumbai - 400059.&nbsp;
          </p>

          <p>&nbsp;</p>

          <p>&nbsp;</p>

          <p>
            Venture Catalysts Private Limited (&ldquo;VCAT&rdquo;) is not a
            Stock Exchange nor does it intend to get recognized as a stock
            exchange under Securities Contracts Regulation Act, 1956. VCAT does
            not facilitate any online or offline buying, selling or dealing of
            securities, clearing or settlement of trades of securities. VCAT is
            not a network or a platform for secondary market trading.
          </p>
        </>
      ),
      isSendingAllEmail: false,
      initialMailCC: {},
      isSendingReplyAllEmail: false,
      isSendingReplyEmail: false,
      isReplyAllClicked: false,
      // isReplyAllCCMail : false,
      // isReplyAllCCReply : false,
      isCallCustomer: false,
      isSubSubCategory: true,
      callModalValue: {
        srNumber: "",
        agent: "",
        callerId: "",
      },
      isMakingCall: false,
      callLogsAccess: false,
      FileSize: 0,
      IsFileSize: 0,
      ForWardMailBodyData: "",
      toEmailId: "",
      isSendingForwardEmail: false,
      isSendingForwardAllEmail: false,
      forwardFileText: 0,
      forwardFile: [],
      forwardFileData: [],
      forwardAttachmentFromMail: [],
      replyFileSize: 0,
      forwardFileSize: 0,
      pathname: "",
      appliedTableFilters: {},
      tableFilterData: [],
      ticketSourceData: [],
      isResponseModal: false,
      ticketResponseData: [],
      IsTktWithinSession: true,
      DateOfLatestMsgOnTicket: null,
      DateOfTicketCreation: null,
      AttachementFiles: [],
      messageData: [],
      IsCommentByCustomer: 0,
      FileLink: "",
      placeholderValuesArray: [],
      IsDeliveredOnWhatsApp: false,
      showCustomerTicketsModal: false,
      showCustomerTicketsStatus: "",
      profiledetail: false,
      profiledetailData: [],
      profiledetailserror: "",
      isSubSubCategory_Dependent: false,
      isBusinessUnit_Dependent: false,
      profiledetailinfoData: {},
      forwardMailBody: "",
      selectedResolution: "",
      // selectedPendingReason: '',
      resolutionComment: "",
      CommentCollapse3: false,
      isToggle: false,
      searchType: "orderId",
      isVCWApplicable: false,
      isExtendCancel: "default",
      showExtendCredit: false,
      showCancelCredit: false,
      orderIdTobeSearched: "",
      orderMobileNo: "",
      mobileNOtoSearch: "",
      mobileOrders: [],
      orderList: [],
      isorderFromShop: window.localStorage.getItem("isWebsiteOrderEnable"),
      currentSubOrder: 0,
      subOrderShow: "defaultShow",
      cancelEligbleDetail: [],
      returnEligbleDetail: [],
      itemOrderHistory: [],
      returnItemDetail: [],
      cancelItemDetail: [],
      returnReason: "",
      cancelReason: "",
      mobileNoCreditNote: "",
      creditNoteOrderId: "",
      creditNotes: [],
      currentCreditNote: 0,
      extedDays: 0,
      extandReason: "",
      cancelExtandReason: "",
      masterConfigrationUnknown: {},
      isAttachProduct: false,
      isOrderSearchLoading: false,
      isOrderSearchCreditLoading: false,
      orderMasterID: "",
      catIssue: "",
      subCatIssue: "",
      subSubCatIssue: "",
      issueTypeError: "",
      ecrError: "",
      priorityError: "",
      BusinessUnitError: "",
      TouchUnitError: "",
      UnitNameError: "",
      sentimentError: "",
      emotionError: "",

      escalationsourceerror: "",
      escError: "",
      // icOneError:"",
      // icTwoError:"",
      // touchPoint:"",
      tenantFlags: {},
      selectedWebsiteOrder: [],
      attachedWebData: [],
      isSMS: false,
      isGoogleReview: false,
      isFromFB: false,
      isFromInsta: false,
      programselect: "bataclub",
      googlereviewbody: "",
      facebookreviewbody: "",
      reviewLoader: false,
      instareviewbody: "",
      smsdata: [],
      textdescription: "",
      vendorTemplateID: "",
      templateID: "",
      mobileNo: "",
      ID: "",
      ticketIDsend: "",
      venderIDOnly: "",
      expandVal: "",
      selectedOminiItem: [],
      ccAve_searchType: "cc_orderId",
      isCCAvenueSearchLoading: false,
      storeInfoLoading: false,
      ccAvenueTobeSearched: "",
      ccAve_mobileNOtoSearch: "",
      ccAvenueMobileList: [],
      ccAvenueOrderList: [],
      flags: {},
      isCancelsubOrder: false,
      NewUnknown: false,
      newUnknowitemarr: [],
      productdetailunk: "",
      codeNameUnk: "",
      superCategoryUnk: "",
      hidebtnAdd: false,
      newSupercategoryID: "",
      forUnknowNewFlagAttach: false,
      selectedOption: 'Select',
      socialChannelCommentObj: {},
      isPriorityECRSelected: false,
      SearchAssignDatacountNew: 0,
      sentimentDropData: [],
      emotionalDropData: [],
      searchticketmodal: false,
      tabCount: 1,
      mergedticketmodal: false,
      customerSocialDetails: {},
      customerIDSocial: 0,

      loadingTickets: true,
      isTicketMerge_tnt: false,
      isTicketMerge_mdl: false,
      mergedLoader: false,
      disableButtonmerged: false
    };
    this.handleGetTabsName = this.handleGetTabsName.bind(this);
    this.handleGetNotesTabDetails = this.handleGetNotesTabDetails.bind(this);
    this.handleGetBrandList = this.handleGetBrandList.bind(this);
    this.handleGetTicketPriorityList = this.handleGetTicketPriorityList.bind(
      this
    );
    this.handleGetCategoryList = this.handleGetCategoryList.bind(this);
    this.handleGetSubCategoryList = this.handleGetSubCategoryList.bind(this);
    this.handleGetSubSubCategoryList = this.handleGetSubSubCategoryList.bind(
      this
    );
    this.handleGetBusinessUnit = this.handleGetBusinessUnit.bind(this);
    this.handleGetSubBusinessUnit = this.handleGetSubBusinessUnit.bind(this);
    this.handleGetChannelOfPurchaseList = this.handleGetChannelOfPurchaseList.bind(
      this
    );
    this.handleUpdateTicketStatus = this.handleUpdateTicketStatus.bind(this);
    this.handleGetTicketDetails = this.handleGetTicketDetails.bind(this);
    this.handleGetCountOfTabs = this.handleGetCountOfTabs.bind(this);
    this.handleTicketAssignFollowUp = this.handleTicketAssignFollowUp.bind(
      this
    );
    this.handleAssignDataList = this.handleAssignDataList.bind(this);
    this.setWrapperRef = this.setWrapperRef.bind(this);
    this.handleKbLinkPopupSearch = this.handleKbLinkPopupSearch.bind(this);
    this.handleGetOrderDetails = this.handleGetOrderDetails.bind(this);
    this.handleGetProductData = this.handleGetProductData.bind(this);
    this.handleGetMessageDetails = this.handleGetMessageDetails.bind(this);
    this.handleProgressBarDetails = this.handleProgressBarDetails.bind(this);
    this.handleGetAgentList = this.handleGetAgentList.bind(this);
    this.handlePlaceholderList = this.handlePlaceholderList.bind(this);
    this.hanldeGetSelectedStoreData = this.hanldeGetSelectedStoreData.bind(
      this
    );
    this.handleGetEmailAdd = this.handleGetEmailAdd.bind(this);
    this.handleAddKnwoldgeBase = this.handleAddKnwoldgeBase.bind(this);
    this.handleGetAppointmentList = this.handleGetAppointmentList.bind(this);
    this.handleGetStatusDropDown = this.handleGetStatusDropDown.bind(this);
  }

  getSourceName = () => {
    let a = JSON.parse(localStorage.getItem("state"));
    if (window.localStorage.getItem("isTicketInNewTab") === "true") {
      // if (window.localStorage.getItem('Programcode') === 'campusshoes') {
      var sourceName =
        new URLSearchParams(window.location.search).get("sourceName") !==
          undefined
          ? new URLSearchParams(window.location.search).get("sourceName")
          : a !== null
            ? a.sourceName
            : undefined;
      var pathname = new URLSearchParams(window.location.search).get(
        "screenName"
      );
      var appliedTableFilters = new URLSearchParams(window.location.search).get(
        "appliedTableFilters"
      );
      var tableFilterData = new URLSearchParams(window.location.search).get(
        "tableFilterData"
      );
    } else {
      var sourceName =
        this.props.location.sourceName !== undefined
          ? this.props.location.sourceName
          : a !== null
            ? a.sourceName
            : undefined;
      var pathname = this.props.location.screenName;
      var appliedTableFilters = this.props.location.appliedTableFilters;
      var tableFilterData = this.props.location.tableFilterData;
    }
    console.log(pathname, "pathname");
    this.setState({
      sourceName,
      pathname,
      appliedTableFilters,
      tableFilterData,
    });
  };

  componentDidUpdate() {
    this.handleCKEditorStyle();
    if (window.localStorage.getItem("isTicketInNewTab") === "true") {
      // if (window.localStorage.getItem('Programcode') === 'campusshoes') {
      var ticketIds = new URLSearchParams(window.location.search).get(
        "ticketDetailID"
      );
    } else {
      var ticketIds = this.props.location.ticketDetailID;
    }
    if (ticketIds) {
      if (this.state.ticket_Id !== ticketIds) {
        this.componentDidMount();
      }
    }
    //
    //refresing
  }

  componentDidMount() {
    this.handleGetSentimentList();
    this.handleGetEmotionalList();

    this.handleGetSMSData();
    this.handleGetescalationData();
    this.handleUnknownSourceMap();
    let a = JSON.parse(localStorage.getItem("state"));
    this.handleGetProductGatogry();
    // this.setState({
    //   TicketStatusData: TicketStatus()
    // })
    // console.log("TicketStatusData : " + this.state.TicketStatusData);
    this.handleGetStatusDropDown();
    this.handleGetFileSize();
    this.handleCKEditorStyle();
    this.handleGetLoggedInProfile();
    this.handleModeOfPaymentDropDown();
    this.getSourceName();
    this.handleGetProgramCode();
    this.handleGetStoreList();
    this.getMktPlaceList();


    let myParam = "";
    if (window.localStorage.getItem("isTicketInNewTab") === "true") {
      const urlParams = new URLSearchParams(window.location.search);
      myParam = urlParams.get("ticketDetailID");
    } else {
      myParam = this.props.location.ticketDetailID;
    }
    this.handleGetSearchTicket(
      myParam !== undefined
        ? myParam
        : a !== null
          ? a.ticketDetailID
          : undefined
    );
    this.handleGetMailFooterData();
    this.handleCRMRole();
    this.handleGetTicketSource();

    //this.handleGetInitailMailCC(this.props.location.ticketDetailID);

    if (window.localStorage.getItem("translateLanguage") === "hindi") {
      this.state.translateLanguage = translationHI;
    } else if (window.localStorage.getItem("translateLanguage") === "marathi") {
      this.state.translateLanguage = translationMA;
    } else {
      this.state.translateLanguage = {};
    }
    // console.log(this.props.location.notifiPathname, "shivam")
    if (myParam !== "" && myParam) {
      var ticketId = myParam;
      // var ticketId = this.props.location.ticketDetailID;
      var isKB = false;
      if (this.props.location.isKB) {
        isKB = true;
      }

      this.setState({
        HistOrderShow: true,
        ticket_Id: ticketId,
        isKB,
      });
      // this.handleGetTicketPriorityList();
      this.handleGetTicketFields();
      this.handleGetBrandList();
      this.handleGetChannelOfPurchaseList();
      // this.handleGetNotesTabDetails(ticketId);
      this.handleGetTicketDetails(ticketId);
      // this.handleGetTaskTableCount(ticketId);
      this.handleGetCountOfTabs(ticketId);
      this.handleGetMessageDetails(ticketId);
      this.handleProgressBarDetails(ticketId);
      this.handleGetAgentList();
      this.handlePlaceholderList();
      this.handleGetEmailAdd();

      this.handleGetComplaintCall();
      this.handleGetLOB();
      //this.handleGetDepartmentName();
      this.handleGetConsultingHospital();
      this.handleGetCustomerType();
      this.handleGetUnitName();
      this.handleGetUnitCity();
      this.handleGetPurposeOfVisit();
      //this.handleGetConsultingDoctor();
      this.handleGetEmailID();
      this.handleGetAppointmentList(ticketId);
      this.hanldeGetSelectedStoreData(ticketId, true);
    } else if (a !== null && a.ticketDetailID) {
      var ticketId = a.ticketDetailID;
      var isKB = false;
      if (this.props.location.isKB) {
        isKB = true;
      }

      this.setState({
        HistOrderShow: true,
        ticket_Id: ticketId,
        isKB,
      });
      // this.handleGetTicketPriorityList();
      this.handleGetTicketFields();
      this.handleGetBrandList();
      this.handleGetChannelOfPurchaseList();
      this.handleGetNotesTabDetails(ticketId);
      this.handleGetTicketDetails(ticketId);
      // this.handleGetTaskTableCount(ticketId);
      this.handleGetCountOfTabs(ticketId);
      this.handleGetMessageDetails(ticketId);
      this.handleProgressBarDetails(ticketId);
      this.handleGetAgentList();
      this.handlePlaceholderList();
      this.handleGetEmailAdd();

      this.handleGetComplaintCall();
      this.handleGetLOB();
      //this.handleGetDepartmentName();
      this.handleGetConsultingHospital();
      this.handleGetCustomerType();
      this.handleGetUnitName();
      this.handleGetUnitCity();
      this.handleGetPurposeOfVisit();
      //this.handleGetConsultingDoctor();
      this.handleGetEmailID();
      this.handleGetAppointmentList(ticketId);
      this.hanldeGetSelectedStoreData(ticketId, true);


    } else {
      this.props.history.push("myTicketlist");
    }
    localStorage.removeItem("state");
  }

  setWrapperRef(node) {
    this.wrapperRef = node;
  }
  onAddCKEditorChange = async (evt) => {
    var newContent = await evt.editor.getData();
    let wordArray = [];
    this.setState({
      mailBodyData: newContent,
    });
    if (this.state.ticketSourceId == "ChatBot") {
      let statusName = this.state.TicketStatusData.filter(
        (x) =>
          x.ticketStatusID === this.state.selectetedParameters.ticketStatusID
      );
      let category = this.state.CategoryData.filter(
        (x) => x.categoryID === this.state.ticketDetailsData.categoryID
      );
      let subCategory = this.state.SubCategoryData.filter(
        (x) => x.subCategoryID === this.state.ticketDetailsData.subCategoryID
      );
      console.log("this.state.ticketDetailsData", this.state.ticketDetailsData);
      let issueType = this.state.IssueTypeData.filter(
        (x) => x.issueTypeID === this.state.ticketDetailsData.issueTypeID
      );
      let priority = this.state.TicketPriorityData.filter(
        (x) => x.priorityID === this.state.ticketDetailsData.priortyID
      );

      if (
        newContent.includes("@TicketID") ||
        newContent.includes("@AssignedTo") ||
        newContent.includes("@CustomerName") ||
        newContent.includes("@CustomerMobileNo") ||
        newContent.includes("@TicketTitle") ||
        newContent.includes("@TicketDetails") ||
        newContent.includes("@TicketStatus") ||
        newContent.includes("@TicketSubCategory") ||
        newContent.includes("@TicketIssueType") ||
        newContent.includes("@TicketPriority")
      ) {
        wordArray = newContent
          .replaceAll("&nbsp;", " ")
          .match(/(?:^|\W)@(\w+)(?!\w)/g);
        if (wordArray.length > 0) {
          if (wordArray.includes(" @TicketID")) {
            wordArray[
              wordArray.indexOf(" @TicketID")
            ] = this.state.ticketDetailsData.ticketID;
          }
          if (wordArray.includes(" @AssignedTo")) {
            wordArray[
              wordArray.indexOf(" @AssignedTo")
            ] = this.state.ticketDetailsData.username;
          }
          if (wordArray.includes(" @CustomerName")) {
            wordArray[
              wordArray.indexOf(" @CustomerName")
            ] = this.state.ticketDetailsData.customerName;
          }
          if (wordArray.includes(" @CustomerMobileNo")) {
            wordArray[
              wordArray.indexOf(" @CustomerMobileNo")
            ] = this.state.ticketDetailsData.customerPhoneNumber;
          }
          if (wordArray.includes(" @TicketTitle")) {
            wordArray[
              wordArray.indexOf(" @TicketTitle")
            ] = this.state.ticketDetailsData.ticketTitle;
          }
          if (wordArray.includes(" @TicketDetails")) {
            wordArray[
              wordArray.indexOf(" @TicketDetails")
            ] = this.state.ticketDetailsData.ticketdescription;
          }
          if (wordArray.includes(" @TicketStatus")) {
            wordArray[wordArray.indexOf(" @TicketStatus")] =
              statusName[0].ticketStatusName;
          }
          if (wordArray.includes(" @TicketCategory")) {
            wordArray[wordArray.indexOf(" @TicketCategory")] =
              category[0].categoryName;
          }
          if (wordArray.includes(" @TicketSubCategory")) {
            wordArray[wordArray.indexOf(" @TicketSubCategory")] =
              subCategory[0].subCategoryName;
          }
          if (wordArray.includes(" @TicketIssueType")) {
            wordArray[wordArray.indexOf(" @TicketIssueType")] =
              issueType[0].issueTypeName;
          }
          if (wordArray.includes(" @TicketPriority")) {
            wordArray[wordArray.indexOf(" @TicketPriority")] =
              priority[0].priortyName;
          }
        }
        this.setState({
          wordArray: wordArray,
        });
      }

      this.setState({
        message: evt.editor
          .getData()
          .replaceAll("&nbsp;", " ")
          .replaceAll("<p>", "")
          .replaceAll("</p>", "")
          .replaceAll(/<strong> /g, "<strong>")
          .replaceAll(/ <strong>/g, " <strong>")
          .replaceAll(/ <\/strong></g, "</strong><")
          .replaceAll(/ <\/strong>/g, "</strong> ")
          .replaceAll(/<\/strong> /g, "</strong> ")
          .replaceAll(/<em> /g, "<em>")
          .replaceAll(/ <em>/g, " <em>")
          .replaceAll(/ <\/em></g, "</em><")
          .replaceAll(/ <\/em>/g, "</em> ")
          .replaceAll(/<\/em> /g, "</em> ")
          .replaceAll(/<s> /g, "<s>")
          .replaceAll(/ <s>/g, " <s>")
          .replaceAll(/ <\/s></g, "</s><")
          .replaceAll(/ <\/s>/g, "</s> ")
          .replaceAll(/<\/s> /g, "</s> ")
          .replaceAll("@TicketID", this.state.ticketDetailsData.ticketID)
          .replaceAll("@AssignedTo", this.state.ticketDetailsData.username)
          .replaceAll(
            "@CustomerName",
            this.state.ticketDetailsData.customerName
          )
          .replaceAll(
            "@CustomerMobileNo",
            this.state.ticketDetailsData.customerPhoneNumber
          )
          .replaceAll("@TicketStatus", statusName[0].ticketStatusName)
          .replaceAll("@TicketTitle", this.state.ticketDetailsData.ticketTitle)
          .replaceAll(
            "@TicketDetails",
            this.state.ticketDetailsData.ticketdescription
          )
          .replaceAll("@TicketCategory", category[0].categoryName)
          .replaceAll("@TicketSubCategory", subCategory[0].subCategoryName)
          .replaceAll("@TicketIssueType", issueType[0].issueTypeName)
          .replaceAll("@TicketPriority", priority[0].priortyName),
        ckeditorAdd: newContent,
        placeholderValuesArray: this.state.wordArray,
      });
    }
  };
  onCkBlur = (evt) => {
    var ckCusrsorPosition = evt.editor.getSelection().getRanges()[0];
    var ckCusrsorData = evt.editor.getSelection().getRanges()[0].endContainer.$
      .wholeText;
    if (!ckCusrsorData) {
      ckCusrsorData = "";
    }
    this.setState({
      ckCusrsorPosition: ckCusrsorPosition.startOffset,
      ckCusrsorData,
    });
  };
  onCkBlurReply = (evt) => {
    var ckCusrsorPositionReply = evt.editor.getSelection().getRanges()[0];
    var ckCusrsorDataReply = evt.editor.getSelection().getRanges()[0]
      .endContainer.$.wholeText;
    if (!ckCusrsorDataReply) {
      ckCusrsorDataReply = "";
    }
    this.setState({
      ckCusrsorPositionReply: ckCusrsorPositionReply.startOffset,
      ckCusrsorDataReply,
    });
  };
  onCkBlurForward = (evt) => {
    console.log("onreplyCKEditorForword", evt);
    var ckCusrsorPositionForward = evt.editor.getSelection().getRanges()[0];
    var ckCusrsorDataForward = evt.editor.getSelection().getRanges()[0]
      .endContainer.$.wholeText;
    if (!ckCusrsorDataForward) {
      ckCusrsorDataForward = "";
    }
    this.setState({
      ckCusrsorPositionForward: ckCusrsorPositionForward.startOffset,
      ckCusrsorDataForward,
    });
  };
  onreplyCKEditorChange = (evt) => {
    console.log("onreplyCKEditorChange", evt);
    var newContent = evt.editor.getData();
    let wordArray = [];
    this.setState({
      replymailBodyData: newContent,
    });
    if (this.state.ReplySourceId == "ChatBot") {
      let statusName = this.state.TicketStatusData.filter(
        (x) =>
          x.ticketStatusID === this.state.selectetedParameters.ticketStatusID
      );
      let category = this.state.CategoryData.filter(
        (x) => x.categoryID === this.state.ticketDetailsData.categoryID
      );
      let subCategory = this.state.SubCategoryData.filter(
        (x) => x.subCategoryID === this.state.ticketDetailsData.subCategoryID
      );
      console.log("this.state.ticketDetailsData", this.state.ticketDetailsData);
      let issueType = this.state.IssueTypeData.filter(
        (x) => x.issueTypeID === this.state.ticketDetailsData.issueTypeID
      );
      let priority = this.state.TicketPriorityData.filter(
        (x) => x.priorityID === this.state.ticketDetailsData.priortyID
      );

      if (
        newContent.includes("@TicketID") ||
        newContent.includes("@AssignedTo") ||
        newContent.includes("@CustomerName") ||
        newContent.includes("@CustomerMobileNo") ||
        newContent.includes("@TicketTitle") ||
        newContent.includes("@TicketDetails") ||
        newContent.includes("@TicketStatus") ||
        newContent.includes("@TicketSubCategory") ||
        newContent.includes("@TicketIssueType") ||
        newContent.includes("@TicketPriority")
      ) {
        wordArray = newContent
          .replaceAll("&nbsp;", " ")
          .match(/(?:^|\W)@(\w+)(?!\w)/g);
        if (wordArray.length > 0) {
          if (wordArray.includes(" @TicketID")) {
            wordArray[
              wordArray.indexOf(" @TicketID")
            ] = this.state.ticketDetailsData.ticketID;
          }
          if (wordArray.includes(" @AssignedTo")) {
            wordArray[
              wordArray.indexOf(" @AssignedTo")
            ] = this.state.ticketDetailsData.username;
          }
          if (wordArray.includes(" @CustomerName")) {
            wordArray[
              wordArray.indexOf(" @CustomerName")
            ] = this.state.ticketDetailsData.customerName;
          }
          if (wordArray.includes(" @CustomerMobileNo")) {
            wordArray[
              wordArray.indexOf(" @CustomerMobileNo")
            ] = this.state.ticketDetailsData.customerPhoneNumber;
          }
          if (wordArray.includes(" @TicketTitle")) {
            wordArray[
              wordArray.indexOf(" @TicketTitle")
            ] = this.state.ticketDetailsData.ticketTitle;
          }
          if (wordArray.includes(" @TicketDetails")) {
            wordArray[
              wordArray.indexOf(" @TicketDetails")
            ] = this.state.ticketDetailsData.ticketdescription;
          }
          if (wordArray.includes(" @TicketStatus")) {
            wordArray[wordArray.indexOf(" @TicketStatus")] =
              statusName[0].ticketStatusName;
          }
          if (wordArray.includes(" @TicketCategory")) {
            wordArray[wordArray.indexOf(" @TicketCategory")] =
              category[0].categoryName;
          }
          if (wordArray.includes(" @TicketSubCategory")) {
            wordArray[wordArray.indexOf(" @TicketSubCategory")] =
              subCategory[0].subCategoryName;
          }
          if (wordArray.includes(" @TicketIssueType")) {
            wordArray[wordArray.indexOf(" @TicketIssueType")] =
              issueType[0].issueTypeName;
          }
          if (wordArray.includes(" @TicketPriority")) {
            wordArray[wordArray.indexOf(" @TicketPriority")] =
              priority[0].priortyName;
          }
        }
        this.setState({
          wordArray: wordArray,
        });
      }

      this.setState({
        message: evt.editor
          .getData()
          .replaceAll("&nbsp;", " ")
          .replaceAll("<p>", "")
          .replaceAll("</p>", "")
          .replaceAll(/<strong> /g, "<strong>")
          .replaceAll(/ <strong>/g, " <strong>")
          .replaceAll(/ <\/strong></g, "</strong><")
          .replaceAll(/ <\/strong>/g, "</strong> ")
          .replaceAll(/<\/strong> /g, "</strong> ")
          .replaceAll(/<em> /g, "<em>")
          .replaceAll(/ <em>/g, " <em>")
          .replaceAll(/ <\/em></g, "</em><")
          .replaceAll(/ <\/em>/g, "</em> ")
          .replaceAll(/<\/em> /g, "</em> ")
          .replaceAll(/<s> /g, "<s>")
          .replaceAll(/ <s>/g, " <s>")
          .replaceAll(/ <\/s></g, "</s><")
          .replaceAll(/ <\/s>/g, "</s> ")
          .replaceAll(/<\/s> /g, "</s> ")
          .replaceAll("@TicketID", this.state.ticketDetailsData.ticketID)
          .replaceAll("@AssignedTo", this.state.ticketDetailsData.username)
          .replaceAll(
            "@CustomerName",
            this.state.ticketDetailsData.customerName
          )
          .replaceAll(
            "@CustomerMobileNo",
            this.state.ticketDetailsData.customerPhoneNumber
          )
          .replaceAll("@TicketStatus", statusName[0].ticketStatusName)
          .replaceAll("@TicketTitle", this.state.ticketDetailsData.ticketTitle)
          .replaceAll(
            "@TicketDetails",
            this.state.ticketDetailsData.ticketdescription
          )
          .replaceAll("@TicketCategory", category[0].categoryName)
          .replaceAll("@TicketSubCategory", subCategory[0].subCategoryName)
          .replaceAll("@TicketIssueType", issueType[0].issueTypeName)
          .replaceAll("@TicketPriority", priority[0].priortyName),
        replymailBodyData: newContent,
        placeholderValuesArray: this.state.wordArray,
      });
    }
  };
  // handle Get Agent List for User dropdown
  handleGetAgentList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/User/GetUserList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            AssignToData: data,
          });
          // self.checkAllAgentStart();
        } else {
          self.setState({
            AssignToData: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handlePlaceholderList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Template/GetMailParameter",
      headers: authHeader(),
      params: {
        AlertID: 8,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            placeholderData: data,
          });
        } else {
          self.setState({
            placeholderData: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleTicketAssignFollowUp() {
    let followUpIds = this.state.followUpIds.substring(
      0,
      this.state.followUpIds.length - 1
    );
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/ticketassigforfollowup",
      headers: authHeader(),
      params: {
        TicketID: this.state.ticket_Id,
        FollowUPUserID: followUpIds,
      },
    })
      .then(function (res) {
        let status = res.data.status;
        if (status) {
          self.setState({
            followUpIds: "",
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetTicketDetails(ID) {

    let self = this;
    this.setState({ loading: true });
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getTicketDetailsByTicketId",
      headers: authHeader(),
      params: {
        ticketID: ID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        console.log("databbbbb", data)


        if (status === "Success") {
          var AgentId = data.assignedID;
          var customer_Id = data.customerID;
          var ticketStatus = data.status;
          var ticketPriority = data.priortyID;
          var ticketBrand = data.brandID;
          var ticketCagetory = data.categoryID;
          var ticketSubGategory = data.subCategoryID;
          var ticketSubSubGategoryId = data.subSubCategoryId;
          var ticketbusinessUnitId = data.businessUnitId;
          var ticketSubbusinessUnitId = data.subBusinessUnitId;
          var ticketChannelOfPurchaseID = data.channelOfPurchaseID;
          var ticketActionType = data.ticketActionTypeID;
          var ticketIssueTypeID = data.issueTypeID;
          var storeData = data.stores;
          var productData = data.products;
          var MailDetails = data.ticketingMailerQue;
          var attachementDetails = data.attachment;
          var getdate = data?.escalationDate.split(" ")[0];
          var newdate = getdate.split("/");
          var formattedDate = newdate[2] + "-" + newdate[0] + "-" + newdate[1];
          // console.log("formattedDate",formattedDate)

          // var rolename_ = data.roleName;
          var userEmailID = data.userEmailID;
          let tempcallfmt = false;
          let tempappointmentfmt = false;
          let TicketCreatedOn = data.createdDate;
          if (data.callBackDateTime) {
            if (data.callBackDateTime.includes("/")) {
              if (Number(data.callBackDateTime.split("/")[0]) > 12) {
                tempcallfmt = true;
              }
            } else {
              if (Number(data.callBackDateTime.split("-")[0]) > 12) {
                tempcallfmt = true;
              }
            }
          }
          if (data.appointmnetDatetime) {
            if (data.appointmnetDatetime.includes("/")) {
              if (Number(data.appointmnetDatetime.split("/")[0]) > 12) {
                tempappointmentfmt = true;
              }
            } else {
              if (Number(data.appointmnetDatetime.split("-")[0]) > 12) {
                tempappointmentfmt = true;
              }
            }
          }
          var selectetedParameters = {
            ticketStatusID: ticketStatus,
            priorityID: ticketPriority,
            brandID: ticketBrand,
            categoryID: ticketCagetory,
            subCategoryID: ticketSubGategory,
            subSubCategoryID: ticketSubSubGategoryId,
            businessUnitId: ticketbusinessUnitId,
            subBusinessUnitId: ticketSubbusinessUnitId,
            channelOfPurchaseID: ticketChannelOfPurchaseID,
            ticketActionTypeID: ticketActionType,
            issueTypeID: ticketIssueTypeID,
            customerType: data.customerType || null,
            consultingHospital: data.consultingHospital || null,
            purposeOfVisit: data.purposeOfVisit || null,
            consultingDoctor: data.consultingDoctor || null,
            departmentName: data.departmentName || null,
            unitName: data.unitName || null,
            unitCity: data.unitCity || null,
            lob: data.lob || null,
            complaintCall: data.complaintCall || null,
            callBackDate:
              data.callBackDateTime &&
                data.callBackDateTime !== "01/01/0001 00:00:00"
                ? new Date(
                  moment(
                    data.callBackDateTime,
                    !tempcallfmt
                      ? "MM-DD-YYYY hh:mm:ss a"
                      : "DD-MM-YYYY hh:mm:ss a"
                  )
                    .format("YYYY-MM-DD hh:mm a")
                    .toString()
                )
                : null,
            callBack: data.callBack,
            appointmentDate:
              data.appointmnetDatetime &&
                data.appointmnetDatetime !== "01/01/0001 00:00:00"
                ? new Date(
                  moment(
                    data.appointmnetDatetime,
                    !tempappointmentfmt
                      ? "MM-DD-YYYY hh:mm:ss a"
                      : "DD-MM-YYYY hh:mm:ss a"
                  )
                    .format("YYYY-MM-DD hh:mm a")
                    .toString()
                )
                : null,
            storeCode: data.storeCode || "",
            storeName: data.storeName || "",
            storeCity: data.storeCity || "",
            storeAddress: data.storeAddress || "",
            storePinCode: data.storePinCode || "",
            storePhoneNo: data.storePhoneNo || "",
            storeEmailID: data.storeEmailID || "",
            country: data.country || "",
            region: data.region || "",
            mktPlace: data.mktPlace || "",
            resolutionStatusId: data?.resolutionStatusId,
            resolutionComment: data?.resolutionComment,
            ecrId: data?.ecrId,
            selectedPendingReason: data?.pendingReasonId,
            escalationDate: formattedDate,
            escalationStatusId: data?.escalationSourceId,
            emotionID: data?.emotionID,
            sentimentID: data?.sentimentID,
            escalationtomanagement: data?.isEscalationManagement === true ? "Yes" : data?.isEscalationManagement === false ? "No" : null
          };
          // if (data.tenantFeatureConfiguration.isResolutionStatus) {
          //   self.handleGetResolutionData()
          // }
          // let resolution = self.state.resolutionData.filter(ele => ele.id == data?.resolutionStatusId)
          // var selectetedParameters = {}
          // if (window.localStorage.getItem('Programcode') === 'campusshoes') {
          //   var resolData = {
          //     ResolutionStatusId: data?.ResolutionStatusId,
          //     resolutionComment: data?.resolutionComment
          //   }
          //   selectetedParameters = { ...selectedData, ...resolData }

          // }
          // else {
          //   selectetedParameters = selectedData
          // }

          // var Storedetails = "";
          // for (let i = 0; i < storeData.length; i++) {
          //   Storedetails += storeData[i].storename + ",";
          // }
          // Storedetails = Storedetails.substring(",", Storedetails.length - 1);
          var ProductDetails = "";
          for (let j = 0; j < productData.length; j++) {
            ProductDetails += productData[j].invoiceNumber + ",";
          }
          ProductDetails = ProductDetails.substring(
            ",",
            ProductDetails.length - 1
          );
          self.setState({
            customerIDSocial: data.customerID,
            socialChannelCommentObj: data.socialCommentDetails,
            userEmailID,
            ticketDetailsData: data,
            custID: customer_Id,
            selectetedParameters,
            // StoreName: Storedetails,
            ProductName: ProductDetails,
            //sum
            isorderattached: ProductDetails,
            //sum

            mailFiled: MailDetails,
            fileDummy: attachementDetails,
            oldAgentId: AgentId,
            // role_Name: rolename_,
            loading: false,
            customerProfileInfo: {
              customerEmailId: data.customerEmailId,
              customerPhoneNumber: data.customerPhoneNumber,
              customerName: data.customerName,
              altNumber: data.altNumber,
              customerID: data.customerID,
            },
            callModalValue: {
              ...self.state.callModalValue,
              // customerNumber: data.customerPhoneNumber.includes("+91")
              //   ? data.customerPhoneNumber
              //   : "+91" + data.customerPhoneNumber,
              customerNumber: data.customerPhoneNumber,
            },
            DateOfTicketCreation: TicketCreatedOn,
            toEmailId: data.customerEmailId,
            // selectedResolution: resolution.length ? resolution[0].name : '',
            resolutionComment: data?.resolutionComment,
            // selectedPendingReason: data?.pendingReasonId
            ticketIDsend: ID.toString(),
            OrderInvoiceAttach:
              productData.length > 0 ? productData[0]?.invoiceNumber : "",

          });

          setTimeout(() => {
            self.handleGetDepartmentName(data.unitName);
            self.handleGetConsultingDoctor(data.unitName);
            self.handleGetCategoryList();
            self.handleGetSubCategoryList();
            self.handleGetSubSubCategoryList();
            self.handleGetBusinessUnit();
            self.handleGetSubBusinessUnit();
            self.handleGetIssueTypeList();
            self.handleOnLoadFiles();
            self.handleGetTicketPriorityList(self.state.ticket_Id);
            if (window.localStorage.getItem("Programcode") === "bataclub") {
              self.handleGetEcrData();
            }
            if (data.channelOfPurchaseID) {
              self.handleGetChannelOfPurchaseName(data.channelOfPurchaseID);
            }
            if (
              self.state.DateOfLatestMsgOnTicket != null &&
              self.state.DateOfLatestMsgOnTicket.length > 0
            ) {
              self.checkTktSession(
                new Date(self.state.DateOfTicketCreation),
                new Date(self.state.DateOfLatestMsgOnTicket),
                self.state.IsCommentByCustomer
              );
            } else {
              self.checkTktSession(
                new Date(self.state.DateOfTicketCreation),
                "",
                self.state.IsCommentByCustomer
              );
            }
          }, 100);
        } else {
          self.setState({
            ticketDetailsData: {},
            custID: 0,
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleOnLoadFiles() {
    for (let i = 0; i < this.state.fileDummy.length; i++) {
      var objFile = new Object();
      var name = this.state.fileDummy[i].attachmentName;
      var type = name.substring(name.lastIndexOf(".") + 1, name.length);
      objFile.Type = type;
      objFile.name = name;

      objFile.File = this.state.fileDummy[i];

      // this.state.file.push(objFile);
      this.state.attachedFiles.push(objFile);
    }
  }
  handleDeleteItem(e) {
    console.log(e);
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Order/DeleteOrderItem",
      headers: authHeader(),
      params: {
        itemNumber: e.orderItemID,
      },
    })
      .then(function (res) {
        let arrAttachData = self.state.attchData;
        let removeItemId = [e.orderItemID];
        let finalarrAttachData = arrAttachData.filter(function (item) {
          return removeItemId.indexOf(item.orderItemID) === -1;
        });
        self.setState({
          attchData: finalarrAttachData,
          //28feb
          newUnknowitemarr: self.state.attchData
        });
        NotificationManager.success("Removed Successfully.");
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleDeleteItemNew = (e) => {
    //console.log("wweee", e)
    let indexToRemove = e.codeName
    //console.log("indexToRemove", indexToRemove)
    let newArray = this.state.attchData.filter((item, index) => item.codeName !== indexToRemove)
    //console.log("newArray", newArray)

    this.setState({
      attchData: newArray,
      forUnknowNewFlagAttach: true

    })
    setTimeout(() => {
      const modifiedData = this.state.attchData.map(item => {
        item.isCheck = true;
        return item;
      });
      this.setState({
        newUnknowitemarr: modifiedData,

      })

      console.log("h", modifiedData);


    }, 100);
    NotificationManager.success("Item Removed Successfully")
    // NotificationManager.info("Now Attach order")

  };
  handleAssignDataList() {
    let self = this;
    axios({
      method: "post",
      // url: config.apiUrl + "/Ticketing/getagentlist",
      url: config.apiUrl + "/Ticketing/GetAgentListByBrand",
      headers: authHeader(),
      params: {
        brands: this.state.selectetedParameters.brandID,
      },
    })
      .then(function (res) {
        let data = res.data.responseData;
        self.setState({
          SearchAssignData: data,
          SearchAssignDatacountNew: data.length
        });
      })
      .catch((data) => {
        console.log(data);
      });
  }

  setNotiCurPosiCmnt = (e) => {
    this.setState({
      notiCurPosiCmnt: e.target.selectionStart,
    });
  };
  setNotiCurPosiFreeCmnt = (e) => {
    this.setState({
      notiCurPosiFreeCmnt: e.target.selectionStart,
    });
  };

  handleUpdateTicketStatus(ticStaId) {
    const TranslationContext = this.state.translateLanguage.default;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/Updateticketstatus",
      headers: authHeader(),
      params: {
        TicketID: this.state.ticket_Id,
        status: ticStaId,
      },
    })
      .then(function (res) {
        let status = res.data.status;
        if (status === true) {
          if (ticStaId === 103) {
            NotificationManager.success(
              TranslationContext !== undefined
                ? TranslationContext.ticketingDashboard.thetickethasbeenresolved
                : "The ticket has been resolved."
            );
          } else if (ticStaId === 104) {
            NotificationManager.success(
              TranslationContext !== undefined
                ? TranslationContext.ticketingDashboard.thetickethasbeenclosed
                : "The ticket has been closed."
            );
          }
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  ////Handle Get all messages
  handleGetMessageDetails(ticketId) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getticketmessage",
      headers: authHeader(),
      params: {
        ticketID: ticketId,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        if (status === "Success") {
          let data = res.data.responseData;

          var isSystemGenerated =
            data.length > 0
              ? data[0].msgDetails[0].latestMessageDetails.isSystemGenerateds
              : false;
          // data[0].msgDetails[0].latestMessageDetails.isSystemGenerated;
          let tmpDate =
            data.length > 0
              ? data[0].msgDetails[0].latestMessageDetails.createdDate.split(
                " "
              )[0]
              : null;
          var DateOfatestMsgOnTicket =
            tmpDate != null
              ? tmpDate
                .split("-")
                .reverse()
                .join("-")
              : null;
          var isCustomerComment =
            data[0].msgDetails[0].latestMessageDetails.isCustomerComment;
          self.setState({
            isSystemGenerated,
            messageDetails: data,
            hasAttachmentFile: data,
            DateOfLatestMsgOnTicket: DateOfatestMsgOnTicket,
            IsCommentByCustomer: isCustomerComment,
          });
          setTimeout(() => {
            self.handleHasAttachmentFileData();
          }, 100);
        } else {
          self.setState({
            messageDetails: [],
            hasAttachmentFile: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleHasAttachmentFileData() {
    for (let i = 0; i < this.state.hasAttachmentFile.length; i++) {
      var data = [];
      if (data !== null) {
        data = this.state.hasAttachmentFile[i].msgDetails;
        for (let j = 0; j < data.length; j++) {
          var details = [];
          details = data[j].latestMessageDetails;

          var Files = details.messageAttachments;

          if (Files.length > 0) {
            for (let k = 0; k < Files.length; k++) {
              var objFile = new Object();

              var name = Files[k].attachmentName;
              var FileId = Files[k].ticketMessageID;
              var type = name.substring(name.lastIndexOf(".") + 1, name.length);
              objFile.Type = type;
              objFile.name = name;
              objFile.id = FileId;

              objFile.File = Files[k];

              this.state.FileAttachment.push(objFile);
            }
          }
        }
      }
    }
  }

  handleGetOrderDetails() {
    let self = this;
    axios({
      method: "post",
      // url: config.apiUrl + "/Order/getorderdetailsbycustomerid",
      url: config.apiUrl + "/Order/getorderdetailswithBrandbycustomerId",
      headers: authHeader(),
      params: {
        CustomerID: this.state.custID,
        BrandCode: (this.state.selectetedParameters.brandID).toString()
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ orderDetails: data });
        } else {
          self.setState({ orderDetails: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  ////hanlde get order details
  handleGetProductData(firstcall) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Order/getOrderDetailByTicketID",
      headers: authHeader(),
      params: {
        TicketID: this.state.ticket_Id,
      },
    }).then(function (res) {
      let Msg = res.data.message;
      let data = res.data.responseData;
      let orderItemsUnknw = data.orderItems
      //console.log("orderItems",orderItems)
      if (Msg === "Success") {

        const newSelected = Object.assign({}, self.state.CheckOrderID);

        var OrderSubItem = [];
        var selectedRow = [];

        var CselectedRow = [];
        let currentSelectedInvoiceNo = "";

        for (let i = 0; i < data.length; i++) {
          var selectedInvoiceNo = data[i].invoiceNumber;
          // currentSelectedInvoiceNo += selectedInvoiceNo;
          currentSelectedInvoiceNo = selectedInvoiceNo;
          if (data[i].invoiceNumber) {
            newSelected[data[i].invoiceNumber] = !self.state.CheckOrderID[
              data[i].invoiceNumber
            ];
            selectedRow.push(data[i]);
            self.setState({
              CheckOrderID: data[i].invoiceNumber ? newSelected : false,
              orderMasterID: data[i].orderMasterID,
              OrderInvoiceAttach: data[i].invoiceNumber,
              //sum
              orderDetailsData: selectedRow

            }, () => { console.log("selectedRow", selectedRow) });
          }
          if (data[i].orderItems.length > 0) {
            var OrderSubItem = data[i].orderItems;
            self.setState({
              OrderSubItem,
              isDataAttached: true,

            });
            var Order_Master = self.state.OrderSubItem.filter(
              (x) => x.invoiceNumber === data[i].invoiceNumber
            );
            if (Order_Master.length > 0) {
              var objCheckBoxAllItem = new Object();
              for (let j = 0; j < Order_Master.length; j++) {
                objCheckBoxAllItem[Order_Master[j].articleNumber] = true;

                CselectedRow.push(Order_Master[j]);
              }
              self.setState({
                CheckBoxAllItem: objCheckBoxAllItem,
              });
            }
          }
        }

        self.setState({
          SelectedAllOrder: data,
          OrderSubItem,
          selectedInvoiceNo: currentSelectedInvoiceNo,
          //23feb
          attchData: OrderSubItem,
          //29feb

          // newUnknowitemarr:OrderSubItem




        }, () => { console.log("1676", self.state.attchData) });
        if (firstcall) {
          self.handleOrderSearchData();
        }
      } else {
        self.setState({
          SelectedAllOrder: self.state.SelectedAllOrder,
          isDataAttached: false,
        });
      }
    })
      .catch((data) => {
        console.log(data);
      });
  }
  // onchange on User Drop down list
  setAssignedToValue(check, e) {
    if (check === "freeCmd") {
      let followUpIds = this.state.followUpIds;
      let assign = e.currentTarget.value;
      followUpIds += assign + ",";
      let textBefore = this.state.ticketFreeTextcomment.substring(
        0,
        this.state.notiCurPosiFreeCmnt
      );
      let textAfter = this.state.ticketFreeTextcomment.substring(
        this.state.notiCurPosiFreeCmnt,
        this.state.notiCountFreeCmnt
      );
      // let text = this.state.ticketFreeTextcomment;
      let matchedArr = this.state.AssignToData.filter(
        (x) => x.userID == e.currentTarget.value
      );
      let userName = matchedArr[0].fullName;
      // text += "@" + userName;
      let text = textBefore + " @" + userName + textAfter;
      let notiCurPosiFreeCmnt = textBefore.length + userName.length + 2;
      let notiCountFreeCmnt =
        textBefore.length + userName.length + 2 + textAfter.length;
      this.setState({
        ticketFreeTextcomment: text,
        followUpIds,
        notiCurPosiFreeCmnt,
        notiCountFreeCmnt,
      });
    } else if (check === "comment") {
      let followUpIds = this.state.followUpIds;
      let assign = e.currentTarget.value;
      followUpIds += assign + ",";
      let textBefore = this.state.ticketcommentMSG.substring(
        0,
        this.state.notiCurPosiCmnt
      );
      let textAfter = this.state.ticketcommentMSG.substring(
        this.state.notiCurPosiCmnt,
        this.state.notiCountCmnt
      );
      // let text = this.state.ticketcommentMSG;
      let matchedArr = this.state.AssignToData.filter(
        (x) => x.userID == e.currentTarget.value
      );
      let userName = matchedArr[0].fullName;
      // text += "@" + userName;
      let text = textBefore + " @" + userName + textAfter;
      let notiCurPosiCmnt = textBefore.length + userName.length + 2;
      let notiCountCmnt =
        textBefore.length + userName.length + 2 + textAfter.length;
      this.setState({
        ticketcommentMSG: text,
        followUpIds,
        notiCurPosiCmnt,
        notiCountCmnt,
      });
    } else if (check === "rply") {
      let followUpIds = this.state.followUpIds;
      let assign = e.currentTarget.value;
      followUpIds += assign + ",";
      let text = this.state.replymailBodyData;
      let ckDataArr = text.split("\n\n");
      let ckDataArrNew = [];
      for (let i = 0; i < ckDataArr.length; i++) {
        const element1 = ckDataArr[i].replace(/<[^>]+>/g, "");
        const element2 = element1.replace(/&nbsp;/g, " ");
        const element = element2.replace(/\n/g, " ");
        ckDataArrNew.push(element);
      }
      let selectedVal = "",
        loopFlag = true,
        ckTags,
        selectedArr;
      for (let i = 0; i < ckDataArrNew.length; i++) {
        if (loopFlag) {
          if (this.state.ckCusrsorDataReply.trim() === ckDataArrNew[i].trim()) {
            selectedVal = ckDataArrNew[i];
            selectedArr = i;
            ckTags = ckDataArr[i].match(/<[^>]+>/g);
            loopFlag = false;
          }
        }
      }
      let ckDataArrLast = selectedVal;
      let textBefore = ckDataArrLast.substring(
        0,
        this.state.ckCusrsorPositionReply
      );
      let textAfter = ckDataArrLast.substring(
        this.state.ckCusrsorPositionReply,
        ckDataArrLast.length
      );
      // let ckDataArrLast = ckDataArr.pop();
      // let ckTags = ckDataArrLast.match(/<[^>]+>/g);
      // let ck = ckDataArrLast.replace(/<[^>]+>/g, "");
      let matchedArr = this.state.AssignToData.filter(
        (x) => x.userID == e.currentTarget.value
      );
      let userName = matchedArr[0].fullName;
      // ck += "@" + userName;
      ckDataArrLast = textBefore + " @" + userName + textAfter;
      let newCkCusrsorPosition =
        this.state.ckCusrsorPositionReply + userName.length + 2;
      this.setState({
        ckCusrsorPositionReply: newCkCusrsorPosition,
        ckCusrsorDataReply: ckDataArrLast,
      });
      if (ckTags) {
        // let ckFinal = ckTags[0] + ck + ckTags[1];
        let ckFinal = ckTags[0] + ckDataArrLast + ckTags[1];
        // ckDataArr.push(ckFinal);
        ckDataArr.splice(selectedArr, 1, ckFinal);
        text = ckDataArr.join(" ");
      }
      if (ckTags) {
        this.setState({ replymailBodyData: text, followUpIds });
      } else {
        this.setState({ replymailBodyData: ckDataArrLast, followUpIds });
      }
    } else if (check === "forward") {
      let followUpIds = this.state.followUpIds;
      let assign = e.currentTarget.value;
      followUpIds += assign + ",";
      let text = this.state.ForWardMailBodyData;
      let ckDataArr = text.split("\n\n");
      let ckDataArrNew = [];
      for (let i = 0; i < ckDataArr.length; i++) {
        const element1 = ckDataArr[i].replace(/<[^>]+>/g, "");
        const element2 = element1.replace(/&nbsp;/g, " ");
        const element = element2.replace(/\n/g, " ");
        ckDataArrNew.push(element);
      }
      let selectedVal = "",
        loopFlag = true,
        ckTags,
        selectedArr;
      for (let i = 0; i < ckDataArrNew.length; i++) {
        if (loopFlag) {
          if (
            this.state.ckCusrsorDataForward.trim() === ckDataArrNew[i].trim()
          ) {
            selectedVal = ckDataArrNew[i];
            selectedArr = i;
            ckTags = ckDataArr[i].match(/<[^>]+>/g);
            loopFlag = false;
          }
        }
      }
      let ckDataArrLast = selectedVal;
      let textBefore = ckDataArrLast.substring(
        0,
        this.state.ckCusrsorPositionForward
      );
      let textAfter = ckDataArrLast.substring(
        this.state.ckCusrsorPositionForward,
        ckDataArrLast.length
      );
      // let ckDataArrLast = ckDataArr.pop();
      // let ckTags = ckDataArrLast.match(/<[^>]+>/g);
      // let ck = ckDataArrLast.replace(/<[^>]+>/g, "");
      let matchedArr = this.state.AssignToData.filter(
        (x) => x.userID == e.currentTarget.value
      );
      let userName = matchedArr[0].fullName;
      // ck += "@" + userName;
      ckDataArrLast = textBefore + " @" + userName + textAfter;
      let newCkCusrsorPosition =
        this.state.ckCusrsorPositionForward + userName.length + 2;
      this.setState({
        ckCusrsorPositionForward: newCkCusrsorPosition,
        ckCusrsorDataForward: ckDataArrLast,
      });
      if (ckTags) {
        // let ckFinal = ckTags[0] + ck + ckTags[1];
        let ckFinal = ckTags[0] + ckDataArrLast + ckTags[1];
        // ckDataArr.push(ckFinal);
        ckDataArr.splice(selectedArr, 1, ckFinal);
        text = ckDataArr.join(" ");
      }
      if (ckTags) {
        this.setState({ ForWardMailBodyData: text, followUpIds });
      } else {
        this.setState({ ForWardMailBodyData: ckDataArrLast, followUpIds });
      }
    } else {
      let followUpIds = this.state.followUpIds;
      let assign = e.currentTarget.value;
      followUpIds += assign + ",";
      let ckData = this.state.mailBodyData;
      let ckDataArr = ckData.split("\n\n");
      let ckDataArrNew = [];
      for (let i = 0; i < ckDataArr.length; i++) {
        const element1 = ckDataArr[i].replace(/<[^>]+>/g, "");
        const element2 = element1.replace(/&nbsp;/g, " ");
        const element = element2.replace(/\n/g, " ");
        ckDataArrNew.push(element);
      }
      let selectedVal = "",
        loopFlag = true,
        ckTags,
        selectedArr;
      for (let i = 0; i < ckDataArrNew.length; i++) {
        if (loopFlag) {
          if (this.state.ckCusrsorData.trim() === ckDataArrNew[i].trim()) {
            selectedVal = ckDataArrNew[i];
            selectedArr = i;
            ckTags = ckDataArr[i].match(/<[^>]+>/g);
            loopFlag = false;
          }
        }
      }
      let ckDataArrLast = selectedVal;
      let textBefore = ckDataArrLast.substring(0, this.state.ckCusrsorPosition);
      let textAfter = ckDataArrLast.substring(
        this.state.ckCusrsorPosition,
        ckDataArrLast.length
      );
      // let ckDataArrLast = ckDataArr.pop();
      // let ckTags = ckDataArrLast.match(/<[^>]+>/g);
      // let ck = ckDataArrLast.replace(/<[^>]+>/g, "");
      let matchedArr = this.state.AssignToData.filter(
        (x) => x.userID == e.currentTarget.value
      );
      let userName = matchedArr[0].fullName;
      // ck += "@" + userName;
      ckDataArrLast = textBefore + " @" + userName + textAfter;
      let newCkCusrsorPosition =
        this.state.ckCusrsorPosition + userName.length + 2;
      this.setState({
        ckCusrsorPosition: newCkCusrsorPosition,
        ckCusrsorData: ckDataArrLast,
      });
      if (ckTags) {
        // let ckFinal = ckTags[0] + ck + ckTags[1];
        let ckFinal = ckTags[0] + ckDataArrLast + ckTags[1];
        // ckDataArr.push(ckFinal);
        ckDataArr.splice(selectedArr, 1, ckFinal);
        ckData = ckDataArr.join(" ");
      }
      if (ckTags) {
        this.setState({ mailBodyData: ckData, followUpIds });
      } else {
        this.setState({ mailBodyData: ckDataArrLast, followUpIds });
      }
    }
  }
  setPlaceholderValue(e) {
    let ckData = this.state.mailBodyData;
    let ckDataArr = ckData.split("\n\n");
    let ckDataArrNew = [];
    for (let i = 0; i < ckDataArr.length; i++) {
      const element1 = ckDataArr[i].replace(/<[^>]+>/g, "");
      const element2 = element1.replace(/&nbsp;/g, " ");
      const element = element2.replace(/\n/g, " ");
      ckDataArrNew.push(element);
    }
    let selectedVal = "",
      loopFlag = true,
      ckTags,
      selectedArr;
    for (let i = 0; i < ckDataArrNew.length; i++) {
      if (loopFlag) {
        if (this.state.ckCusrsorData.trim() === ckDataArrNew[i].trim()) {
          selectedVal = ckDataArrNew[i];
          selectedArr = i;
          ckTags = ckDataArr[i].match(/<[^>]+>/g);
          loopFlag = false;
        }
      }
    }
    let ckDataArrLast = selectedVal;
    let textBefore = ckDataArrLast.substring(0, this.state.ckCusrsorPosition);
    let textAfter = ckDataArrLast.substring(
      this.state.ckCusrsorPosition,
      ckDataArrLast.length
    );
    // let ckDataArrLast = ckDataArr.pop();
    // let ckTags = ckDataArrLast.match(/<[^>]+>/g);
    // let ck = ckDataArrLast.replace(/<[^>]+>/g, "");
    let matchedArr = this.state.placeholderData.filter(
      (x) => x.mailParameterID == e.currentTarget.value
    );
    let placeholderName = matchedArr[0].parameterName;
    // ck += placeholderName;
    ckDataArrLast = textBefore + " " + placeholderName + textAfter;
    let newCkCusrsorPosition =
      this.state.ckCusrsorPosition + placeholderName.length + 1;
    this.setState({
      ckCusrsorPosition: newCkCusrsorPosition,
      ckCusrsorData: ckDataArrLast,
    });
    if (ckTags) {
      // let ckFinal = ckTags[0] + ck + ckTags[1];
      let ckFinal = ckTags[0] + ckDataArrLast + ckTags[1];
      // ckDataArr.push(ckFinal);
      ckDataArr.splice(selectedArr, 1, ckFinal);
      ckData = ckDataArr.join(" ");
    }
    if (ckTags) {
      this.setState({ mailBodyData: ckData });
    } else {
      this.setState({ mailBodyData: ckDataArrLast });
    }

    // this.handleGetMailFooterData();
  }
  handleGetStoreDetails() {
    let self = this;
    axios({
      method: "post",
      // url: config.apiUrl + "/Store/SearchStoreDetail",
      url: config.apiUrl + "/Store/SearchStoreDetailByBrand",
      headers: authHeader(),
      params: {
        SearchText: self.state.SearchStore,
        Brands: self.state.selectetedParameters.brandID,
      },
    })
      .then(function (res) {
        let data = res.data.responseData;
        let Msg = res.data.message;
        if (Msg === "Success") {
          self.setState({ storeDetails: data });
          NotificationManager.success("Store Fetch Successfully");
        } else if (Msg === "Record Not Found") {
          NotificationManager.error(Msg);
          self.setState({
            storeDetails: [],
          });
        } else {
          self.setState({
            storeDetails: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleGetCountOfTabs(ID) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/GetCountByticketID",
      headers: authHeader(),
      params: {
        ticketID: ID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ tabCounts: data });
        } else {
          self.setState({ tabCounts: {} });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleUpdateTicketDetails() {
    const TranslationContext = this.state.translateLanguage.default;

    if (this.state.statusValidate) {
      if (this.state.checkPriorityDetails === false) {
        // console.log("ecrId",this.state.selectetedParameters?.ecrId);
        // console.log("categoryID",this.state.selectetedParameters.categoryID);
        // console.log("subCategoryID",this.state.selectetedParameters.subCategoryID);
        // console.log("subSubCategoryID",this.state.selectetedParameters.subSubCategoryID);
        // console.log("issueTypeID",this.state.selectetedParameters.issueTypeID);
        // console.log("priorityID",this.state.selectetedParameters.priorityID);
        let self = this;
        let bataValid = true;
        if (true) {
          if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "Category".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.categoryID ===
              "Select Category" ||
              self.state.selectetedParameters?.categoryID === null ||
              self.state.selectetedParameters?.categoryID === 0)
          ) {
            self.setState({
              catIssue: "Category is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "Sub Category".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.subCategoryID ===
              "Select Sub Category" ||
              self.state.selectetedParameters?.subCategoryID === null ||
              self.state.selectetedParameters?.subCategoryID === 0)
          ) {
            self.setState({
              subCatIssue: "Sub Category is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) =>
                x.fieldName.toLowerCase() === "SubSubCategoryId".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.subSubCategoryID ===
              "Select Sub Sub Category" ||
              self.state.selectetedParameters?.subSubCategoryID === null ||
              self.state.selectetedParameters?.subSubCategoryID === 0)
          ) {
            self.setState({
              subSubCatIssue: "Sub Sub Category is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "Issue Type".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.issueTypeID ===
              "Select Issue Type" ||
              self.state.selectetedParameters?.issueTypeID === null ||
              self.state.selectetedParameters?.issueTypeID === 0)
          ) {
            self.setState({
              issueTypeError: "Issue Type is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "ECR".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.ecrId === "ECR" ||
              self.state.selectetedParameters?.ecrId === null)
          ) {
            self.setState({
              ecrError: "ECR is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) =>
                x.fieldName.toLowerCase() === "Ticket Priority".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.priorityID ===
              "Select Priority" ||
              self.state.selectetedParameters?.priorityID === null)
          ) {
            self.setState({
              priorityError: "Priority is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "BusinessUnit".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.businessUnitId ===
              "Select Business Unit Category" ||
              self.state.selectetedParameters?.businessUnitId === null ||
              self.state.selectetedParameters?.businessUnitId === 0)
          ) {
            self.setState({
              BusinessUnitError: "Business is mandatory",
            });
            bataValid = false;
          } else if (
            self.state.ticketFields.filter(
              (x) =>
                x.fieldName.toLowerCase() ===
                "Channel Of Purchase".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.channelOfPurchaseID ===
              "Select Channel Of Purchase" ||
              self.state.selectetedParameters?.channelOfPurchaseID === null ||
              self.state.selectetedParameters?.channelOfPurchaseID === 0)
          ) {
            self.setState({
              TouchUnitError: "Touch Point is mandatory",
            });
            bataValid = false;
          }
          else if (
            self.state.ticketFields.filter(
              (x) => x.fieldName.toLowerCase() === "Unit Name".toLowerCase()
            )[0]?.fieldMandatory &&
            (self.state.selectetedParameters?.unitName ===
              "Select" ||
              self.state.selectetedParameters?.unitName === null ||
              self.state.selectetedParameters?.unitName === 0)
          ) {
            self.setState({
              UnitNameError: " Mandatory",
            });
            bataValid = false;
          }
          // else if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "Sentiment".toLowerCase())[0].fieldMandatory
          //   && (self.state.selectetedParameters?.sentimentID === "Select Sentiment" || self.state.selectetedParameters?.sentimentID === null || self.state.selectetedParameters?.sentimentID === 0)) {
          //   self.setState({
          //     sentimentError: "Sentiment is mandatory",
          //   })
          //   bataValid = false
          // }
          // else if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "Emotion".toLowerCase())[0].fieldMandatory
          //   && (self.state.selectetedParameters?.emotionID === "Select Emotion" || self.state.selectetedParameters?.emotionID === null || self.state.selectetedParameters?.emotionID === 0)) {
          //   self.setState({
          //     emotionError: "Emotion is mandatory",
          //   })
          //   bataValid = false
          // }
          else if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "Ticket Priority".toLowerCase())[0].fieldMandatory
            && (self.state.selectetedParameters?.priorityID === "Select Priority" || self.state.selectetedParameters?.priorityID === null || self.state.selectetedParameters?.priorityID === 0)) {
            self.setState({
              priorityError: "Priority is mandatory",
            })
            bataValid = false
          }
          // if(this.state.selectetedParameters.ticketActionTypeID === 202){
          //    if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "EscalationSource".toLowerCase())[0].fieldMandatory
          //   && (self.state.selectetedParameters.escalationStatusId === "Select Escalation Status" || self.state.selectetedParameters?.escalationStatusId === null)) {
          //   self.setState({
          //     escalationsourceerror: "Escalation source is mandatory",
          //   })
          //   bataValid = false
          // }

          // }

          // else if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "Ticket Priority".toLowerCase())[0].fieldMandatory
          //   && (self.state.selectetedParameters?.priorityID === "Select Priority" || self.state.selectetedParameters?.priorityID === null)) {
          //   self.setState({
          //     priorityError: "Priority is mandatory",
          //   })
          //   bataValid = false
          // }
          // else if (self.state.ticketFields.filter((x) => x.fieldName.toLowerCase() === "Ticket Priority".toLowerCase())[0].fieldMandatory
          //   && (self.state.selectetedParameters?.priorityID === "Select Priority" || self.state.selectetedParameters?.priorityID === null)) {
          //   self.setState({
          //     priorityError: "Priority is mandatory",
          //   })
          //   bataValid = false
          // }

          else {
            bataValid = true;
          }
        }

        if (bataValid) {
          this.setState({ KnowledgeBaseModal: false });
          axios({
            method: "post",
            url: config.apiUrl + "/Ticketing/Updateticketstatus",
            headers: authHeader(),
            data: {
              TicketID: this.state.ticket_Id,
              StatusID: this.state.selectetedParameters.ticketStatusID,
              BrandID: this.state.selectetedParameters.brandID,
              CategoryID: this.state.selectetedParameters.categoryID,
              SubCategoryID: this.state.selectetedParameters.subCategoryID,
              subSubCategoryId:
                parseInt(this.state.selectetedParameters.subSubCategoryID) > 0
                  ? parseInt(this.state.selectetedParameters.subSubCategoryID)
                  : null,
              bussinessUnit:
                parseInt(this.state.selectetedParameters.businessUnitId) > 0
                  ? parseInt(this.state.selectetedParameters.businessUnitId)
                  : null,
              subBussinessUnit:
                parseInt(this.state.selectetedParameters.subBusinessUnitId) > 0
                  ? parseInt(this.state.selectetedParameters.subBusinessUnitId)
                  : null,
              IssueTypeID: this.state.selectetedParameters.issueTypeID,
              PriortyID: this.state.selectetedParameters.priorityID,
              ChannelOfPurchaseID: this.state.selectetedParameters
                .channelOfPurchaseID,
              TicketActionID: this.state.selectetedParameters
                .ticketActionTypeID,
              AppointmnetDatetime:
                this.state.selectetedParameters.appointmentDate !== null
                  ? moment(
                    this.state.selectetedParameters.appointmentDate
                  ).format("YYYY-MM-DD hh:mm A")
                  : null,
              CallBackDateTime:
                this.state.selectetedParameters.callBack === "true" ||
                  this.state.selectetedParameters.callBack === true
                  ? this.state.selectetedParameters.callBackDate !== null
                    ? moment(
                      this.state.selectetedParameters.callBackDate
                    ).format("YYYY-MM-DD hh:mm A")
                    : null //this.state.selectetedParameters.callBackDate
                  : null,
              DepartmentName:
                this.state.selectetedParameters.departmentName || 0,
              CallBack:
                this.state.selectetedParameters.callBack === "true" ||
                  this.state.selectetedParameters.callBack === true
                  ? true
                  : false,
              CustomerType: this.state.selectetedParameters.customerType || 0,
              ConsultingHospital:
                this.state.selectetedParameters.consultingHospital || 0,
              PurposeOfVisit:
                this.state.selectetedParameters.purposeOfVisit || 0,
              ConsultingDoctor:
                this.state.selectetedParameters.consultingDoctor || 0,
              UnitName: this.state.selectetedParameters.unitName || 0,
              UnitCity: this.state.selectetedParameters.unitCity || 0,
              LOB: this.state.selectetedParameters.lob || 0,
              ComplaintCall: this.state.selectetedParameters.complaintCall || 0,
              StoreCode: this.state.selectetedParameters.storeCode || "",
              StoreName: this.state.selectetedParameters.storeName || "",
              StoreCity: this.state.selectetedParameters.storeCity || "",
              StoreAddress: this.state.selectetedParameters.storeAddress || "",
              StorePinCode: this.state.selectetedParameters.storePinCode || "",
              StorePhoneNo: this.state.selectetedParameters.storePhoneNo || "",
              StoreEmailID: this.state.selectetedParameters.storeEmailID || "",
              Country: this.state.selectetedParameters.country || "",
              Region: this.state.selectetedParameters.region || "",
              MktPlace: this.state.selectetedParameters.mktPlace || "",
              ResolutionStatusId:
                this.state.selectetedParameters?.resolutionStatusId !==
                  undefined
                  ? parseInt(
                    this.state.selectetedParameters?.resolutionStatusId
                  )
                  : 0,
              ResolutionComment: this.state.selectetedParameters
                ?.resolutionComment,
              EcrId: this.state.selectetedParameters?.ecrId,
              pendingReasonId: parseInt(
                this.state.selectetedParameters?.selectedPendingReason
              ),
              EscalationDate:
                this.state.selectetedParameters.ticketActionTypeID === 202
                  ? this.state.selectetedParameters.escalationDate
                  : "",
              EscalationSourceId:
                this.state.selectetedParameters.escalationStatusId ===
                  "Select Escalation Status"
                  ? 0
                  : this.state.selectetedParameters.escalationStatusId,
              SentimentID: this.state.selectetedParameters.sentimentID,
              EmotionID: this.state.selectetedParameters.emotionID,
              isEscalationManagement: this.state.selectetedParameters.escalationtomanagement === "Yes" ? true : this.state.selectetedParameters.escalationtomanagement === "No" ? false : null || null

            },
          })
            .then(function (res) {
              let status = res.data.message;
              if (status === "Success") {
                if (self.state.isaddKnowledge) {
                  self.handleAddKnwoldgeBase();
                } else {
                  NotificationManager.success(
                    TranslationContext !== undefined
                      ? TranslationContext.alertmessage
                        .ticketupdatedsuccessfully
                      : "Ticket updated successfully."
                  );
                  // self.props.history.push("dashboard");
                }
              } else {
                NotificationManager.warning(status);
              }
            })
            .catch((data) => {
              console.log(data);
            });
        }
      } else {
        NotificationManager.error(
          TranslationContext !== undefined
            ? TranslationContext.ticketingDashboard.slahasnotbeencreated
            : "SLA has not been created"
        );
      }
    } else {
      NotificationManager.error(
        TranslationContext !== undefined
          ? TranslationContext.ticketingDashboard.unauthorizedaccess
          : "Unauthorized Access!"
      );
    }
  }
  handleRequireSize(e, rowData) {
    var id = rowData.original.articleNumber;
    var value = document.getElementById("requireSizeTxt" + id).value;
    var reg = /^[0-9\b]+$/;

    if (value === "" || reg.test(value)) {
      var index = this.state.OrderSubItem.findIndex(
        (x) => x.articleNumber === rowData.original.articleNumber
      );

      var OrderSubItem = this.state.OrderSubItem;
      OrderSubItem[index].requireSize = value;

      this.setState({ OrderSubItem });
      this.searchInput.focus();
    } else {
      NotificationManager.error("Only numeric value allow.");
    }

    // var index = this.state.OrderSubItem.findIndex(
    //   x => x.articleNumber === rowData.original.articleNumber
    // );

    // var OrderSubItem = this.state.OrderSubItem;
    // OrderSubItem[index].requireSize = value;

    // this.setState({ OrderSubItem });
  }
  handleOrderSearchData = (propAllOrderConfigNull) => {
    let self = this;
    let allOrderConfigNull = propAllOrderConfigNull === false ? false : true;
    axios({
      method: "post",
      // url: config.apiUrl + "/Order/getOrderListWithItemDetails",
      url: config.apiUrl + "/Order/getOrderListWithItemDetailsByBrand",
      headers: authHeader(),
      params: {
        // OrderNumber: this.state.orderNumber === "" ? this.state.orderMasterID : this.state.orderNumber,
        // OrderNumber: this.state.orderNumber,
        OrderNumber:
          this.state.orderNumber === ""
            ? this.state.masterConfigrationUnknown.isUnknown === true
              ? this.state.orderMasterID
              : this.state.orderNumber
            : this.state.orderNumber,
        CustomerID: this.state.custID,
        allorder: this.state.orderNumber ? false : true,
        TicketId:
          this.state.masterConfigrationUnknown.isUnknown && allOrderConfigNull
            ? this.state.ticket_Id
            : 0,
        BrandCode: (this.state.selectetedParameters.brandID).toString()
      },
    })
      .then(function (res) {
        let Msg = res.data.message;
        let mainData = res.data.responseData;
        // console.log("mainData[0].orderMasterID",mainData,"==",mainData[0].orderMasterID);
        // this.setState({
        //   orderMasterID : mainData[0].orderMasterID
        // })
        var OrderSubItem = [];
        let selectedInvoiceNo = self.state.selectedInvoiceNo.split(",");

        for (let i = 0; i < mainData.length; i++) {
          if (mainData[i].invoiceNumber.length > 0) {
            for (let j = 0; j < mainData[i].invoiceNumber.length; j++) {
              OrderSubItem.push(mainData[i].invoiceNumber[j]);
            }
          }
        }

        let SelectedAllOrder = [];

        for (let i = 0; i < mainData.length; i++) {
          for (let j = 0; j < selectedInvoiceNo.length; j++) {
            if (mainData[i].invoiceNumber == selectedInvoiceNo[j]) {
              SelectedAllOrder.push(mainData[i]);
              self.setState({
                isDataAttached: true,
              });
            }
          }
        }

        self.setState(
          {
            message: Msg,
            orderDetailsData: mainData,
            OrderSubItem,
            SelectedAllOrder,
            isOrderSearchLoading: false,
            orderIdTobeSearched: "",
            mobileNOtoSearch: "",
          },
          console.log("main data orderDetailsData", self.state.OrderSubItem)
        );
      })
      .catch((data) => {
        console.log(data);
        self.setState({
          isOrderSearchLoading: false,
        });
      });
  };

  handleNoteOnChange = (e) => {
    let self = this;
    self.setState({
      [e.target.name]: e.target.value,
    });
    if (e.target.name === "ticketcommentMSG") {
      self.setState({
        notiCountCmnt: e.target.value.length,
        notiCurPosiCmnt: e.target.value.length,
      });
    }
    if (e.target.name === "ticketFreeTextcomment") {
      self.setState({
        notiCountFreeCmnt: e.target.value.length,
        notiCurPosiFreeCmnt: e.target.value.length,
      });
    }

  };

  handleTicketFlagOnChange = (e) => {
    this.setState({
      [e.target.name]: e.target.value,
    });
    if (e.target.name === "Recepient") {
      this.setState({
        isCopyRecepient: e.target.value == "false" ? true : false,
      });
    }
    else if (e.target.name === "AutoReply") {
      this.setState({
        isAutoReply: e.target.value == "false" ? true : false,
      });
    }
    else if (e.target.name === "CopyContent") {
      this.setState({
        isCopyContent: e.target.value == "false" ? true : false,
      });
    }
  };
  HandleRowClickPage(_ticketId, _Source) {
    let Id = _ticketId;
    let ticketSourceType = _Source;
    let self = this;

    let appliedTableFilters = {
      status: "",
      category: "",
      priority: "",
      createdOn: "",
      assignedTo: "",
    };
    setTimeout(function () {
      if (window.localStorage.getItem('isTicketInNewTab') === "true") {
        window.open('./myticket?ticketDetailID=' + Id + '&sourceName=' + ticketSourceType
          + '&screenName=myticketlist' + '&appliedTableFilters=' + JSON.stringify(appliedTableFilters)
          + '&tableFilterData=')
      }
    }, 100);
  };

  fileUpload = (e) => {
    this.setState({ fileName: e.target.files[0].name });
  };
  fileDrop = (e) => {
    this.setState({ fileName: e.dataTransfer.files[0].name });
    e.preventDefault();
  };
  fileDragOver = (e) => {
    e.preventDefault();
  };

  hanldeStatusChange(e) {
    var SelectValue = e.target.value;
    if (SelectValue === "1") {
      this.setState({
        CustStoreStatusDrop: 1,
      });
    } else {
      this.setState({
        CustStoreStatusDrop: 2,
      });
    }
  }

  handleDropDownChange = (e) => {
    console.log(e.target.value, "e.target.value");
    let name = e.target.name;
    console.log(e.target.name, "e.target.name");
    let Value = e.target.value;
    var data = this.state.selectetedParameters;
    this.setState({
      catIssue: "",
      subCatIssue: "",
      subSubCatIssue: "",
      issueTypeError: "",
      ecrError: "",
      priorityError: "",
      BusinessUnitError: "",
      TouchUnitError: "",
      UnitNameError: "",
      sentimentError: "",
      emotionError: "",
    });
    if (name === "unitName") {
      this.handleGetDepartmentName(Number(e.target.value));
      this.handleGetConsultingDoctor(Number(e.target.value));
      data[name] = parseInt(Value);
      this.setState({
        selectetedParameters: data,
      });

    }
    if (name === "storeName" || name === "storeCode") {
      if (this.state.channelOfPurchaseName === "d2c") {
        this.handleSearchStore(Value);
      }
    }
    if (name === "priorityID") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data,
      });
    } else if (name === "ticketStatusID") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data,
      });
    } else if (name === "brandID") {
      data[name] = Value;
      data["categoryID"] = null;
      data["subCategoryID"] = null;
      data["businessUnitId"] = null;
      data["subSubCategoryID"] = null;
      data["issueTypeID"] = null;
      data["ecrId"] = null;
      this.setState({
        selectetedParameters: data,
        CategoryData: [],
        SubCategoryData: [],
        SubSubCategoryData: [],
        IssueTypeData: [],
        ecrData: [],
        businessUnitData: [],
        subbusinessUnitData: [],
        TicketPriorityData: [],
        checkPriorityDetails: false,
        isToggle: false,
      });
      setTimeout(() => {
        if (this.state.selectetedParameters.brandID) {
          // if (window.localStorage.getItem('Programcode') === "campusshoes")
          if (this.state.isBusinessUnit_Dependent) {
            this.handleGetBusinessUnit();
          } else {
            this.handleGetCategoryList();
          }
          this.handleTemplateBindByIssueType();
        }
      }, 1);
    } else if (name === "businessUnitId") {
      //else if (this.state.IsCategoryBusinessUnit_Dependent)
      if (this.state.IsCategoryBusinessUnit_Dependent) {
        data[name] = Value;

        data["subCategoryID"] = null;
        data["subSubCategoryID"] = null;
        data["issueTypeID"] = null;
        data["ecrId"] = null;
        this.setState({
          selectetedParameters: data,
          subbusinessUnitData: [],
          SubCategoryData: [],
          SubSubCategoryData: [],
          IssueTypeData: [],
          ecrData: [],
          TicketPriorityData: [],
          checkPriorityDetails: false,
        });

        setTimeout(() => {
          if (this.state.selectetedParameters.businessUnitId) {
            this.handleGetCategoryList();
            this.handleGetSubBusinessUnit();
          }
        }, 1);
      } else {
        data[name] = Value;
        this.setState({
          selectetedParameters: data,
          subbusinessUnitData: [],
        });

        setTimeout(() => {
          if (this.state.selectetedParameters.businessUnitId) {
            this.handleGetSubBusinessUnit();
          }
        }, 1);
      }
    } else if (name === "subBusinessUnitId") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data,
      });

      setTimeout(() => {
        if (this.state.selectetedParameters.subCategoryID) {
        }
      }, 1);
    } else if (name === "categoryID") {
      data[name] = Value;
      data["subCategoryID"] = null;
      data["subSubCategoryID"] = null;
      data["issueTypeID"] = null;
      data["ecrId"] = null;
      this.setState({
        selectetedParameters: data,
        SubCategoryData: [],
        SubSubCategoryData: [],
        IssueTypeData: [],
        ecrData: [],
        TicketPriorityData: [],
        checkPriorityDetails: false,
      });
      setTimeout(() => {
        if (this.state.selectetedParameters.categoryID) {
          this.handleGetSubCategoryList();
        }
      }, 1);
    } else if (name === "subCategoryID") {
      data[name] = Value;

      data["subSubCategoryID"] = null;
      data["issueTypeID"] = null;
      data["ecrId"] = null;
      this.setState({
        selectetedParameters: data,
        SubSubCategoryData: [],
        IssueTypeData: [],
        ecrData: [],
        TicketPriorityData: [],
        checkPriorityDetails: false,
      });

      setTimeout(() => {
        if (this.state.selectetedParameters.subCategoryID) {
          // if (window.localStorage.getItem('Programcode') === "campusshoes")
          if (this.state.isSubSubCategory_Dependent) {
            this.handleGetSubSubCategoryList();
          } else {
            this.handleGetIssueTypeList();
          }
          // this.handleGetSubSubCategoryList();
        }
      }, 1);
    } else if (name === "subSubCategoryID") {
      data[name] = Value;

      data["issueTypeID"] = null;
      data["ecrId"] = null;
      this.setState({
        selectetedParameters: data,
        IssueTypeData: [],
        ecrData: [],
        TicketPriorityData: [],
        checkPriorityDetails: false,
      });

      setTimeout(() => {
        if (this.state.selectetedParameters.subSubCategoryID) {
          this.handleGetIssueTypeList();
        }
      }, 100);
    } else if (name === "issueTypeID") {
      data[name] = Value;

      this.setState({
        selectetedParameters: data,
        TicketPriorityData: [],
        checkPriorityDetails: false,
        isToggle: false,
      });
      setTimeout(() => {
        if (!this.state.isPriorityECRSelected) {
          this.handleGetTicketPriorityList();
        }
        //this.handleGetTicketPriorityList(0);
        this.handleTemplateBindByIssueType();
      }, 2);
    } else if (name === "ticketActionTypeID") {
      data[name] = parseInt(Value);
      data["escalationDate"] = "";
      data["escalationStatusId"] = 0;
      this.setState({
        selectetedParameters: data,
      });
    } else if (name === "channelOfPurchaseID") {
      data[name] = Value;
      this.handleGetChannelOfPurchaseName(Value);
      this.setState({
        selectetedParameters: data,
        selectetedParameters: {
          ...this.state.selectetedParameters,
          storeCode: "",
          storeName: "",
          storeCity: "",
          storeAddress: "",
          storePinCode: "",
          storePhoneNo: "",
          storeEmailID: "",
          country: "",
          region: "",
        },
      });
    } else if (name === "ecrId") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data,
      });
    }
    else if (name === "sentimentID") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data
      })

    }
    else if (name === "emotionID") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data
      })

    }
    else if (name === "escalationtomanagement") {
      data[name] = Value;
      this.setState({
        selectetedParameters: data
      })

    }
    else {
      data[name] = Value;
      this.setState({
        selectetedParameters: data,
      });
    }
    console.log(data, "selectedparameter");
  };

  handleGetBrandList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Brand/GetBrandList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            isSubSubCategory_Dependent: data[0].isSubSubCategory,
            isBusinessUnit_Dependent: data[0].isBusinessUnit,
            BrandData: data,
          });
        } else {
          self.setState({ BrandData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleGetCategoryList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Category/GetCategoryList",
      headers: authHeader(),
      params: {
        BrandID: self.state.selectetedParameters.brandID,
        businessUnitId: this.state.selectetedParameters.businessUnitId,
      },
    })
      .then(function (res) {
        let data = res.data;
        let CategoryData = res.data;
        if (data.length > 0) {
          self.setState({
            CategoryData: CategoryData,
          });
        } else {
          self.setState({
            CategoryData: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleGetTicketPriorityList(ticketid) {
    let self = this;
    axios({
      method: "get",
      url: config.apiUrl + "/Priority/GetPriorityList",
      // url: config.apiUrl + "/SLA/ValidateSLAByIssueTypeID",
      headers: authHeader(),
      params: {
        issueTypeID: this.state.selectetedParameters.issueTypeID,
        ticketID: ticketid,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            TicketPriorityData: data,
            checkPriorityDetails: false,
          });
        } else {
          self.setState({ TicketPriorityData: [], checkPriorityDetails: true });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleGetSubCategoryList() {
    let self = this;
    let catId = this.state.selectedCategoryKB == 0 ? this.state.selectetedParameters.categoryID : this.state.selectedCategoryKB;
    axios({
      method: "post",
      url: config.apiUrl + "/SubCategory/GetSubCategoryByCategoryID",
      headers: authHeader(),
      params: {
        CategoryID: catId,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ SubCategoryData: data });
        } else {
          self.setState({ SubCategoryData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetSubSubCategoryList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/SubSubCategory/GetSubSubCategoryBySubCategoryID",
      headers: authHeader(),
      params: {
        SubCategoryID: this.state.selectetedParameters.subCategoryID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ SubSubCategoryData: data });
        } else {
          self.setState({ SubSubCategoryData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetIssueTypeList() {
    let self = this;
    var parameter = this.state.selectetedParameters;

    axios({
      method: "post",
      url: config.apiUrl + "/IssueType/GetIssueTypeList",
      headers: authHeader(),
      params: {
        // SubCategoryID: window.localStorage.getItem('Programcode') === "campusshoes" ? this.state.selectetedParameters.subSubCategoryID : this.state.selectetedParameters.subCategoryID,
        SubCategoryID: this.state.selectedSubCategoryKB == "0" ? (this.state.isSubSubCategory_Dependent
          ? this.state.selectetedParameters.subSubCategoryID
          : this.state.selectetedParameters.subCategoryID) : this.state.selectedSubCategoryKB,
        isSubSubCategory: this.state.isSubSubCategory_Dependent,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          if (window.localStorage.getItem("Programcode") === "bataclub") {
            // if (self.state.displayTicketFields["ECR"]) {
            if (data.length === 1) {
              parameter["issueTypeID"] = data[0]?.issueTypeID;
            }
            self.handleGetTicketPriorityList(self.state.ticket_Id);
            self.handleGetEcrData();
          }
          self.setState({
            IssueTypeData: data,
            selectetedParameters: parameter,
          });
        } else {
          self.setState({ IssueTypeData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetBusinessUnit() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetBusinessUnitList",
      headers: authHeader(),
      // params: {
      //   SubCategoryID: this.state.selectetedParameters.subCategoryID,
      // },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ businessUnitData: data });
        } else {
          self.setState({ businessUnitData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  //get resolution dropdown data
  handleGetResolutionData = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/getResolutionStatusList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          let resolution = data.filter(
            (ele) =>
              ele.id == self.state.selectetedParameters?.resolutionStatusId
          );
          self.setState({
            selectedResolution: resolution.length ? resolution[0].name : "",
            resolutionData: data,
          });
          console.log(resolution, "resolution");
        } else {
          self.setState({ resolutionData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  //escalation status
  handleGetescalationData = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/getEscalationStatusList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          //let resolution = data.filter(ele => ele.id == self.state.selectetedParameters?.resolutionStatusId)
          self.setState({
            //selectedResolution: resolution.length ? resolution[0].name : '',
            EscalationStatusData: data,
          });
          //console.log(resolution, "EscalationStatusData");
        } else {
          self.setState({ EscalationStatusData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  // ECR Data
  handleGetEcrData = () => {
    let self = this;
    var parameter = this.state.selectetedParameters;
    axios({
      method: "get",
      url: config.apiUrl + "/Master/GetEcrBySubSubCategoryId",
      headers: authHeader(),
      params: {
        subSubCategoryId: this.state.selectetedParameters?.subSubCategoryID,
        // subSubCategoryId: 131
      },
    })
      .then(function (res) {
        let status = res.data.statusCode;
        let data = res.data.responseData;
        if (status === 200) {
          parameter["priorityID"] = data?.priorityId;
          parameter["ecrId"] = data?.ecrID;
          self.setState({
            ecrData: data,
            selectetedParameters: parameter,
          });
        } else {
          self.setState({ ecrData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  //get resolution dropdown data
  handleGetPendingReasonData = () => {
    let self = this;
    axios({
      method: "get",
      url: config.apiUrl + "/Master/getPendingResonStatusList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            pendingReasonData: data,
          });
        } else {
          self.setState({ pendingReasonData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  handleGetSubBusinessUnit() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetSubBusinessUnitList",
      headers: authHeader(),
      params: {
        businessUnitId: this.state.selectetedParameters.businessUnitId,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ subbusinessUnitData: data });
        } else {
          self.setState({ subbusinessUnitData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetChannelOfPurchaseList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetChannelOfPurchaseList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ ChannelOfPurchaseData: data });
        } else {
          self.setState({ ChannelOfPurchaseData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleAssignTickets() {
    const TranslationContext = this.state.translateLanguage.default;
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/AssignTickets",
      headers: authHeader(),
      params: {
        TicketID: this.state.ticket_Id,
        AgentID: this.state.agentId,
        Remark: "",
      },
    })
      .then(function (res) {
        let messageData = res.data.message;
        if (messageData === "Success") {
          NotificationManager.success(
            TranslationContext !== undefined
              ? TranslationContext.alertmessage.ticketsassignedsuccessfully
              : "Tickets assigned successfully."
          );
          self.HandlelabelModalClose();
          // self.handleReAssignCommentOpen();
          setTimeout(function () {
            // self.componentDidMount();
            self.handleGetTicketDetails(self.state.ticket_Id);
          }, 1500);
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  expand_row(row) {
    // var expanded = { ...this.state.expanded };
    // if (expanded[row.index]) {
    //   expanded[row.index] = !expanded[row.index];
    // } else {
    //   expanded[row.index] = true;
    // }

    this.setState({
      expanded: row.invoiceNO,
    });
  }
  fileDragEnter = (e) => {
    e.preventDefault();
  };
  HandleKbLinkModalOpen() {
    this.setState({ KbLink: true });
  }

  HandleStoreProductSearchModalOpen() {
    this.setState({ storeproductsearch: true });
  }
  HandleStoreProductSearchModalClose() {
    this.setState({ storeproductsearch: false });
  }
  handleOrderTableOpen() {
    let selectedInvoiceNo = this.state.ProductName;
    this.setState({
      selectedInvoiceNo,
      isAttachProduct: true,
      NewUnknown: true,
      // isAttachProduct: !self.state.isAttachProduct
    });
    setTimeout(() => {
      setTimeout(() => {
        this.handleGetProductData(true);
        // this.handleOrderSearchData();
        //sum
        this.handleNewUnknownOrderEast();
      }, 500);
      this.setState({ OrderTable: true });
    }, 500);
  }

  handleDeleteOrder() {
    var user_ID = JSON.parse(localStorage.getItem("UserProfile"));
    var orderIds = 0;
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Order/cancelOrder",
      headers: authHeader(),
      data: {
        ticketId: self.state.ticket_Id,
        modifyBy: user_ID.agentId,
      },
    })
      .then(function (res) {
        let data = res.data;
        console.log("res.data", res.data);
        if (data.status === true) {
          self.setState({
            ProductName: "",
            isDataAttached: false,
            OrderInvoiceAttach: "",
            orderDetailsData: [],
            //cancelorder29feb
            attchData: []
          });
          NotificationManager.success(data.message);
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleOrderTableClose() {
    this.setState({
      OrderTable: false,
      SearchStore: "",
      OrdItmBtnStatus: false,
    });
  }

  HandleStoreModalOpen() {
    this.setState({
      storemodal: true,
      CheckStoreID: this.state.storeDetails[0].storeCode
    });
  }
  HandleStoreModalClose() {
    this.setState({ storemodal: false, SearchStore: "" });
  }
  handleUpOpen(id) {
    this.setState({ collapseUp: true, collapseId: id });
  }
  handleUpClose(id) {
    this.setState({ collapseUp: false, collapseId: id });
  }
  onOpenModal = () => {
    this.setState({ open: true });
  };
  onCloseModal() {
    this.setState({ open: false });
  }
  HandleProfileModalOpen = () => {
    this.setState({ profilemodal: true });
    this.handleCustomerDetailSocial()
  };
  HandleProfileModalClose() {
    this.setState({ profilemodal: false });
  }
  HandleTicketListModalOpen() {
    const _ticketid = this.state.ticketDetailsData.ticketID;
    let self = this;
    axios({
      method: "get",
      url: config.apiUrl + "/Ticketing/GetAllMergeTicketByTicketIdOrSubject",
      headers: authHeader(),
      params: {
        searchText: "",
        CustomerId: this.state.custID,
      },
    })
      .then(function (res) {
        let messageData = res.data.message;
        if (messageData === "Success") {
          let ticketList = res.data.responseData.filter(x => x.ticketId != _ticketid);
          if (ticketList.length < 1) {
            NotificationManager.error("There is no open ticket(s) to merge!");
          } else {
            self.setState({
              mergingTicketsData: ticketList,
              tempMergingTicketsList: ticketList,
              searchticketmodal: true,
              loadingTickets: false,
              //tabCount: 1
            });
          }
        }
        else {
          self.setState({ loadingTickets: false });
        }
      })
      .catch((data) => {
        console.log(data);
        self.setState({ loadingTickets: false });
      });
  }
  HandleTicketListModalClose() {
    this.setState({ searchticketmodal: false, tabCount: 1, txtSearchTicket: "" });
  }
  handleGetSearchMergingTicket = (e) => {
    let self = this;
    self.setState({
      loadingTickets: true,
    });
    const customerTickets = self.state.tempMergingTicketsList;
    const searchText = e.target.value;
    if (searchText.length > 0) {
      var filterData = customerTickets.filter((x) => x.ticketId.toString().includes(searchText) || x.ticketTitle.includes(searchText));
      self.setState({
        mergingTicketsData: filterData,
        loadingTickets: false
      });
    }
    else {
      self.setState({
        mergingTicketsData: customerTickets,
        loadingTickets: false
      });
    }
  }
  HandleTicketMergingNext(ticketId) {
    const selectedTicket = this.state.tempMergingTicketsList.filter((x) => x.ticketId == ticketId);
    this.setState({ selectedParentTicketDetails: selectedTicket[0], tabCount: 2 })
  }
  HandleTicketMergingBack() {
    this.setState({ tabCount: 1 })
  }
  HandleMergedTicketsModalOpen() {
    const ticketId = this.state.ticketDetailsData.ticketID;
    let self = this;
    axios({
      method: "get",
      url: config.apiUrl + "/Ticketing/GetAllChildTicketByTicketId",
      headers: authHeader(),
      params: {
        ParentTicketId: ticketId,
      },
    })
      .then(function (res) {
        let statusCode = res.status;
        if (statusCode === 200) {
          self.setState({
            mergedTicketsData: res.data.responseData,
            //tempMergingTicketsList: res.data.responseData,
            mergedticketmodal: true,
            loadingTickets: false
          });
        }
      })
      .catch((data) => {
        console.log(data);
        self.setState({ loadingTickets: false });
      });
  }
  HandleConfirmAndMerge() {
    const childTicketId = this.state.ticketDetailsData.ticketID;
    let self = this;
    self.setState({
      mergedLoader: true,
      disableButtonmerged: true
    })

    setTimeout(() => {
      axios({
        method: "post",
        url: config.apiUrl + "/Ticketing/InsertTicketMergeDetails",
        headers: authHeader(),
        data: {
          parentTicketId: this.state.selectedParentTicketDetails.ticketId,
          parentTicketNote: "Ticket ID #" + childTicketId + " was closed and merged into this ticket",
          ChildTicketId: childTicketId,
          ChildTicketNote: "This request was closed and merged into Ticket ID #" + this.state.selectedParentTicketDetails.ticketId + " [" + this.state.selectedParentTicketDetails.ticketTitle + "]",
          IsCopyRecepientInParentTicket: this.state.isCopyRecepient,
          IsAutoReply: this.state.isAutoReply,
          IsMergeChildTicketMessage: this.state.isCopyContent,
        },
      })
        .then(function (res) {
          let statusMessage = res.data.message;
          if (statusMessage === "Success") {
            NotificationManager.success(
              "Ticket merged successfully."
            );
            self.setState({
              searchticketmodal: false,
              tabCount: 1,
              mergedLoader: false,
              disableButtonmerged: false
            });
            window.location.reload();
          }
        })
        .catch((data) => {
          console.log(data);
          self.setState({
            mergedLoader: false
          })
        });

    }, 1000)

  }
  HandleMergedTicketsModalClose() {
    this.setState({ mergedticketmodal: false });
  }
  HandleProfileDetailOpen() {
    let programCode = window.localStorage.getItem("Programcode");
    if (this.state.isVCWApplicable) {
      axios({
        method: "post",
        // url: config.apiUrl + "/Lpass/GetvcwProfileURL",
        url: config.apiUrl + "/Lpass/GetvcwProfileURLByBrandID",
        headers: authHeader(),
        data: {
          memberID: this.state.ticketDetailsData.customerPhoneNumber,
          countryCode: this.state.countryCode,
          storeCode: this.state.selectetedParameters?.storeCode,
          programCode: programCode,
          brandID: (this.state.selectetedParameters?.brandID).toString(),
        },
      }).then(function (res) {
        if (res.data.returnCode === 0 && res.data.returnMessage === "Success") {
          window.open(res.data?.widgetURL);
        } else {
          NotificationManager.error(
            "There is a technical error! Please retry again."
          );
        }
      });
    } else {
      this.setState({ profiledetail: true, profilemodal: false });
      let self = this;
      axios({
        method: "post",
        url: config.apiUrl + "/Lpass/CustomerDetails",
        headers: authHeader(),
        params: {
          MobileNumber:
            this.state.ticketDetailsData.customerPhoneNumber.length ===
              parseInt(this.state.mobileNoLength) &&
              this.state.ticketDetailsData.customerPhoneNumber.startsWith(
                this.state.countryCode
              )
              ? this.state.ticketDetailsData.customerPhoneNumber.slice(
                this.state.countryCode.length,
                parseInt(this.state.mobileNoLength)
              )
              : this.state.ticketDetailsData.customerPhoneNumber,
        },
      })
        .then(function (res) {
          // let status = res.data.message;
          let data = res.data.responseData.memberResponse;
          console.log("datadatadata3573", data)
          let statuscode = res.data.statusCode;
          if (statuscode === 200) {
            self.setState({
              profiledetailData: data,
              profiledetailinfoData: {
                firstName: data.firstName,
                lastName: data.lastName,
                email: data.email,
                mobile: data.mobile,
                accrualPoints: data.accrualPoints,
                currentTier: data.currentTier,
                totalPointsRedeemed: data.totalPointsRedeemed,
                totalSpends: data.totalSpends,
                customerType: data.customerType,
                totalPointsAccrued: data.totalPointsAccrued,
                referralCode: data.referralCode,
                gender: data.gender,
                dateOfBirth: data.dateOfBirth,
              },
            });
          } else {
            self.setState({
              profiledetailData: [],
              profiledetailinfoData: [],
              profiledetailserror: res.data.message,
            });
          }
        })
        .catch((error) => console.log(error));
    }
  }
  handleRadioChange = (e) => {
    let val = e.target.value;
    //console.log("val",val)
    this.setState({
      programselect: val,
    });
  };
  handleProfileViewDrop = () => {
    // let val = e.target.value
    //console.log("vall",val)
    if (this.state.isVCWApplicable) {
      axios({
        method: "post",
        url: config.apiUrl + "/Lpass/GetvcwProfileURL",
        headers: authHeader(),
        data: {
          memberID: this.state.ticketDetailsData.customerPhoneNumber,
          countryCode: this.state.countryCode,
          storeCode: this.state.selectetedParameters?.storeCode,
          programCode: this.state.programselect,
        },
      }).then(function (res) {
        if (res.data.returnCode === 0 && res.data.returnMessage === "Success") {
          window.open(res.data?.widgetURL);
        } else {
          NotificationManager.error(
            "There is a technical error! Please retry again."
          );
        }
      });
    } else {
      this.setState({ profiledetail: true, profilemodal: false });
      let self = this;
      axios({
        method: "post",
        url: config.apiUrl + "/Lpass/CustomerDetails",
        headers: authHeader(),
        params: {
          MobileNumber:
            this.state.ticketDetailsData.customerPhoneNumber.length ===
              parseInt(this.state.mobileNoLength) &&
              this.state.ticketDetailsData.customerPhoneNumber.startsWith(
                this.state.countryCode
              )
              ? this.state.ticketDetailsData.customerPhoneNumber.slice(
                this.state.countryCode.length,
                parseInt(this.state.mobileNoLength)
              )
              : this.state.ticketDetailsData.customerPhoneNumber,
        },
      })
        .then(function (res) {
          // let status = res.data.message;
          let data = res.data.responseData.memberResponse;
          let statuscode = res.data.statusCode;
          if (statuscode === 200) {
            self.setState({
              profiledetailData: data,
              profiledetailinfoData: {
                firstName: data.firstName,
                lastName: data.lastName,
                email: data.email,
                mobile: data.mobile,
                accrualPoints: data.accrualPoints,
                currentTier: data.currentTier,
                totalPointsRedeemed: data.totalPointsRedeemed,
                totalSpends: data.totalSpends,
                customerType: data.customerType,
                totalPointsAccrued: data.totalPointsAccrued,
                referralCode: data.referralCode,
                gender: data.gender,
                dateOfBirth: data.dateOfBirth,
              },
            });
          } else {
            self.setState({
              profiledetailData: [],
              profiledetailinfoData: [],
              profiledetailserror: res.data.message,
            });
          }
        })
        .catch((error) => console.log(error));
    }
  };
  HandleProfileDetailClose() {
    this.setState({
      profiledetail: false,
      profilemodal: true,
      isEditProfiledetails: false,
    });
  }
  HandlelabelModalOpen() {
    this.handleAssignDataList();
    this.setState({ labelModal: true });
  }
  HandlelabelModalClose() {
    this.setState({ labelModal: false });
  }
  HandleEmailCollapseOpen() {
    this.setState((state) => ({ EmailCollapse: !state.EmailCollapse }));
    this.setState({
      isReplyAllClicked: false,
      mailFiled: { userCC: "" },
      ticketDetailsData: {
        ...this.state.ticketDetailsData,
        sendEmailID: "",
      },
      userCcCount: 0,
    });
    this.handleCKEditorStyle();
    this.handleGetInitailMailCC(this.state.ticket_Id);
  }
  handleReAssignCommentOpen(check) {
    const TranslationContext = this.state.translateLanguage.default;
    if (check === "assignCmd") {
      if (this.state.agentId > 0) {
        this.setState({
          ReAssignComment: !this.state.ReAssignComment,
        });
      } else {
        NotificationManager.error(
          TranslationContext !== undefined
            ? TranslationContext.ticketingDashboard.pleaseselectuser
            : "Please Select User."
        );
      }
    } else {
      this.setState({
        ReAssignComment: !this.state.ReAssignComment,
      });
    }
  }
  handleFreeTextCommentOpen(row) {
    if (row === "close") {
      this.setState({
        FreeTextComment: !this.state.FreeTextComment,
        ticketFreeTextcomment: "",
      });
    } else {
      this.setState({
        FreeTextComment: !this.state.FreeTextComment,
      });
    }
  }
  handleCommentCollapseOpen(Mail_Id) {
    this.setState((state) => ({
      CommentCollapse: !state.CommentCollapse,
      mailId: Mail_Id,
    }));
  }
  handleCommentCollapseClose() {
    this.setState({ CommentCollapse: false, ticketcommentMSG: "" });
  }
  hanldeCommentOpen2(Mail_Id) {
    this.setState({ CommentCollapse2: true, mailId: Mail_Id });
  }
  hanldeCommentClose2() {
    this.setState({
      CommentCollapse2: false,
      //mailFiled: { userCC: "" },
      //isSendingReplyAllEmail: false,
      ticketDetailsData: {
        ...this.state.ticketDetailsData,
        sendEmailID: "",
      },
      isReplyAllClicked: false,
      userCcCount: 0,
    });
  }
  handleCommentCollapseOpen2() {
    this.setState((state) => ({ CommentCollapse2: !state.CommentCollapse2 }));
    this.handleCommentCollapseClose();
  }
  HandleComment1CollapseOpen() {
    this.setState((state) => ({ Comment1Collapse: !state.Comment1Collapse }));
  }

  handleBillImgModalOpen() {
    this.handleGetOrderDetails();
    this.setState({ BillInvoiceModal: true });
  }
  handleBillImgModalClose() {
    this.setState({ BillInvoiceModal: !this.state.BillInvoiceModal });
  }
  handleThumbModalOpen() {
    this.setState({ Plus: true });
  }
  handleThumbModalOpenReply() {
    this.setState({ replyAttachedFiles: true });
  }
  handleThumbModalOpenForward() {
    this.setState({ forwardAttachedFiles: true });
  }
  handleAttachedFileOpen = () => {
    this.setState({ isAttachedFileModal: true });
  };
  handleAttachedFileClose = () => {
    this.setState({ isAttachedFileModal: false });
  };
  handleThumbModalClose() {
    this.setState({ Plus: false });
  }
  handleThumbModalCloseReply() {
    this.setState({ replyAttachedFiles: false });
  }
  handleThumbModalCloseForward() {
    this.setState({
      forwardAttachedFiles: false,
    });
  }
  handleHasAttachmetModalOpen(msgID) {
    var filedata = this.state.FileAttachment.filter((x) => x.id === msgID);
    this.setState({ hasAttachmentModal: true, FinalAttachmentData: filedata });
  }
  handleHasAttachmetModalClose() {
    this.setState({ hasAttachmentModal: false });
  }
  handleSubmitForm(e) {
    e.preventDefault();
  }
  showInformStoreFuncation = () => {
    this.setState({
      InformStore: !this.state.InformStore,
    });
  };
  showInformStoreReply = () => {
    this.setState({
      ReplyInformStore: !this.state.ReplyInformStore,
    });
  };
  showInformStoreForward = () => {
    this.setState({
      ForwardInformStore: !this.state.ForwardInformStore,
    });
  };
  handleGetTabsName(e) {
    let self = this;
    let CurrentActive = e.target.name;
    if (CurrentActive === "Task") {
      this.setState({
        TaskTab: 1,
        NotesTab: 0,
        ClaimTab: 0,
      });
    } else if (CurrentActive === "Notes") {
      this.handleGetNotesTabDetails(this.state.ticket_Id);
      this.setState({
        TaskTab: 0,
        NotesTab: 3,
        ClaimTab: 0,
      });
    } else if (CurrentActive === "Claim") {
      this.setState({
        TaskTab: 0,
        NotesTab: 0,
        ClaimTab: 2,
      });
    } else if (CurrentActive === "Appointment") {
      this.setState({
        TaskTab: 0,
        NotesTab: 0,
        ClaimTab: 0,
        AppointmentTab: 0,
      });
    }
    setTimeout(function () {
      self.props.history.push({
        state: self.state,
      });
    }, 100);
  }
  handleNoteAddComments() {
    const TranslationContext = this.state.translateLanguage.default;

    if (this.state.NoteAddComment.length > 0) {
      let self = this;

      axios({
        method: "post",
        url: config.apiUrl + "/Task/AddComment",
        headers: authHeader(),
        params: {
          CommentForId: this.state.NotesTab,
          Comment: this.state.NoteAddComment.trim(),
          Id: this.state.ticket_Id,
        },
      })
        .then(function (res) {
          let status = res.data.status;
          if (status === true) {
            var id = self.state.ticket_Id;
            self.handleGetNotesTabDetails(id);
            NotificationManager.success(
              TranslationContext !== undefined
                ? TranslationContext.alertmessage.commentaddedsuccessfully
                : "Comment added successfully."
            );
            self.setState({
              NoteAddComment: "",
              notesCommentCompulsion: "",
            });
          } else {
            NotificationManager.error(
              TranslationContext !== undefined
                ? TranslationContext.alertmessage.commentnotadded
                : "Comment not added."
            );
          }
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      this.setState({
        notesCommentCompulsion:
          TranslationContext !== undefined
            ? TranslationContext.alertmessage.thenotesfieldiscompulsory
            : "The Notes field is compulsory.",
      });
    }
  }
  handleGetHistoricalData() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/gettickethistory",
      headers: authHeader(),
      params: {
        TicketId: self.state.ticket_Id,
      },
    })
      .then(function (res) {
        let status = res.data.status;
        let details = res.data.responseData;

        if (status === true) {
          self.setState({ historicalDetails: details });
        }
        self.onOpenModal();
      })
      .catch((data) => {
        console.log(data);
      });
  }

  hanldeGetSelectedStoreData(ticketID, isStart) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Store/getSelectedStores",
      headers: authHeader(),
      params: {
        TicketID: ticketID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        // console.log("data", data)
        if (status === "Success") {
          const newSelected = Object.assign({}, self.state.CheckStoreID);
          var selectedRow = [];
          var Storedetails = "";
          for (let i = 0; i < data.length; i++) {
            if (data[i].storeID) {
              if (isStart) {
                newSelected[data[i].storeID] = !self.state.CheckStoreID[
                  data[i].storeID
                ];
              } else {
                newSelected[data[i].storeID] =
                  self.state.CheckStoreID[data[i].storeID];
              }
              selectedRow.push(data[i]);
              self.setState({
                CheckStoreID: data[i].storeID ? newSelected : false,
              });
              Storedetails += data[i].storeName + ",";
            }
          }
          Storedetails = Storedetails.substring(",", Storedetails.length - 1);
          self.setState({
            StoreName: Storedetails,
            selectedStoreData: selectedRow,
            //selectedStore: data,
            storeDetails: data
          });
        } else {
          self.setState({
            selectedStore: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleAttachStoreData() {
    const TranslationContext = this.state.translateLanguage.default;
    let self = this;
    var selectedStore = "";

    var PurposeID = this.state.selectedStoreData["Purpose_Id"];

    if (PurposeID === "0") {
      // Send Id as 1 and 2 from API
      PurposeID = 1;
    } else {
      PurposeID = 2;
    }
    var visitDate = "";
    if (
      this.state.selectedStoreData["storeVisitDate"] === null ||
      this.state.selectedStoreData["storeVisitDate"] === undefined ||
      this.state.selectedStoreData["storeVisitDate"] === ""
    ) {
      visitDate = "";
    } else {
      visitDate = moment(this.state.selectedStoreData["storeVisitDate"]).format(
        "YYYY-MM-DD"
      );
    }

    selectedStore +=
      this.state.selectedStoreData["storeID"] +
      "|" +
      visitDate +
      "|" +
      PurposeID +
      ",";

    const formData = new FormData();

    //// -------------------Store attachment Code start---------------
    var store_Details = [];

    var storeData = {};

    ///check purpose id
    //var PurposeID = this.state.selectedStoreData["Purpose_Id"];

    // if (PurposeID === "0") {
    //   // Send Purpose Id as 1 and 2 from API
    //   PurposeID = 1;
    // } else {
    //   PurposeID = 2;
    // }

    var visitDate = "";
    if (
      this.state.selectedStoreData["storeVisitDate"] === null ||
      this.state.selectedStoreData["storeVisitDate"] === undefined ||
      this.state.selectedStoreData["storeVisitDate"] === ""
    ) {
      visitDate = "";
    } else {
      visitDate = moment(this.state.selectedStoreData["storeVisitDate"]).format(
        "YYYY-MM-DD"
      );
    }

    storeData["StoreID"] = this.state.selectedStoreData["storeID"];
    storeData["BrandID"] = this.state.selectedStoreData["brandID"];
    storeData["CityID"] = this.state.selectedStoreData["cityID"];
    storeData["StateID"] = this.state.selectedStoreData["stateID"];
    storeData["PincodeID"] = this.state.selectedStoreData["pincodeID"];
    storeData["StoreName"] = this.state.selectedStoreData["storeName"];
    storeData["Address"] = this.state.selectedStoreData["address"];
    storeData["StoreCode"] = this.state.selectedStoreData["storeCode"];
    storeData["RegionID"] = this.state.selectedStoreData["regionID"];
    storeData["ZoneID"] = this.state.selectedStoreData["zoneID"];
    storeData["StoreTypeID"] = this.state.selectedStoreData["storeTypeID"];
    storeData["StoreEmailID"] = this.state.selectedStoreData["storeEmailID"];
    storeData["StorePhoneNo"] = this.state.selectedStoreData["storePhoneNo"];
    storeData["StoreVisitDate"] = visitDate;
    storeData["Purpose"] = PurposeID;
    storeData["Pincode"] = this.state.selectedStoreData["pincode"];
    storeData["BrandIDs"] = this.state.selectetedParameters.brandID;

    store_Details.push(storeData);

    //// -------------------Store attachment Code end-----------------
    formData.append("storeDetails", JSON.stringify(store_Details));
    formData.append(
      "StoreId",
      selectedStore.substring(",", selectedStore.length - 1)
    );
    formData.append("TicketId", this.state.ticket_Id);
    // var slectedStore=[]
    // slectedStore.push(this.state.selectedStoreData)

    axios({
      method: "post",
      url: config.apiUrl + "/Store/attachstore",
      headers: authHeader(),
      data: formData,
    })
      .then(function (res) {
        let status = res.data.message;
        if (status === "Success") {
          NotificationManager.success(
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.storeattachedsuccessfully
              : "Store attached successfully."
          );
          self.HandleStoreModalClose();
          // self.handleGetTicketDetails(self.state.ticket_Id);
          self.setState(
            {
              storeDetails: [],
              // CheckStoreID: {}
            },
            () => {
              self.hanldeGetSelectedStoreData(self.state.ticket_Id, false);
            }
          );
        } else {
          NotificationManager.error(
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.storenotattached
              : "Store not attached."
          );
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleAttacheProduct() {
    //commentedcode
    if (!this.state.orderDetailsData.length) {
      NotificationManager.error("Please add atleast one Order");
    } else if (this.state.SelectedAllOrder.length <= 0) {
      NotificationManager.error("Please select atleast one order.");
    } else {
      // bata flow unknow only
      if (window.localStorage.getItem("Programcode") === "bataclub") {
        this.handleAttachProductData();
      }
      else {
        let self = this;
        if (self.state.masterConfigrationUnknown.isUnknown) {
          self.setState({
            isAttachProduct: !self.state.isAttachProduct,
          });
        } else {
          this.handleAttachProductData();
        }

      }

    }
    // if (!this.state.orderDetailsData.length) {
    //   NotificationManager.error("Please add atleast one Order")
    // } else if (this.state.SelectedAllOrder.length <= 0) {
    //   NotificationManager.error("Please select atleast one order.")
    // } else {
    //   let self = this;
    //   self.setState({
    //     isAttachProduct: !self.state.isAttachProduct
    //   })
    // }
  };
  handleAttachProductData() {
    const TranslationContext = this.state.translateLanguage.default;
    let self = this;
    if (
      this.state.SelectedAllOrder.length > 0 &&
      (this.state.masterConfigrationUnknown.isUnknown
        ? true
        : this.state.SelectedAllItem?.length > 0)
    ) {
      // if (this.state.SelectedAllOrder.length > 0 ) {
      for (let k = 0; k < this.state.SelectedAllOrder.length; k++) {
        if (this.state.SelectedAllOrder[k].orderItems) {
          for (
            let i = 0;
            i < this.state.SelectedAllOrder[k].orderItems.length;
            i++
          ) {
            if (
              this.state.SelectedAllOrder[k].orderItems[i].orderItemID !== 0
            ) {
              var selectedRow = "";
              for (
                let i = 0;
                i < this.state.SelectedAllOrder[k].orderItems.length;
                i++
              ) {
                selectedRow +=
                  this.state.SelectedAllOrder[k].orderItems[i]["orderItemID"] +
                  "|" +
                  this.state.SelectedAllOrder[k].orderItems[i]["requireSize"] +
                  "|0,";
              }
            }
          }
        } else {
          var selectedRow = "";
          if (this.state.SelectedAllOrder.length > 1) {
            if (this.state.SelectedAllItem.length === 0) {
              for (let j = 0; j < this.state.SelectedAllOrder.length; j++) {
                selectedRow +=
                  this.state.SelectedAllOrder[j]["orderMasterID"] + "|0|1,";
              }
            } else {
              for (let i = 0; i < this.state.SelectedAllItem.length; i++) {
                selectedRow +=
                  this.state.SelectedAllItem[i]["orderItemID"] +
                  "|" +
                  this.state.SelectedAllItem[i]["requireSize"] +
                  "|0,";
              }
            }
          } else {
            if (this.state.SelectedAllItem.length === 0) {
              for (let j = 0; j < this.state.SelectedAllOrder.length; j++) {
                selectedRow +=
                  this.state.SelectedAllOrder[j]["orderMasterID"] + "|0|1,";
              }
            } else {
              for (let i = 0; i < this.state.SelectedAllItem.length; i++) {
                selectedRow +=
                  this.state.SelectedAllItem[i]["orderItemID"] +
                  "|" +
                  this.state.SelectedAllItem[i]["requireSize"] +
                  "|0,";
              }
            }
          }
        }
      }

      const formData = new FormData();

      /// For Attached order
      var OrderData = [];
      if (this.state.SelectedAllOrder.length > 0) {
        var order_data = this.state.SelectedAllOrder;
        for (let i = 0; i < order_data.length; i++) {
          let obj = {
            OrderMasterID: order_data[i].orderMasterID,
            OrderNumber: order_data[i].invoiceNumber,
            InvoiceDate: order_data[i].invoiceDate,
            OrderPrice: order_data[i].ordeItemPrice,
            PricePaid: order_data[i].orderPricePaid,
            CustomerID: this.state.custID,
            Discount: order_data[i].discount,
            StoreCode: order_data[i].storeCode,
            TransactionDate: order_data[i].invoiceDate,
            ModeOfPaymentID: 1,
            TicketSourceID: this.state.selectetedParameters.channelOfPurchaseID,
          };
          OrderData.push(obj);
        }

        // var OrderData = [
        //   {
        //     OrderMasterID: order_data.orderMasterID,
        //     OrderNumber: order_data.invoiceNumber,
        //     InvoiceDate: order_data.invoiceDate,
        //     OrderPrice: order_data.ordeItemPrice,
        //     PricePaid: order_data.orderPricePaid,
        //     CustomerID: this.state.custID,
        //     Discount: order_data.discount,
        //     StoreCode: order_data.storeCode,
        //     TransactionDate: order_data.invoiceDate,
        //     ModeOfPaymentID: 1,
        //     TicketSourceID: this.state.selectetedParameters.channelOfPurchaseID,
        //   },
        // ];
      } else {
        OrderData = null;
      }

      /// For Attached OrderItem data
      var order_itemData = [];
      if (this.state.masterConfigrationUnknown.isUnknown) {
        console.log(arrOrderItemData);
        var arrOrderItemData = this.state.attchData;
        console.log(arrOrderItemData);
        for (let i = 0; i < arrOrderItemData.length; i++) {
          var item_data = {};
          // item_data["OrderItemID"] = arrOrderItemData[i]["superCategoryId"];
          //item_data["OrderItemID"] = parseInt(arrOrderItemData[i]?.orderItemID);
          item_data["OrderItemID"] = 0;
          // item_data["OrderMasterID"] = arrOrderItemData[i]["invoiceNO"];
          item_data[
            "OrderMasterID"
          ] = this.state.SelectedAllOrder[0].orderMasterID;
          item_data["itemName"] = arrOrderItemData[i]["itemName"];
          item_data["invoiceNumber"] = arrOrderItemData[i]["invoiceNumber"];
          item_data["superProductCategoryId"] =
            arrOrderItemData[i]["superProductCategoryId"];
          item_data["productNameId"] = arrOrderItemData[i]["productNameId"];
          item_data["productCodeId"] = arrOrderItemData[i]["productCodeId"];
          item_data["isCheck"] = true;
          item_data["invoiceDate"] = arrOrderItemData[i]["invoiceDate"];
          item_data["itemCount"] = arrOrderItemData[i]["itemCount"];
          item_data["itemPrice"] = arrOrderItemData[i]["itemPrice"];
          item_data["pricePaid"] = arrOrderItemData[i]["pricePaid"];
          item_data["size"] = arrOrderItemData[i]["size"];
          item_data["requireSize"] = arrOrderItemData[i]["requireSize"];
          item_data["discount"] = arrOrderItemData[i]["discount"];
          item_data["articleNumber"] = arrOrderItemData[i]["articleNumber"];
          item_data["articleName"] = arrOrderItemData[i]["articleName"];
          // item_data["superCategory"] = arrOrderItemData[i]["superCategory"];
          item_data["superCategoryId"] = arrOrderItemData[i]["superCategoryId"];
          //item_data["productDetail"] = arrOrderItemData[i]["productDetail"];
          order_itemData.push(item_data);
        }
      } else {
        for (let i = 0; i < this.state.SelectedAllItem.length; i++) {
          var item_data = {};
          item_data["OrderItemID"] = this.state.SelectedAllItem[i][
            "orderItemID"
          ];
          item_data["OrderMasterID"] = this.state.SelectedAllItem[i][
            "orderMasterID"
          ];
          item_data["ItemName"] = this.state.SelectedAllItem[i]["itemName"];
          item_data["InvoiceNumber"] = this.state.SelectedAllItem[i][
            "invoiceNumber"
          ];
          item_data["InvoiceDate"] = this.state.SelectedAllItem[i][
            "invoiceDate"
          ];
          item_data["ItemCount"] = this.state.SelectedAllItem[i]["itemCount"];
          item_data["ItemPrice"] = this.state.SelectedAllItem[i]["itemPrice"];
          item_data["PricePaid"] = this.state.SelectedAllItem[i]["pricePaid"];
          item_data["Size"] = this.state.SelectedAllItem[i]["size"];
          item_data["RequireSize"] = this.state.SelectedAllItem[i][
            "requireSize"
          ];
          item_data["Discount"] = this.state.SelectedAllItem[i]["discount"];
          item_data["ArticleNumber"] = this.state.SelectedAllItem[i][
            "articleNumber"
          ];
          item_data["ArticleName"] = this.state.SelectedAllItem[i]["itemName"];
          item_data["isCheck"] = true;

          order_itemData.push(item_data);
        }
      }

      let finalOrderData = { orderMaster: OrderData };
      let orderIds = "";
      for (let i = 0; i < this.state.SelectedAllOrder.length; i++) {
        orderIds += this.state.SelectedAllOrder[i].orderMasterID + ",";
      }

      formData.append("orderDetails", JSON.stringify(finalOrderData));
      formData.append("orderItemDetails", JSON.stringify(self.state.NewUnknown ? this.state.newUnknowitemarr : order_itemData));
      formData.append(
        "OrderID",
        // selectedRow.substring(",", selectedRow.length - 1)
        self.state.NewUnknown ? 0 : orderIds
      );
      formData.append("TicketId", this.state.ticket_Id);
      axios({
        method: "post",
        url: config.apiUrl + "/Order/attachorder",
        headers: authHeader(),
        data: formData,
      })
        .then(function (res) {
          let status = res.data.message;
          if (status === "Success") {
            NotificationManager.success(
              TranslationContext !== undefined
                ? TranslationContext.ticketingDashboard
                  .productattachedsuccessfully
                : "Product attached successfully."
            );
            self.handleOrderTableClose();
            self.handleGetProductData();
            // self.handleGetTicketDetails(self.state.ticket_Id);
            self.setState({
              SelectedAllOrder: [],
              orderDetailsData: [],
              CheckBoxAllItem: {},
              //newunknow state reset
              NewUnknown: false,
              attchData: [],
              OrderInvoiceAttach: order_data[0].invoiceNumber,
              hidebtnAdd: false

            });
          } else {
            NotificationManager.error(
              TranslationContext !== undefined
                ? TranslationContext.ticketingDashboard.productnotattached
                : "Product not attached."
            );
          }
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      NotificationManager.error(
        TranslationContext !== undefined
          ? TranslationContext.ticketingDashboard.pleaseselectatleastoneorder
          : "Please select atleast one order."
      );
    }
  }
  handleunknownorderitem = () => {

  }
  handleGetNotesTabDetails(ticket_Id) {
    let self = this;

    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getNotesByTicketId",
      headers: authHeader(),
      params: {
        TicketId: ticket_Id,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let details = res.data.responseData;
        if (status === "Success") {
          self.setState({ Notesdetails: details });
        } else {
          self.setState({ Notesdetails: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleGetAppointmentList(ticket_Id) {
    let self = this;

    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getAppointmentListByTicketId",
      headers: authHeader(),
      params: {
        TicketId: ticket_Id,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let details = res.data.responseData;
        if (status === "Success") {
          self.setState({ appointmentList: details });
        } else {
          self.setState({ appointmentList: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleAddNewForm() {
    this.setState((prevState) => ({
      values: [
        ...prevState.values,
        {
          taskTitle: "",
          taskDescription: "",
          department: "",
          type: "",
          assign: "",
        },
      ],
    }));
  }

  setTicketActionTypeValue = (e) => {
    this.setState({ selectedTicketActionType: e });
  };

  handleCheckStoreID(storeMasterID, rowData) {
    let newSelected = Object.assign({}, this.state.CheckStoreID);
    newSelected[storeMasterID] = !this.state.CheckStoreID[storeMasterID];
    this.setState({
      // CheckStoreID: storeMasterID ? newSelected : false,
      CheckStoreID: storeMasterID,
    });
    var selectedRow = rowData;
    rowData["Purpose_Id"] = this.state.CustStoreStatusDrop;
    // if (this.state.selectedStoreData.length === 0) {
    //   selectedRow.push(rowData);
    //   this.setState({
    //     selectedStoreData: rowData,
    //   });
    // } else {
    //   if (newSelected[storeMasterID] === true) {
    //     for (var i = 0; i < this.state.selectedStoreData.length; i++) {
    //       if (this.state.selectedStoreData[i] === rowData) {
    //         selectedRow.splice(i, 1);

    //         break;
    //       } else {
    //         selectedRow = this.state.selectedStoreData;
    //         selectedRow.push(rowData);
    //         break;
    //       }
    //     }
    //   } else {
    //     for (var j = 0; j < this.state.selectedStoreData.length; j++) {
    //       selectedRow = this.state.selectedStoreData;
    //       if (this.state.selectedStoreData[j]?.storeID === rowData?.storeID) {
    //         selectedRow.splice(j, 1);
    //         break;
    //       }
    //     }
    //   }
    // }

    this.setState({
      selectedStoreData: rowData,
    });
  }
  // handleCheckStoreRadioID(storeMasterID, rowData) {
  //   let newSelected = Object.assign({}, this.state.CheckStoreID);
  //   newSelected[storeMasterID] = !this.state.CheckStoreID[storeMasterID];
  //   this.setState({
  //     CheckStoreID: storeMasterID
  //   });
  //   var selectedRow = rowData;
  //   rowData["Purpose_Id"] = this.state.CustStoreStatusDrop;
  //   // if (this.state.selectedStoreData.length === 0) {
  //   //   selectedRow.push(rowData);
  //   //   this.setState({
  //   //     selectedStoreData: rowData,
  //   //   });
  //   // } else {
  //   //   if (newSelected[storeMasterID] === true) {
  //   //     for (var i = 0; i < this.state.selectedStoreData.length; i++) {
  //   //       if (this.state.selectedStoreData[i] === rowData) {
  //   //         selectedRow.splice(i, 1);

  //   //         break;
  //   //       } else {
  //   //         selectedRow = this.state.selectedStoreData;
  //   //         selectedRow.push(rowData);
  //   //         break;
  //   //       }
  //   //     }
  //   //   } else {
  //   //     for (var j = 0; j < this.state.selectedStoreData.length; j++) {
  //   //       selectedRow = this.state.selectedStoreData;
  //   //       if (this.state.selectedStoreData[j]?.storeID === rowData?.storeID) {
  //   //         selectedRow.splice(j, 1);
  //   //         break;
  //   //       }
  //   //     }
  //   //   }
  //   // }

  //   this.setState({
  //     selectedStoreDataBloom: selectedRow,
  //   });
  // }
  //KB Templete Pop up Search API
  handleKbLinkPopupSearch() {
    const TranslationContext = this.state.translateLanguage.default;
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/KnowledgeBase/searchbycategory",
      headers: authHeader(),
      params: {
        Type_ID: self.state.selectedIssueTypeKB,
        Category_ID: self.state.selectedCategoryKB,
        SubCategor_ID: self.state.selectedSubCategoryKB,
      },
    })
      .then(function (res) {
        let KbPopupData = res.data.responseData;
        if (KbPopupData.length === 0 || KbPopupData === null) {
          NotificationManager.error(
            TranslationContext !== undefined
              ? TranslationContext.label.norecordfound
              : "No Record Found."
          );
        }
        self.setState({ KbPopupData: KbPopupData });
      })
      .catch((data) => {
        console.log(data);
      });
  }

  //Close funcation for KB Templete Search Modal
  HandleKbLinkModalClose() {
    this.setState({
      KbLink: false,
      selectedIssueTypeKB: 0,
      selectedCategoryKB: 0,
      selectedSubCategoryKB: 0,
      KbPopupData: [],
    });
  }
  //Category change funcation in KB Templete Modal
  setCategoryValueKB = (e) => {
    let categoryValue = e.currentTarget.value;
    this.setState({ selectedCategoryKB: categoryValue });
    setTimeout(() => {
      if (this.state.selectedCategoryKB) {
        this.handleGetSubCategoryList();
      }
    }, 1);
  };

  //Sub-Category change funcation in KB Templete Modal
  setSubCategoryValueKB = (e) => {
    let subCategoryValue = e.currentTarget.value;
    this.setState({ selectedSubCategoryKB: subCategoryValue });

    setTimeout(() => {
      if (this.state.selectedSubCategoryKB) {
        this.handleGetIssueTypeList();
      }
    }, 1);
  };

  //Issue-Type change funcation in KB Templete Modal
  setIssueTypeValueKB = (e) => {
    let issueTypeValue = e.currentTarget.value;
    this.setState({ selectedIssueTypeKB: issueTypeValue });
  };

  //Template Bind By IssueType funcation
  handleTemplateBindByIssueType = () => {
    let self = this;
    if (this.state.isToggle === false) {
      let parameter =
        window.localStorage.getItem("Programcode") === "campusshoes"
          ? {
            categoryId: self.state.selectetedParameters.categoryID,
            subCategoryId: self.state.selectetedParameters.subCategoryID,
            subSubCategoryId:
              self.state.selectetedParameters.subSubCategoryID,
            issueTypeId: self.state.selectetedParameters.issueTypeID,
            sourceName: this.state.sourceName,
            Brands: self.state.selectetedParameters.brandID
          }
          : {
            categoryId: 0,
            subCategoryId: 0,
            subSubCategoryId: 0,
            issueTypeId: self.state.selectetedParameters.issueTypeID,
            sourceName: this.state.sourceName,
            Brands: self.state.selectetedParameters.brandID
          };
      axios({
        method: "post",
        url: config.apiUrl + "/Template/getListOfTemplateForMessageByBrand",
        headers: authHeader(),
        params: parameter,
        //  {
        //   // IssueTypeID: self.state.selectetedParameters.issueTypeID,
        // },
      })
        .then(function (res) {
          // if (res.data.statusCode === 200) {
          let data = res.data.responseData;
          self.setState({
            CkEditorTemplateData: data,
            filtertemplateArr: data,
            ReplyCKEditoertemplat: data,
            filterTemplateArrReply: data,
            isToggle: true,
          });
          // }
        })
        .catch((data) => {
          console.log(data);
        });
    }
    // document.getElementById("showPlushEditor").classList.toggle('show')
    // axios({
    //   method: "post",
    //   url: config.apiUrl + "/Template/getListOfTemplateForNote",
    //   headers: authHeader(),
    //   params: {
    //     IssueTypeID: this.state.selectetedParameters.issueTypeID,
    //   },
    // })
    //   .then(function (res) {
    //     let data = res.data.responseData;
    //     self.setState({
    //       CkEditorTemplateData: data,
    //       ReplyCKEditoertemplat: data,
    //     });
    //   })
    //   .catch((data) => {
    //     console.log(data);
    //   });
  };
  //Search template
  handleTemplateSearch = (e) => {
    let val = e.target.value;
    const filterdata = this.state.CkEditorTemplateData.filter((x) =>
      x.templateName.toLowerCase().includes(val.toLowerCase())
    );
    if (val.length != 0) {
      this.setState({
        filtertemplateArr: filterdata,
      });
    } else {
      this.setState({
        filtertemplateArr: this.state.CkEditorTemplateData,
      });
    }

    console.log("filter", filterdata);
  };
  handleTemplateSearchReply = (e) => {
    let val = e.target.value;
    const filterdata = this.state.ReplyCKEditoertemplat.filter((x) =>
      x.templateName.toLowerCase().includes(val.toLowerCase())
    );
    if (val.length != 0) {
      this.setState({
        filterTemplateArrReply: filterdata,
      });
    } else {
      this.setState({
        filterTemplateArrReply: this.state.ReplyCKEditoertemplat,
      });
    }

    console.log("filter", filterdata);
  };

  //get Template data for select template funcation
  handleCkEditorTemplateData(tempId, tempName, row) {
    let self = this;

    if (row === 1) {
      axios({
        method: "post",
        url: config.apiUrl + "/Template/getTemplateContent",
        headers: authHeader(),
        params: {
          TemplateId: tempId,
        },
      })
        .then(function (res) {
          let TemplateDetails = res.data.responseData;
          let bodyData = res.data.responseData.templateBody;
          self.setState({
            CkEditorTemplateDetails: TemplateDetails,
            tempName: tempName,
            selectTicketTemplateId: tempId,
            // ForWardMailBodyData: bodyData,
            ForWardMailBodyData: bodyData + self.state.forwardMailBody,
            facebookreviewbody: bodyData
          });
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      axios({
        method: "post",
        url: config.apiUrl + "/Template/getTemplateContent",
        headers: authHeader(),
        params: {
          TemplateId: tempId,
        },
      })
        .then(function (res) {
          let TemplateDetails = res.data.responseData;
          let bodyData = res.data.responseData.templateBody;
          self.setState({
            CkEditorTemplateDetails: TemplateDetails,
            tempName: tempName,
            selectTicketTemplateId: tempId,
            mailBodyData: bodyData,
            facebookreviewbody: bodyData,
          });
        })
        .catch((data) => {
          console.log(data);
        });
    }
  }
  handleSendMailData(isSend) {
    const TranslationContext = this.state.translateLanguage.default;
    let self = this;

    if (isSend === "Calls") {
      self.setState({
        isSendingReplyEmail: true,
      });
      if (
        this.state.ticketDetailsData.toEmailId === null ||
        this.state.ticketDetailsData.toEmailId === ""
      ) {
        if (!this.state.ticketDetailsData.sendEmailID) {
          NotificationManager.error("Please Select Email Sender ID.");
          self.setState({
            isSendingReplyEmail: false,
          });
          return false;
        }
      }
      if (this.state.replymailBodyData.length > 0) {
        if (this.state.InformStore === true) {
          var selectedStore = "";

          for (let i = 0; i < this.state.selectedStoreData.length; i++) {
            selectedStore += this.state.selectedStoreData[i]["storeID"] + ",";
          }
        } else {
          selectedStore = "";
        }
        const formData = new FormData();
        var paramMessageData = {
          TicketID: this.state.ticket_Id,
          ToEmail: this.state.ticketDetailsData.customerEmailId,
          FromEmail:
            this.state.ticketDetailsData.toEmailId !== null
              ? this.state.ticketDetailsData.toEmailId !== ""
                ? this.state.ticketDetailsData.toEmailId
                : this.state.ticketDetailsData.sendEmailID
              : this.state.ticketDetailsData.sendEmailID,
          UserCC: this.state.mailFiled.userCC,
          UserBCC: this.state.mailFiled.userBCC,
          TikcketMailSubject: this.state.ticketDetailsData.ticketTitle,
          TicketMailBody: this.state.replymailBodyData,
          IsInformToStore: this.state.InformStore,
          TicketSource: this.state.ReplySourceId, // Send ticket source id
          IsSent: 0,
          IsCustomerComment: 0,
          IsResponseToCustomer: 1,
          IsInternalComment: 0,
          MailID: this.state.mailId,
          StoreID: selectedStore.substring(",", selectedStore.length - 1),
        };
        formData.append("ticketingMailerQue", JSON.stringify(paramMessageData));
        for (let j = 0; j < this.state.ReplyFileData.length; j++) {
          formData.append("Filedata", this.state.ReplyFileData[j]);
        }
        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageComment",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              // self.handleTicketAssignFollowUp();
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              self.hanldeCommentClose2();
              NotificationManager.success(
                TranslationContext !== undefined
                  ? TranslationContext.ticketingDashboard.mailsendsuccessfully
                  : "Mail send successfully."
              );
              self.state.ticketDetailsData["sendEmailID"] = "";
              self.setState({
                ticketDetailsData: self.state.ticketDetailsData,
                mailFiled: {},
                ReplyFileData: [],
                ReplyfileText: 0,
                replymailBodyData: "",
                isSendingReplyEmail: false,
                isSendingReplyAllEmail: false,
              });
              self.handleGetMailFooterData();
            } else {
              NotificationManager.error(status);
              self.setState({
                isSendingReplyEmail: false,
              });
            }
          })
          .catch((data) => {
            console.log(data);
            self.setState({
              isSendingReplyEmail: false,
            });
          });
      } else {
        NotificationManager.error(
          TranslationContext !== undefined
            ? TranslationContext.ticketingDashboard.pleaseenterbodysection
            : "Please Enter Body Section."
        );
        self.setState({
          isSendingReplyEmail: false,
        });
      }
    } else if (isSend === "Mails") {
      // -------------Plush Icen Editor Call api--------------------
      // if (
      //   this.state.mailBodyData.length > 0 &&
      //   this.state.mailBodyData.length <= 1999
      // ) {
      setTimeout(() => {
        self.setState({
          isSendingEmail: true,
        });
      }, 100);

      if (this.state.mailBodyData.length > 0) {
        if (
          this.state.ticketDetailsData.toEmailId === null ||
          this.state.ticketDetailsData.toEmailId === ""
        ) {
          if (!this.state.ticketDetailsData.sendEmailID) {
            NotificationManager.error("Please Select Email Sender ID.");
            setTimeout(() => {
              self.setState({
                isSendingEmail: false,
              });
            }, 100);
            return false;
          }
        }

        if (this.state.ReplyInformStore === true) {
          var store_Id = "";

          for (let i = 0; i < this.state.selectedStoreData.length; i++) {
            store_Id += this.state.selectedStoreData[i]["storeID"] + ",";
          }
        } else {
          store_Id = "";
        }
        const formData = new FormData();
        var paramData2 = {
          TicketID: this.state.ticket_Id,
          ToEmail:
            window.localStorage.getItem("Programcode") === "bloombay" ||
              window.localStorage.getItem("Programcode") === "belgianwaffles"
              ? this.state.toEmailId
              : this.state.ticketDetailsData.customerEmailId,
          // ToEmail: this.state.ticketDetailsData.sendEmailID,
          UserCC: this.state.mailFiled.userCC,
          UserBCC: this.state.mailFiled.userBCC,
          TikcketMailSubject: this.state.ticketDetailsData.ticketTitle,
          TicketMailBody: this.state.mailBodyData,
          IsInformToStore: this.state.ReplyInformStore,
          TicketSource: this.state.ticketSourceId, // Send ticket source id
          IsSent: 0,
          IsCustomerComment: 0,
          IsResponseToCustomer: 1,
          MailID: 0,
          StoreID: store_Id.substring(",", store_Id.length - 1),
          FromEmail:
            this.state.ticketDetailsData.toEmailId !== null
              ? this.state.ticketDetailsData.toEmailId !== ""
                ? this.state.ticketDetailsData.toEmailId
                : this.state.ticketDetailsData.sendEmailID
              : this.state.ticketDetailsData.sendEmailID,
        };
        formData.append("ticketingMailerQue", JSON.stringify(paramData2));
        for (let j = 0; j < this.state.file.length; j++) {
          formData.append("Filedata", this.state.file[j].File);
        }

        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageComment",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              // self.handleGetTicketDetails(self.state.ticket_Id);
              self.handleProgressBarDetails(self.state.ticket_Id);
              // self.handleTicketAssignFollowUp();
              self.HandleEmailCollapseOpen();
              NotificationManager.success(
                TranslationContext !== undefined
                  ? TranslationContext.ticketingDashboard.mailsendsuccessfully
                  : "Mail send successfully."
              );
              self.setState({
                mailFiled: {},
                fileText: 0,
                mailBodyData: "",
                file: [],
                attachedFiles: [],
                FileData: [],
                FileAttachment: [],

                isSendingEmail: false,
                isSendingAllEmail: false,
              });
              self.handleGetMailFooterData();
            } else {
              NotificationManager.error(status);
              setTimeout(() => {
                self.setState({
                  isSendingEmail: false,
                });
              }, 100);
            }
          })
          .catch((data) => {
            console.log(data);
            setTimeout(() => {
              self.setState({
                isSendingEmail: false,
              });
            }, 100);
          });
      } else {
        NotificationManager.error(
          TranslationContext !== undefined
            ? TranslationContext.ticketingDashboard.pleaseenterbodysection
            : "Please Enter Body Section."
        );
        setTimeout(() => {
          self.setState({
            isSendingEmail: false,
          });
        }, 100);
      }
      // } else {
      //   NotificationManager.error(
      //     TranslationContext !== undefined
      //       ? TranslationContext.ticketingDashboard
      //           .onlycharaterallowinbodysection
      //       : "Only 2000 Charater Allow In Body Section."
      //   );
      //   self.setState({
      //     isSendingEmail: false,
      //   });
      // }
    } else if (isSend === "Facebook") {
      // ----------------IsCustomerCommet Comment modal Call api ------------------
      if (this.state.ticketcommentMSG.length > 0) {
        const formData = new FormData();
        var paramData3 = {
          TicketID: this.state.ticket_Id,
          TicketMailBody: this.state.ticketcommentMSG.trim(),
          IsSent: 1,
          IsCustomerComment: 0,
          IsInternalComment: 1,
          MailID: this.state.mailId,
        };
        console.log("this.state.ticketcommentMSG", this.state.ticketcommentMSG);
        formData.append("ticketingMailerQue", JSON.stringify(paramData3));

        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageComment",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              NotificationManager.success(
                TranslationContext !== undefined
                  ? TranslationContext.alertmessage.commentaddedsuccessfully
                  : "Comment Added successfully."
              );
              // self.handleTicketAssignFollowUp();
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              self.handleCommentCollapseOpen();
              self.setState({
                ticketcommentMSG: "",
                tckcmtMSGCompulsory: "",
              });
              self.setState({
                isSendingEmail: false,
              });
            } else {
              NotificationManager.error(status);
              self.setState({
                ticketcommentMSG: "",

                isSendingEmail: false,
              });
            }
          })
          .catch((data) => {
            console.log(data);
            self.setState({
              isSendingEmail: false,
            });
          });
      } else {
        this.setState({
          tckcmtMSGCompulsory:
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.commentfieldiscompulsory
              : "Comment field is compulsory.",

          isSendingEmail: false,
        });
      }
    } else if (isSend === "Twitter") {
      // ---------------API call for ReAssign To Ticket---------------------
      if (this.state.addReassignCmmt.length > 0) {
        const formData = new FormData();
        var paramData4 = {
          TicketID: this.state.ticket_Id,
          TicketMailBody: this.state.addReassignCmmt,
          IsSent: 1,
          IsCustomerComment: 0,
          IsInternalComment: 1,
          MailID: 0,
          OldAgentID: this.state.oldAgentId,
          NewAgentID: this.state.agentId,
        };
        formData.append("ticketingMailerQue", JSON.stringify(paramData4));

        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageComment",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              self.handleReAssignCommentOpen();
              self.handleAssignTickets();
              self.setState({
                addReassignCmmt: "",
                AssignCommentCompulsory: "",
              });
              self.setState({
                isSendingEmail: false,
              });
            } else {
              NotificationManager.error(status);
              self.setState({
                addReassignCmmt: "",

                isSendingEmail: false,
              });
            }
          })
          .catch((data) => {
            console.log(data);
            self.setState({
              isSendingEmail: false,
            });
          });
      } else {
        this.setState({
          AssignCommentCompulsory:
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.commentfieldiscompulsory
              : "Comment field is compulsory.",
        });
        self.setState({
          isSendingEmail: false,
        });
      }
    } else if (isSend === "ChatBot") {
      console.log("IsWithinsession", this.state.IsTktWithinSession);
      if (this.state.IsTktWithinSession == true) {
        this.handleSendMessageToCustomer(this.state.message, "", "", null);
      } else {
        if (
          this.state.CkEditorTemplateDetails.imageUrl &&
          this.state.CkEditorTemplateDetails.imageUrl.length > 0
        ) {
          this.handleSendImageWithTemplate(
            this.state.ticketDetailsData.customerPhoneNumber,
            "erreportingdemo",
            this.state.CkEditorTemplateDetails.imageUrl,
            this.state.placeholderValuesArray,
            this.state.tempName,
            config.ER_MH_WhatsAppNumber,
            config.template_language
          );
        } else {
          this.handleSendCampaignToCustomer(
            this.state.ticketDetailsData.customerPhoneNumber,
            this.state.tempName
          );
        }
      }
      const formData = new FormData();
      var paramData4 = {
        TicketID: this.state.ticket_Id,
        TicketMailBody: this.state.message,
        IsSent: 0,
        IsCustomerComment: 0,
        IsResponseToCustomer: 1,
        IsInternalComment: 0,
        MailID: 0,
        TicketSource: this.state.ticketSourceId, // Send ticket source id
      };

      formData.append("ticketingMailerQue", JSON.stringify(paramData4));
      for (let j = 0; j < this.state.FileData.length; j++) {
        formData.append("Filedata", this.state.FileData[j]);
      }
      formData.append("AttachmentMessage", "");
      formData.append("ChatSource", this.state.sourceType);
      formData.append("ticketID", this.state.ticketDetailsData.ticketID);
      formData.append(
        "CustomerMobileNo",
        this.state.ticketDetailsData.customerPhoneNumber
      );
      axios({
        method: "post",
        url: config.apiUrl + "/Ticketing/MessageComment",
        headers: authHeader(),
        data: formData,
      })
        .then(function (res) {
          let status = res.data.message;
          if (status === "Success") {
            self.handleGetMessageDetails(self.state.ticket_Id);
            self.setState({
              mailBodyData: "",
            });
          } else {
            NotificationManager.error(status);
            self.setState({
              addReassignCmmt: "",
              mailBodyData: "",
            });
          }
        })
        .catch((data) => {
          console.log(data);
        });
      // -------------Plush Icen Editor Call api--------------------
      // if (
      //   this.state.mailBodyData.length > 0 &&
      //   this.state.mailBodyData.length <= 1999
      // ) {

      // if (self.state.isReplyAllClicked) {
      //   self.setState({
      //     mailFiled: {
      //       userCC: "",
      //     },
      //     isReplyAllClicked: false,
      //   });
      // } else {

      // }

      if (!self.state.isReplyAllClicked) {
        this.handleGetInitailMailCC(this.state.ticket_Id);
      }

      self.setState({
        isSendingAllEmail: true,
      });
      // if (this.state.mailBodyData.length > 0) {
      //   self.setState({
      //     isSendingAllEmail: true,
      //   });
      //   if (!this.state.ticketDetailsData.sendEmailID) {
      //     NotificationManager.error("Please Select Email Sender ID.");
      //     self.setState({
      //       isSendingAllEmail: false,
      //     });
      //     return false;
      //   }
      //   if (this.state.ReplyInformStore === true) {
      //     var store_Id = "";

      //     for (let i = 0; i < this.state.selectedStoreData.length; i++) {
      //       store_Id += this.state.selectedStoreData[i]["storeID"] + ",";
      //     }
      //   } else {
      //     store_Id = "";
      //   }
      //   const formData = new FormData();
      //   var paramData2 = {
      //     TicketID: this.state.ticket_Id,
      //     ToEmail: this.state.ticketDetailsData.customerEmailId,
      //     // ToEmail: this.state.ticketDetailsData.sendEmailID,
      //     UserCC: this.state.mailFiled.userCC,
      //     UserBCC: this.state.mailFiled.userBCC,
      //     TikcketMailSubject: this.state.ticketDetailsData.ticketTitle,
      //     TicketMailBody: this.state.mailBodyData,
      //     IsInformToStore: this.state.ReplyInformStore,
      //     TicketSource: this.state.ticketSourceId, // Send ticket source id
      //     IsSent: 0,
      //     IsCustomerComment: 0,

      //     IsResponseToCustomer: 1,
      //     MailID: 0,
      //     StoreID: store_Id.substring(",", store_Id.length - 1),
      //     FromEmail: this.state.ticketDetailsData.sendEmailID,
      //   };
      //   formData.append("ticketingMailerQue", JSON.stringify(paramData2));
      //   for (let j = 0; j < this.state.FileData.length; j++) {
      //     formData.append("Filedata", this.state.FileData[j]);
      //   }

      //   axios({
      //     method: "post",
      //     url: config.apiUrl + "/Ticketing/MessageComment",
      //     headers: authHeader(),
      //     data: formData,
      //   })
      //     .then(function(res) {
      //       let status = res.data.message;
      //       if (status === "Success") {
      //         self.handleGetMessageDetails(self.state.ticket_Id);
      //         self.handleGetCountOfTabs(self.state.ticket_Id);
      //         self.handleGetTicketDetails(self.state.ticket_Id);
      //         self.handleProgressBarDetails(self.state.ticket_Id);
      //         self.handleTicketAssignFollowUp();
      //         self.HandleEmailCollapseOpen();
      //         NotificationManager.success(
      //           TranslationContext !== undefined
      //             ? TranslationContext.ticketingDashboard.mailsendsuccessfully
      //             : "Mail send successfully."
      //         );
      //         self.setState({
      //           mailFiled: {},
      //           fileText: 0,
      //           mailBodyData: "",
      //           file: [],
      //           attachedFiles: [],
      //           FileData: [],
      //           FileAttachment: [],

      //           isSendingAllEmail: false,
      //         });
      //       } else {
      //         NotificationManager.error(status);
      //         self.setState({
      //           isSendingAllEmail: false,
      //         });
      //       }
      //     })
      //     .catch((data) => {
      //       console.log(data);
      //       self.setState({
      //         isSendingAllEmail: false,
      //       });
      //     });
      // } else {
      //   NotificationManager.error(
      //     TranslationContext !== undefined
      //       ? TranslationContext.ticketingDashboard.pleaseenterbodysection
      //       : "Please Enter Body Section."
      //   );
      //   self.setState({
      //     isSendingAllEmail: false,
      //   });
      // }
      // } else {
      //   NotificationManager.error(
      //     TranslationContext !== undefined
      //       ? TranslationContext.ticketingDashboard
      //           .onlycharaterallowinbodysection
      //       : "Only 2000 Charater Allow In Body Section."
      //   );
      //   self.setState({
      //     isSendingEmail: false,
      //   });
      // }
    }
    if (isSend === "TicketFromStore") {
      self.setState({
        isSendingReplyAllEmail: true,
      });

      // if (self.state.isReplyAllClicked) {
      //   self.setState({
      //     mailFiled: {
      //       userCC: "",
      //     },
      //     isReplyAllClicked: false,
      //   });
      // } else {
      // }

      if (!self.state.isReplyAllClicked) {
        this.handleGetInitailMailCC(this.state.ticket_Id);
      }

      // if (!this.state.ticketDetailsData.sendEmailID) {
      //   NotificationManager.error("Please Select Email Sender ID.");
      //   self.setState({
      //     isSendingReplyAllEmail: false,
      //   });
      //   return false;
      // }
      // if (this.state.replymailBodyData.length > 0) {
      //   if (this.state.InformStore === true) {
      //     var selectedStore = "";

      //     for (let i = 0; i < this.state.selectedStoreData.length; i++) {
      //       selectedStore += this.state.selectedStoreData[i]["storeID"] + ",";
      //     }
      //   } else {
      //     selectedStore = "";
      //   }
      //   const formData = new FormData();
      //   var paramMessageData = {
      //     TicketID: this.state.ticket_Id,
      //     ToEmail: this.state.ticketDetailsData.customerEmailId,
      //     FromEmail: this.state.ticketDetailsData.sendEmailID,
      //     UserCC: this.state.mailFiled.userCC,
      //     UserBCC: this.state.mailFiled.userBCC,
      //     TikcketMailSubject: this.state.ticketDetailsData.ticketTitle,
      //     TicketMailBody: this.state.replymailBodyData,
      //     IsInformToStore: this.state.InformStore,
      //     TicketSource: this.state.ReplySourceId, // Send ticket source id
      //     IsSent: 0,
      //     IsCustomerComment: 0,
      //     IsResponseToCustomer: 1,
      //     IsInternalComment: 0,
      //     MailID: this.state.mailId,
      //     StoreID: selectedStore.substring(",", selectedStore.length - 1),
      //   };
      //   formData.append("ticketingMailerQue", JSON.stringify(paramMessageData));
      //   for (let j = 0; j < this.state.ReplyFileData.length; j++) {
      //     formData.append("Filedata", this.state.ReplyFileData[j]);
      //   }
      //   axios({
      //     method: "post",
      //     url: config.apiUrl + "/Ticketing/MessageComment",
      //     headers: authHeader(),
      //     data: formData,
      //   })
      //     .then(function(res) {
      //       let status = res.data.message;
      //       if (status === "Success") {
      //         self.handleTicketAssignFollowUp();
      //         self.handleGetMessageDetails(self.state.ticket_Id);
      //         self.handleGetCountOfTabs(self.state.ticket_Id);
      //         self.hanldeCommentClose2();
      //         NotificationManager.success(
      //           TranslationContext !== undefined
      //             ? TranslationContext.ticketingDashboard.mailsendsuccessfully
      //             : "Mail send successfully."
      //         );
      //         self.state.ticketDetailsData["sendEmailID"] = "";
      //         self.setState({
      //           ticketDetailsData: self.state.ticketDetailsData,
      //           mailFiled: {},
      //           ReplyFileData: [],
      //           ReplyfileText: 0,
      //           replymailBodyData: "",
      //           isSendingReplyAllEmail: false,
      //         });
      //       } else {
      //         NotificationManager.error(status);
      //         self.setState({
      //           isSendingReplyAllEmail: false,
      //         });
      //       }
      //     })
      //     .catch((data) => {
      //       console.log(data);
      //       self.setState({
      //         isSendingReplyAllEmail: false,
      //       });
      //     });
      // } else {
      //   NotificationManager.error(
      //     TranslationContext !== undefined
      //       ? TranslationContext.ticketingDashboard.pleaseenterbodysection
      //       : "Please Enter Body Section."
      //   );
      //   self.setState({
      //     isSendingReplyAllEmail: false,
      //   });
      // }
    } else if (isSend === "ExternalAPI") {
      self.setState({
        isSendingForwardEmail: true,
      });
      if (self.state.toEmailId === "") {
        NotificationManager.error("Please Enter The Email Id.");
        self.setState({
          isSendingForwardEmail: false,
        });
        return false;
      }

      if (
        this.state.ticketDetailsData.toEmailId === null ||
        this.state.ticketDetailsData.toEmailId === ""
      ) {
        if (!this.state.ticketDetailsData.sendEmailID) {
          NotificationManager.error("Please Select Email Sender ID.");
          self.setState({
            isSendingForwardEmail: false,
          });
          return false;
        }
      }

      if (this.state.ForWardMailBodyData.length > 0) {
        if (this.state.InformStore === true) {
          var selectedStore = "";

          for (let i = 0; i < this.state.selectedStoreData.length; i++) {
            selectedStore += this.state.selectedStoreData[i]["storeID"] + ",";
          }
        } else {
          selectedStore = "";
        }
        const formData = new FormData();
        var paramMessageData = {
          TicketID: this.state.ticket_Id,
          ToEmail: this.state.isForward
            ? this.state.forwardTo
            : this.state.toEmailId,
          FromEmail:
            this.state.ticketDetailsData.toEmailId !== null
              ? this.state.ticketDetailsData.toEmailId !== ""
                ? this.state.ticketDetailsData.toEmailId
                : this.state.ticketDetailsData.sendEmailID
              : this.state.ticketDetailsData.sendEmailID,
          UserCC: this.state.mailFiled.userCC,
          UserBCC: this.state.mailFiled.userBCC,
          TikcketMailSubject: "Fw: " + this.state.ticketDetailsData.ticketTitle,
          TicketMailBody: this.state.ForWardMailBodyData,
          IsInformToStore: this.state.InformStore,
          TicketSource: this.state.forwardSourceId, // Send ticket source id
          IsSent: 0,
          IsCustomerComment: 0,
          IsResponseToCustomer: 1,
          IsInternalComment: 0,
          MailID: 0,
          StoreID: selectedStore.substring(",", selectedStore.length - 1),
          IsForWard: 1,
          ForWardMailMessageId: this.state.mailId,
        };
        formData.append("ticketingMailerQue", JSON.stringify(paramMessageData));

        for (let j = 0; j < this.state.forwardFileData.length; j++) {
          formData.append("Filedata", this.state.forwardFileData[j]);
        }

        formData.append(
          "AttachedFileFromMail",
          JSON.stringify(this.state.forwardAttachmentFromMail)
        );

        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageMailForWard",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              // self.handleTicketAssignFollowUp();
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              self.hanldeCommentClose3();

              NotificationManager.success(
                TranslationContext !== undefined
                  ? TranslationContext.ticketingDashboard.mailsendsuccessfully
                  : "Mail send successfully."
              );
              self.state.ticketDetailsData["sendEmailID"] = "";
              self.setState({
                ticketDetailsData: self.state.ticketDetailsData,
                mailFiled: {},
                ReplyFileData: [],
                ReplyfileText: 0,
                ForWardMailBodyData: "",
                //toEmailId: "",
                isSendingForwardEmail: false,
                isSendingReplyAllEmail: false,
              });
              self.handleGetMailFooterData();
            } else {
              NotificationManager.error(status);
              self.setState({
                isSendingForwardEmail: false,
              });
            }
          })
          .catch((data) => {
            console.log(data);
            self.setState({
              isSendingForwardEmail: false,
            });
          });
      }
    } else if (isSend === "WhatsApp") {
      self.setState({
        isSendingForwardAllEmail: true,
      });

      if (!self.state.isReplyAllClicked) {
        this.handleGetInitailMailCC(this.state.ticket_Id);
      }
    } else {
      if (this.state.ticketFreeTextcomment.length > 0) {
        const formData = new FormData();
        var paramData5 = {
          TicketID: this.state.ticket_Id,
          TicketMailBody: this.state.ticketFreeTextcomment.trim(),
          IsSent: 1,
          IsCustomerComment: 0,
          IsInternalComment: 1,
        };
        formData.append("ticketingMailerQue", JSON.stringify(paramData5));

        axios({
          method: "post",
          url: config.apiUrl + "/Ticketing/MessageComment",
          headers: authHeader(),
          data: formData,
        })
          .then(function (res) {
            let status = res.data.message;
            if (status === "Success") {
              NotificationManager.success(
                TranslationContext !== undefined
                  ? TranslationContext.alertmessage.commentaddedsuccessfully
                  : "Comment added successfully."
              );
              // self.handleTicketAssignFollowUp();
              self.handleGetMessageDetails(self.state.ticket_Id);
              self.handleGetCountOfTabs(self.state.ticket_Id);
              self.handleFreeTextCommentOpen();
              self.setState({
                ticketFreeTextcomment: "",
                freetextCommentCompulsory: "",

                isSendingEmail: false,
              });
            } else {
              NotificationManager.error(status);
              self.setState({
                isSendingEmail: false,
              });
            }
          })
          .catch((data) => {
            console.log(data);
            self.setState({
              isSendingEmail: false,
            });
          });
      } else {
        this.setState({
          freetextCommentCompulsory:
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.commentfieldiscompulsory
              : "Comment field is compulsory.",

          isSendingEmail: false,
        });
      }
    }
  }

  // handleMailOnChange(filed, e) {
  //   var mailFiled = this.state.mailFiled;
  //   mailFiled[filed] = e.target.value;

  //   if (filed === "userCC") {
  //     var CcCount = mailFiled.userCC;
  //     var finalCount = CcCount.split(",");
  //     this.setState({ mailFiled, userCcCount: finalCount.length });
  //   } else {
  //     var BCcCount = mailFiled.userBCC;
  //     var finalBccCount = BCcCount.split(",");
  //     this.setState({ mailFiled, userBccCount: finalBccCount.length });
  //   }
  // }
  handleMailOnChange(filed, e) {
    var mailFiled = this.state.mailFiled;
    mailFiled[filed] = e.target.value;

    if (filed === "userCC") {
      var CcCount = mailFiled.userCC;
      var finalCount = CcCount.split(",");
      this.setState({ mailFiled, userCcCount: finalCount.length });
    } else if (filed == "toEmailId") {
      if (this.state.isForward) {
        this.setState({
          forwardTo: e.target.value,
        });
      } else {
        this.setState({ toEmailId: e.target.value });
      }
    } else {
      var BCcCount = mailFiled.userBCC;
      var finalBccCount = BCcCount.split(",");
      this.setState({ mailFiled, userBccCount: finalBccCount.length });
    }
  }
  handleProgressBarDetails(id) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getprogressbardetail",
      headers: authHeader(),
      params: {
        TicketID: id,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          var progressColor = [];
          if (data) {
            var objColor = {};
            objColor.value = data.progressFirstPercentage;
            objColor.color = data.progressFirstColorCode;
            progressColor.push(objColor);
            var objColor1 = {};
            objColor1.value = data.progressSecondPercentage;
            objColor1.color = data.progressSecondColorCode;
            progressColor.push(objColor1);
          }
          self.setState({
            progressBarData: data,
            progressDataWithcColor: progressColor,
          });
        } else {
          self.setState({ progressBarData: [] });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }
  handleReplyFileUpload(e) {
    var allFiles = [];
    var selectedFiles = e.target.files;
    var previousFile = this.state.replyFileSize;
    var file_size = previousFile;

    for (let i = 0; i < selectedFiles.length; i++) {
      file_size = file_size + e.target.files[0].size;

      if (file_size > this.state.FileSize) {
        NotificationManager.error("File Size Should be Less than 5 MB");
        this.setState({
          replyFileSize: previousFile,
        });
      } else {
        this.setState({
          replyFileSize: file_size,
        });
      }
    }
    if (file_size > this.state.FileSize) {
      this.setState({
        replyFileSize: previousFile,
      });
    } else {
      for (let i = 0; i < selectedFiles.length; i++) {
        allFiles.push(selectedFiles[i]);
      }
      // -------------------------Image View code start-----------------------
      for (let i = 0; i < e.target.files.length; i++) {
        var objFile = new Object();
        var name = e.target.files[i].name;
        var type = name.substring(name.lastIndexOf(".") + 1, name.length);
        objFile.Type = type;
        objFile.name = name;

        objFile.File = e.target.files[i];
        const file = e.target.files[i];

        this.state.Rplyfile.push(objFile);
        this.state.ReplyFileData.push(file);
      }

      this.setState({
        ReplyfileText: this.state.Rplyfile.length,
        ReplyFileData: allFiles,
      });
    }
  }
  handleForwardFileUpload(e) {
    var allFiles = [];
    var selectedFiles = e.target.files;
    var previousFile = this.state.forwardFileSize;
    var file_size = previousFile;

    for (let i = 0; i < selectedFiles.length; i++) {
      file_size = file_size + e.target.files[0].size;

      if (file_size > this.state.FileSize) {
        NotificationManager.error("File Size Should be Less than 5 MB");
        this.setState({
          forwardFileSize: previousFile,
        });
      } else {
        this.setState({
          forwardFileSize: file_size,
        });
      }
    }

    if (file_size > this.state.FileSize) {
      this.setState({
        forwardFileSize: previousFile,
      });
    } else {
      for (let i = 0; i < selectedFiles.length; i++) {
        allFiles.push(selectedFiles[i]);
      }
      // -------------------------Image View code start-----------------------
      for (let i = 0; i < e.target.files.length; i++) {
        var objFile = new Object();
        var name = e.target.files[i].name;
        var type = name.substring(name.lastIndexOf(".") + 1, name.length);
        objFile.Type = type;
        objFile.name = name;

        objFile.File = e.target.files[i];
        const file = e.target.files[i];

        this.state.forwardFile.push(objFile);
        this.state.forwardFileData.push(file);
      }

      this.setState({
        forwardFileText:
          this.state.forwardFileText + this.state.forwardFile.length,
        forwardFileData: allFiles,
      });
    }
  }
  // handleFileUpload(e) {
  //   var allFiles = [];
  //   var selectedFiles = e.target.files;
  //   for (let i = 0; i < selectedFiles.length; i++) {
  //     allFiles.push(selectedFiles[i]);
  //   }
  //   // -------------------------Image View code start-----------------------
  //   if (e.target.files && e.target.files[0]) {
  //     const filesAmount = e.target.files.length;
  //     for (let i = 0; i < filesAmount; i++) {
  //       const reader = new FileReader();
  //       reader.onload = (file) => {
  //         this.setState({
  //           imageView: file.target.result,
  //         });
  //       };
  //       reader.readAsDataURL(e.target.files[i]);
  //     }
  //   }
  //   for (let i = 0; i < e.target.files.length; i++) {
  //     var objFile = new Object();
  //     var name = e.target.files[i].name;
  //     var type = name.substring(name.lastIndexOf(".") + 1, name.length);
  //     objFile.Type = type;
  //     objFile.name = name;

  //     objFile.File = e.target.files[i];
  //     const file = e.target.files[i];

  //     this.state.file.push(objFile);
  //     this.state.FileData.push(file);
  //   }

  //   // -------------------------Image View code end-----------------------
  //   this.setState({ fileText: this.state.file.length, FileData: allFiles });
  // }

  handleFileUpload(e) {
    var allFiles = [];
    var selectedFiles = e.target.files;
    var previousFile = this.state.IsFileSize;
    var file_size = previousFile;

    for (let i = 0; i < selectedFiles.length; i++) {
      file_size = file_size + e.target.files[0].size;

      if (file_size > this.state.FileSize) {
        NotificationManager.error("File Size Should be Less than 5 MB");
        this.setState({
          IsFileSize: previousFile,
        });
      } else {
        this.setState({
          IsFileSize: file_size,
        });
      }
    }
    if (file_size > this.state.FileSize) {
      this.setState({
        IsFileSize: previousFile,
      });
    } else {
      // -------------------------Image View code start-----------------------
      if (e.target.files && e.target.files[0]) {
        const filesAmount = e.target.files.length;
        for (let i = 0; i < filesAmount; i++) {
          const reader = new FileReader();
          reader.onload = (file) => {
            this.setState({
              imageView: file.target.result,
            });
          };
          reader.readAsDataURL(e.target.files[i]);
        }
      }
      for (let i = 0; i < e.target.files.length; i++) {
        var objFile = new Object();
        var name = e.target.files[i].name;
        var type = name.substring(name.lastIndexOf(".") + 1, name.length);
        objFile.Type = type;
        objFile.name = name;

        objFile.File = e.target.files[i];
        const file = e.target.files[i];

        this.state.file.push(objFile);
        allFiles.push(file);
      }

      // -------------------------Image View code end-----------------------
      this.setState({ fileText: this.state.file.length, FileData: allFiles });
    }
  }

  handleByvisitDate(e, rowData) {
    if (e.original.lpassStoreID > 0) {
      var id = e.original.lpassStoreID;
    } else {
      var id = e.original.storeID;
    }

    if (e.original.lpassStoreID > 0) {
      var id = e.original.lpassStoreID;
      var index = this.state.selectedStoreData.findIndex(
        (x) => x.lpassStoreID === id
      );
    } else {
      var id = e.original.storeID;
      var index = this.state.selectedStoreData.findIndex(
        (x) => x.storeID === id
      );
    }
    var selectedStoreData = this.state.selectedStoreData;
    selectedStoreData[index].storeVisitDate = rowData;

    this.setState({ selectedStoreData });
  }
  handleChangeOrderItem = (e) => {
    var values = e.target.checked;
    if (!this.state.selectProductOrd) {
      if (values) {
        var x = document.getElementById("ordertbls1");
        var x1 = document.getElementById("orderitemtbl1");
        var x2 = document.getElementById("new_Orderitemtbl1");

        var i = document.getElementById("ordertbls");
        var j = document.getElementById("orderitemtbl");

        if (x !== null) {
          x.style.display = "none";
        }
        if (x1 !== null) {
          x1.style.display = "block";
        }
        if (x2 !== null) {
          x2.style.display = "block";
        }
        if (i !== null) {
          i.style.display = "none";
        }
        if (j !== null) {
          j.style.display = "block";
        }
      } else {
        var i = document.getElementById("ordertbls");
        var j = document.getElementById("orderitemtbl");

        var x = document.getElementById("ordertbls1");
        var x1 = document.getElementById("orderitemtbl1");
        var x2 = document.getElementById("new_Orderitemtbl1");

        if (x !== null) {
          x.style.display = "block";
        }
        if (x1 !== null) {
          x1.style.display = "none";
        }
        if (x2 !== null) {
          x2.style.display = "none";
        }
        if (i !== null) {
          i.style.display = "block";
        }
        if (j !== null) {
          j.style.display = "none";
        }
      }
      this.setState({
        OrdItmBtnStatus: e.target.checked,
      });
    } else {
      if (values) {
        var ot = document.getElementById("ordertbls");
        var oi = document.getElementById("orderitemtbl");

        var ot1 = document.getElementById("ordertbls1");
        var oi2 = document.getElementById("orderitemtbl1");
        var oi3 = document.getElementById("new_Orderitemtbl1");

        if (ot !== null) {
          ot.style.display = "none";
        }
        if (oi !== null) {
          oi.style.display = "block";
        }
        if (ot1 !== null) {
          ot1.style.display = "none";
        }
        if (oi2 !== null) {
          oi2.style.display = "block";
        }
        if (oi3 !== null) {
          oi3.style.display = "block";
        }
      } else {
        var ot1 = document.getElementById("ordertbls1");
        var oi2 = document.getElementById("orderitemtbl1");
        var oi3 = document.getElementById("new_Orderitemtbl1");

        var ot = document.getElementById("ordertbls");
        var oi = document.getElementById("orderitemtbl");

        if (ot !== null) {
          ot.style.display = "block";
        }
        if (oi !== null) {
          oi.style.display = "none";
        }
        if (ot1 !== null) {
          ot1.style.display = "block";
        }
        if (oi2 !== null) {
          oi2.style.display = "none";
        }
        if (oi3 !== null) {
          oi3.style.display = "none";
        }
      }
      this.setState({
        OrdItmBtnStatus: e.target.checked,
      });
    }
  };

  handleRemoveImage(i) {
    let file = this.state.file;
    file.splice(i, 1);
    var fileText = file.length;
    setTimeout(() => {
      this.setState({ file, fileText });
    }, 50);
  }
  handleRemoveImageReply(i) {
    let Rplyfile = this.state.Rplyfile;
    Rplyfile.splice(i, 1);
    var ReplyfileText = Rplyfile.length;
    setTimeout(() => {
      this.setState({ Rplyfile, ReplyfileText });
    }, 50);
  }
  handleRemoveImageForward(i, attachedBy) {
    if (attachedBy === "user") {
      let forwardFile = this.state.forwardFile;
      forwardFile.splice(i, 1);
      var forwardFileText =
        forwardFile.length + this.state.forwardAttachmentFromMail.length;

      setTimeout(() => {
        this.setState({ forwardFile, forwardFileText });
      }, 50);
    }
    if (attachedBy === "mail") {
      let forwardAttachmentFromMail = this.state.forwardAttachmentFromMail;
      forwardAttachmentFromMail.splice(i, 1);
      var forwardFileText =
        forwardAttachmentFromMail.length + this.state.forwardFile.length;

      setTimeout(() => {
        this.setState({ forwardAttachmentFromMail, forwardFileText });
      }, 50);
    }
  }

  handleSetDataTab = () => {
    if (this.state.OrdItmBtnStatus) {
      var x = document.getElementById("ordertbls1");
      var x1 = document.getElementById("orderitemtbl1");
      var x2 = document.getElementById("new_Orderitemtbl1");

      var y = document.getElementById("ordertbls");
      var y1 = document.getElementById("orderitemtbl");
      if (x !== null) {
        x.style.display = "none";
      }
      if (x1 !== null) {
        x1.style.display = "block";
      }
      if (x2 !== null) {
        x2.style.display = "block";
      }
      if (y !== null) {
        y.style.display = "none";
      }
      if (y1 !== null) {
        y1.style.display = "block";
      }
    } else {
      var x = document.getElementById("ordertbls");
      var x1 = document.getElementById("orderitemtbl");

      var y = document.getElementById("ordertbls1");
      var y1 = document.getElementById("orderitemtbl1");
      var y2 = document.getElementById("new_Orderitemtbl1");
      if (x !== null) {
        x.style.display = "block";
      }
      if (x1 !== null) {
        x1.style.display = "none";
      }
      if (y !== null) {
        y.style.display = "block";
      }
      if (y1 !== null) {
        y1.style.display = "none";
      }
      if (y2 !== null) {
        y2.style.display = "none";
      }
    }
    this.setState({
      selectProductOrd: !this.state.selectProductOrd,
    });
  };
  /// Handle get Order Item data
  handleGetOderItemData(invoiceNumber, rowData, e) {
    console.log("=========", invoiceNumber, rowData.orderMasterID, e);
    this.setState(
      {
        orderMasterIDNew: rowData.orderMasterID,
      },
      console.log("=========", this.state.orderMasterIDNew)
    );

    if (e.target.checked) {
      let currentSelectedInvoiceNo = this.state.selectedInvoiceNo;
      currentSelectedInvoiceNo += invoiceNumber;
      this.setState({
        // SelectedAllOrder: [],
        SelectedAllItem: [],
        OrderSubItem: [],
        selectedInvoiceNo: currentSelectedInvoiceNo,
      });
      let self = this;
      axios({
        method: "post",
        // url: config.apiUrl + "/Order/getOrderItemDetailsList",
        url: config.apiUrl + "/Order/getOrderItemDetailsListWithBrand",
        headers: authHeader(),
        data: {
          OrderMasterID: rowData.orderMasterID,
          OrderNumber: rowData.invoiceNumber,
          CustomerID: this.state.custID,
          StoreCode: rowData.storeCode,
          InvoiceDate: rowData.invoiceDate,
          brandCode: (this.state.selectetedParameters.brandID).toString()
        },
      })
        .then(function (res) {
          let Msg = res.data.message;
          let data = res.data.responseData;
          if (Msg === "Success") {
            self.setState({
              OrderSubItem: data,
              attchData: data,
            });

            var selectedInvoiceNo = currentSelectedInvoiceNo;
            const newSelected = Object.assign({}, self.state.CheckBoxAllOrder);

            // for (let i = 0; selectedInvoiceNo.length; i++) {
            // }

            newSelected[invoiceNumber] = !self.state.CheckBoxAllOrder[
              invoiceNumber
            ];
            // selectedInvoiceNo = selectedInvoiceNo + "";

            self.setState({
              CheckBoxAllOrder: newSelected,
              selectedInvoiceNo,
            });
            var selectedRow = [];
            var CselectedRow = [];
            if (self.state.SelectedAllOrder.length === 0) {
              selectedRow.push(rowData);
              var Order_Master = self.state.OrderSubItem.filter(
                (x) => x.invoiceNumber === invoiceNumber
              );
              if (Order_Master.length > 0) {
                var objCheckBoxAllItem = new Object();
                for (let j = 0; j < Order_Master.length; j++) {
                  objCheckBoxAllItem[Order_Master[j].articleNumber] = true;

                  CselectedRow.push(Order_Master[j]);
                }
                self.setState({
                  CheckBoxAllItem: objCheckBoxAllItem,
                });
              }
              self.setState({
                SelectedAllOrder: selectedRow,
                SelectedAllItem: CselectedRow,
              });
            } else {
              // if (newSelected[invoiceNumber] === true) {
              //   for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
              //     if (self.state.SelectedAllOrder[i] === rowData) {
              //       selectedRow = self.state.SelectedAllOrder;
              //       selectedRow.push(rowData);
              //       var Order_Master = self.state.OrderSubItem.filter(
              //         (x) => x.invoiceNumber === invoiceNumber
              //       );
              //       if (Order_Master.length > 0) {
              //         var objCheckBoxAllItem = new Object();
              //         for (let j = 0; j < Order_Master.length; j++) {
              //           objCheckBoxAllItem[
              //             Order_Master[j].articleNumber
              //           ] = true;

              //           CselectedRow.push(Order_Master[j]);
              //         }
              //         self.setState({
              //           CheckBoxAllItem: objCheckBoxAllItem,
              //         });
              //       }

              //       self.setState({
              //         SelectedAllOrder: selectedRow,
              //         SelectedAllItem: CselectedRow,
              //       });

              //       break;
              //     }
              //   }
              // } else {
              for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
                // if (self.state.SelectedAllOrder[i] === rowData) {
                //   selectedRow = self.state.SelectedAllOrder;
                //   selectedRow.splice(i, 1);
                //   // selectedRow.push(rowData);
                //   var Order_Master = self.state.OrderSubItem.filter(
                //     (x) => x.invoiceNumber === invoiceNumber
                //   );
                //   if (Order_Master.length > 0) {
                //     var objCheckBoxAllItem = new Object();
                //     for (let j = 0; j < Order_Master.length; j++) {
                //       objCheckBoxAllItem[
                //         Order_Master[j].articleNumber
                //       ] = false;
                //     }
                //     self.setState({
                //       CheckBoxAllItem: objCheckBoxAllItem,
                //     });
                //   }

                //   self.setState({
                //     SelectedAllOrder: selectedRow,
                //     SelectedAllItem: [],
                //   });
                //   break;
                // }
                // if (self.state.SelectedAllOrder[i] === rowData) {
                selectedRow = self.state.SelectedAllOrder;
                // selectedRow.splice(i, 1);
                selectedRow.push(rowData);
                var Order_Master = self.state.OrderSubItem.filter(
                  (x) => x.invoiceNumber === invoiceNumber
                );
                if (Order_Master.length > 0) {
                  var objCheckBoxAllItem = new Object();
                  for (let j = 0; j < Order_Master.length; j++) {
                    objCheckBoxAllItem[Order_Master[j].articleNumber] = false;
                  }
                  self.setState({
                    CheckBoxAllItem: objCheckBoxAllItem,
                  });
                }

                self.setState({
                  SelectedAllOrder: selectedRow,
                  SelectedAllItem: [],
                });
                break;
                // }
              }
              // }
            }

            self.setState({
              SelectedAllOrder: selectedRow,
              SelectedAllItem: CselectedRow,
            });
          } else {
            var selectedInvoiceNo = currentSelectedInvoiceNo;
            const newSelected = Object.assign({}, self.state.CheckBoxAllOrder);
            newSelected[invoiceNumber] = !self.state.CheckBoxAllOrder[
              invoiceNumber
            ];
            self.setState({
              CheckBoxAllOrder: newSelected,
              selectedInvoiceNo,
            });
            var selectedRow = [];
            var CselectedRow = [];
            if (self.state.SelectedAllOrder.length === 0) {
              selectedRow.push(rowData);
              var Order_Master = self.state.OrderSubItem.filter(
                (x) => x.invoiceNumber === invoiceNumber
              );
              if (Order_Master.length > 0) {
                var objCheckBoxAllItem = new Object();
                for (let j = 0; j < Order_Master.length; j++) {
                  objCheckBoxAllItem[Order_Master[j].articleNumber] = true;

                  CselectedRow.push(Order_Master[j]);
                }
                self.setState({
                  CheckBoxAllItem: objCheckBoxAllItem,
                });
              }
              self.setState({
                SelectedAllOrder: selectedRow,
                SelectedAllItem: CselectedRow,
              });
            } else {
              // if (newSelected[invoiceNumber] === true) {
              //   for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
              //     if (self.state.SelectedAllOrder[i] === rowData) {
              //       selectedRow = self.state.SelectedAllOrder;
              //       selectedRow.push(rowData);
              //       var Order_Master = self.state.OrderSubItem.filter(
              //         (x) => x.invoiceNumber === invoiceNumber
              //       );
              //       if (Order_Master.length > 0) {
              //         var objCheckBoxAllItem = new Object();
              //         for (let j = 0; j < Order_Master.length; j++) {
              //           objCheckBoxAllItem[
              //             Order_Master[j].articleNumber
              //           ] = true;

              //           CselectedRow.push(Order_Master[j]);
              //         }
              //         self.setState({
              //           CheckBoxAllItem: objCheckBoxAllItem,
              //         });
              //       }

              //       self.setState({
              //         SelectedAllOrder: selectedRow,
              //         SelectedAllItem: CselectedRow,
              //       });

              //       break;
              //     }
              //   }
              // }
              //  else {
              for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
                // if (self.state.SelectedAllOrder[i] === rowData) {
                //   selectedRow = self.state.SelectedAllOrder;
                //   selectedRow.splice(i, 1);
                //   var Order_Master = self.state.OrderSubItem.filter(
                //     (x) => x.invoiceNumber === invoiceNumber
                //   );
                //   if (Order_Master.length > 0) {
                //     var objCheckBoxAllItem = new Object();
                //     for (let j = 0; j < Order_Master.length; j++) {
                //       objCheckBoxAllItem[Order_Master[j].articleNumber] = false;
                //     }
                //     self.setState({
                //       CheckBoxAllItem: objCheckBoxAllItem,
                //     });
                //   }

                //   self.setState({
                //     SelectedAllOrder: selectedRow,
                //     SelectedAllItem: [],
                //   });

                //   break;
                // }
                // else {
                selectedRow = self.state.SelectedAllOrder;
                selectedRow.push(rowData);
                var Order_Master = self.state.OrderSubItem.filter(
                  (x) => x.invoiceNumber === invoiceNumber
                );
                if (Order_Master.length > 0) {
                  var objCheckBoxAllItem = new Object();
                  for (let j = 0; j < Order_Master.length; j++) {
                    objCheckBoxAllItem[Order_Master[j].articleNumber] = false;
                  }
                  self.setState({
                    CheckBoxAllItem: objCheckBoxAllItem,
                  });
                }

                self.setState({
                  SelectedAllOrder: selectedRow,
                  SelectedAllItem: [],
                });
                break;
                // }
              }
              // }
            }

            self.setState({
              CheckBoxAllOrder: newSelected,
              selectedInvoiceNo,
              OrderSubItem: [],
            });
          }
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      let selectedInvoiceNo = this.state.selectedInvoiceNo;
      if (selectedInvoiceNo.includes(invoiceNumber)) {
        selectedInvoiceNo = selectedInvoiceNo.replace(invoiceNumber);
      }
      // if (!selectedInvoiceNo.includes(invoiceNumber)) {
      //   selectedInvoiceNo += invoiceNumber + ",";
      // }

      let SelectedAllOrder =
        this.state.SelectedAllOrder.length > 0
          ? this.state.SelectedAllOrder.filter((item) => {
            return item.invoiceNumber !== invoiceNumber;
          })
          : this.state.SelectedAllOrder;

      this.setState({
        SelectedAllOrder: SelectedAllOrder,
        SelectedAllItem: [],
        OrderSubItem: [],
        selectedInvoiceNo: selectedInvoiceNo,
      });
    }
  }

  // // -------------------------------Check box selected all code start-------------------------------

  checkIndividualItem(articleNumber, rowData) {
    console.log(rowData?.rowData, "rowData?.orderItemIDm");
    console.log(this.state.CheckBoxAllItem, "CheckBoxAllItem");
    let newSelected = Object.assign({}, this.state.CheckBoxAllItem);
    newSelected[articleNumber] = !this.state.CheckBoxAllItem[articleNumber];
    this.setState({
      CheckBoxAllItem: articleNumber ? newSelected : false,
    });
    var selectedRow = [];
    if (this.state.SelectedAllItem.length === 0) {
      selectedRow.push(rowData);
      this.setState({
        SelectedAllItem: selectedRow,
      });
    } else {
      if (newSelected[articleNumber] === true) {
        for (var i = 0; i < this.state.SelectedAllItem.length; i++) {
          if (
            this.state.SelectedAllItem[i].orderItemID !==
            this.state.SelectedAllItem[i].orderItemID
          ) {
            selectedRow = this.state.SelectedAllItem;
            selectedRow.push(rowData);
          } else {
            selectedRow = [];
            selectedRow.push(rowData);
          }

          var Order_Master = this.state.OrderSubItem.filter(
            (x) =>
              x.articleNumber === this.state.SelectedAllItem[i].articleNumber
          );
          if (Order_Master.length === selectedRow.length) {
            const newSelected = Object.assign({}, this.state.CheckBoxAllOrder);
            newSelected[Order_Master[0].articleNumber] = !this.state
              .CheckBoxAllOrder[Order_Master[0].articleNumber];
            this.setState({
              CheckBoxAllOrder: Order_Master[0].articleNumber
                ? newSelected
                : false,
            });
            var data_master = this.state.orderDetailsData.filter(
              (y) => y.articleNumber === Order_Master[0].articleNumber
            );
            if (data_master.length > 0) {
              var MastOrd = this.state.SelectedAllOrder;
              MastOrd.push(data_master[0]);
              this.setState({
                SelectedAllOrder: MastOrd,
              });
            }
          }
          break;
        }
      } else {
        for (var j = 0; j < this.state.SelectedAllItem.length; j++) {
          if (this.state.SelectedAllItem[j] === rowData) {
            selectedRow = this.state.SelectedAllItem;
            selectedRow.splice(j, 1);

            var Order_Master = this.state.OrderSubItem.filter(
              (x) => x.articleNumber === rowData.articleNumber
            );

            if (Order_Master.length !== selectedRow.length) {
              const newSelected = Object.assign(
                {},
                this.state.CheckBoxAllOrder
              );
              newSelected[Order_Master[0].articleNumber] = false;
              this.setState({
                CheckBoxAllOrder: Order_Master[0].articleNumber
                  ? newSelected
                  : false,
              });
              var data_master = this.state.orderDetailsData.filter(
                (y) => y.articleNumber === Order_Master[0].articleNumber
              );
              var GetIndex = this.state.orderDetailsData.findIndex(
                (y) => y.articleNumber === Order_Master[0].articleNumber
              );
              if (data_master.length > 0) {
                var MastOrd = this.state.SelectedAllOrder;
                MastOrd.splice(GetIndex, 1);
                this.setState({
                  SelectedAllOrder: MastOrd,
                });
              }
            }

            break;
          }
        }
      }
    }
    this.setState({
      SelectedAllItem: selectedRow,
      // SelectedAllOrder: selectedRow,
    });
  }
  // -------------------------------Check box selected all code end-------------------------------

  callbackToParent = () => {
    this.handleGetCountOfTabs(this.state.ticket_Id);
  };
  handleTicketSourceChange = (e) => {
    let self = this
    let value = e.target.value;

    self.setState({
      ticketSourceId: value,
      ticketMailerFooter: "",
      mailBodyData: "",
      tempName: "",
      mailFiled: { userCC: "" },
    });
    if (value == "Mails") {
      self.handleGetMailFooterData();
    }
    if (value === "SMS") {
      self.setState({
        isSMS: true,
        // isFromFB: false,
        // isGoogleReview:false,
        // isFromInsta:false
      });
    }
    if (value === "GoogleReview") {
      self.setState({
        isGoogleReview: true,
        isFromFB: false,
        isFromInsta: false,
        isSMS: false,
      });
    }
    if (value === "Facebook") {
      self.setState({
        isFromFB: true,
        isGoogleReview: false,
        isFromInsta: false,
        isSMS: false,
      })
    }
    if (value === "Instagram") {
      self.setState({
        isFromInsta: true,
        isGoogleReview: false,
        isFromFB: false,
        isSMS: false,
      })
    }
    else {
      self.setState({
        // isSMS: false,
        // isGoogleReview: false,
        // isFromFB: false,
        // isFromInsta: false,
        ticketMailerFooter: "",
        mailBodyData: "",
        tempName: "",
        mailFiled: { userCC: "" },
      });
    }
  };

  handleReplyTcktSourceChange = (e) => {
    let value = e.target.value;
    this.setState({
      ReplySourceId: value,
      ticketMailerFooter: "",
      replymailBodyData: "",
      tempName: "",
      mailFiled: { userCC: "" },
    });
    if (value === "Mails") {
      this.handleGetMailFooterData();
    } else {
      this.setState({
        ticketMailerFooter: "",
        replymailBodyData: "",
        tempName: "",
        mailFiled: { userCC: "" },
      });
    }
  };
  handleForwardTcktSourceChange = (e) => {
    let value = e.target.value;
    this.setState({
      forwardSourceId: value,
      ticketMailerFooter: "",
      ForWardMailBodyData: "",
      tempName: "",
      mailFiled: { userCC: "" },
    });
    if (value === "Mails") {
      this.handleGetMailFooterData();
    } else {
      this.setState({
        ticketMailerFooter: "",
        ForWardMailBodyData: "",
        tempName: "",
        mailFiled: { userCC: "" },
      });
    }
  };
  handleSkipComment() {
    let self = this;
    const formData = new FormData();
    var paramData = {
      TicketID: this.state.ticket_Id,
      TicketMailBody: "Ticket has been reassigned by @User1 to @User2",
      IsSent: 1,
      IsCustomerComment: 0,
      IsInternalComment: 1,
      MailID: 0,
      OldAgentID: this.state.oldAgentId,
      NewAgentID: this.state.agentId,
    };
    formData.append("ticketingMailerQue", JSON.stringify(paramData));

    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/MessageComment",
      headers: authHeader(),
      data: formData,
    })
      .then(function (res) {
        let status = res.data.message;
        if (status === "Success") {
          self.handleGetMessageDetails(self.state.ticket_Id);
          self.handleGetCountOfTabs(self.state.ticket_Id);
          self.handleReAssignCommentOpen();
          self.handleAssignTickets();
          self.setState({
            addReassignCmmt: "",
          });
        } else {
          NotificationManager.error(status);
          self.setState({
            addReassignCmmt: "",
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetEmailAdd() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetLogedInEmail",
      headers: authHeader(),
    })
      .then(function (res) {
        var status = res.data.status;

        var data = res.data.responseData;
        if (status) {
          self.setState({ logInEmail: data.emailID, role_Name: data.roleName });
        }
      })
      .catch((response) => {
        console.log(response);
      });
  }

  hadnleOpenKnowledage() {
    this.setState({ KnowledgeBaseModal: true });
  }

  hadnleCloseKnowledage() {
    this.setState({ KnowledgeBaseModal: true });
  }
  handleCloseKnwBasePopup = () => {

    let self = this
    self.setState({
      KnowledgeBaseModal: false
    })
  }

  handleSubmitTicket() {
    // console.log(this.state.selectetedParameters?.ResolutionStatusId,
    //   this.state.selectetedParameters?.resolutionComment)
    if (this.state.selectetedParameters.ticketStatusID == 103) {
      // if (window.localStorage.getItem('Programcode') === "campusshoes") {
      if (this.state.tenantFlags.isResolutionStatus) {
        if (
          this.state.selectetedParameters?.resolutionStatusId === 0 ||
          this.state.selectetedParameters?.resolutionStatusId === undefined
        ) {
          NotificationManager.warning("Please select resolution status");
        } else if (
          this.state.selectedResolution === "Other" &&
          this.state.selectetedParameters?.resolutionComment === ""
        ) {
          NotificationManager.warning("Please add resolution status");
        } else {
          this.hadnleOpenKnowledage();
        }
      } else {
        this.hadnleOpenKnowledage();
      }
    }
    if (this.state.selectetedParameters.ticketActionTypeID === 202) {
      if (
        this.state.ticketFields.filter(
          (x) => x.fieldName.toLowerCase() === "EscalationSource".toLowerCase()
        )[0].fieldMandatory &&
        (this.state.selectetedParameters.escalationDate == "" ||
          this.state.selectetedParameters.escalationDate == "undefined--undefined" ||
          this.state.selectetedParameters.escalationStatusId == "" ||
          this.state.selectetedParameters.escalationStatusId == undefined ||
          this.state.selectetedParameters.escalationStatusId ===
          "Select Escalation Status" ||
          this.state.selectetedParameters?.escalationStatusId === null)
      ) {
        NotificationManager.error("Please check Escalation Source and Date");
      } else {
        this.handleUpdateTicketDetails();
      }
    } else {
      this.handleUpdateTicketDetails();
    }
  }
  handleYesNoClick(ischeck) {
    if (ischeck === true) {
      this.setState({ isaddKnowledge: true });

      setTimeout(() => {
        this.handleUpdateTicketDetails();
      }, 10);
    } else {
      this.setState({ isaddKnowledge: false });
      setTimeout(() => {
        this.handleUpdateTicketDetails();
      }, 10);
    }
  }

  handleAddKnwoldgeBase() {
    const TranslationContext = this.state.translateLanguage.default;

    let self = this;
    var tempDescription = "";
    var Description = "";

    if (this.state.messageDetails.length > 0) {
      tempDescription = this.state.messageDetails[0][
        "msgDetails"
      ][0].latestMessageDetails.ticketMailBody.replace(/<[^>]+>/g, "");
      Description = tempDescription.replace(/&nbsp;/gi, " ");
    }

    var inputParam = {
      KBCODE: "",
      CategoryID: this.state.selectetedParameters.categoryID,
      SubCategoryID: this.state.selectetedParameters.subCategoryID,
      Subject: this.state.ticketDetailsData.ticketTitle,
      Description: Description || "",
      IsActive: true,
      IssueTypeID: this.state.selectetedParameters.issueTypeID,
      TicketID: this.state.ticket_Id,
      IsFromTicket: true,
      BrandID: this.state.selectetedParameters.brandID,
    };
    axios({
      method: "post",
      url: config.apiUrl + "/KnowledgeBase/AddKBByBrand",
      headers: authHeader(),
      data: inputParam,
    })
      .then(function (res) {
        var status = res.data.status;
        if (status) {
          NotificationManager.success(
            TranslationContext !== undefined
              ? TranslationContext.alertmessage.ticketupdatedsuccessfully
              : "Ticket updated successfully."
          );
          NotificationManager.success(
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.ticketaddedinknowledgebase
              : "Ticket Added in knowledgebase."
          );
          // self.props.history.push("dashboard");
        } else {
          NotificationManager.success(
            TranslationContext !== undefined
              ? TranslationContext.ticketingDashboard.ticketaddedinknowledgebase
              : "Ticket Added in knowledgebase."
          );
        }
      })
      .catch((error) => {
        console.log(error);
      });
  }
  handleGetTicketFields = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Module/GetTicketFields",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({
            ticketFields: data.ticketFieldsLst,
            tenantFlags: data.tenantFeatureConfiguration,
          });
          self.handleDisplayTicketFields();
          // if (window.localStorage.getItem('Programcode') === 'campusshoes') {
          if (data.tenantFeatureConfiguration.isResolutionStatus) {
            self.handleGetResolutionData();
          }
          if (data.tenantFeatureConfiguration.isPendingReasonStatus) {
            self.handleGetPendingReasonData();
          }
        } else {
          self.setState({ ticketFields: [] });
        }
      })
      .catch((error) => console.log(error));
  };

  handleDisplayTicketFields = () => {
    let displayField = this.state.displayTicketFields;

    let ticketFields = this.state.ticketFields;
    for (let i = 0; i < ticketFields.length; i++) {
      displayField[ticketFields[i].fieldName] = ticketFields[i].detailsPage;
    }
  };

  //handle get consulting hospital
  handleGetConsultingHospital = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetConsultingHospital",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ consultingHospitalData: data });
        } else {
          self.setState({ consultingHospitalData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  //handle get purpose of visit list
  handleGetPurposeOfVisit = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetPurposeOfVisit",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ purposeVisitData: data });
        } else {
          self.setState({ purposeVisitData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  //handle get department list.
  handleGetDepartmentName = (UnitID) => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetDepartmentName",
      headers: authHeader(),
      params: {
        UnitID: UnitID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ departmentData: data });
        } else {
          self.setState({ departmentData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  //handle get unit name list.
  handleGetUnitName = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetUnitName",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ unitNameData: data });
        } else {
          self.setState({ unitNameData: [] });
        }
      })
      .catch((error) => console.log(error));
  };

  //handle get unit city list.
  handleGetUnitCity = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetUnitCity",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ unitCitytData: data });
        } else {
          self.setState({ unitCitytData: [] });
        }
      })
      .catch((error) => console.log(error));
  };

  handleGetStatusDropDown = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/getTicketStatusList",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          //console.log(data);
          self.setState({
            TicketStatusData: data,
          });
        } else {
          self.setState({
            TicketStatusData: [],
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  //handl get lob list.
  handleGetLOB = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetLOB",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ lOBData: data });
        } else {
          self.setState({ lOBData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  // handle get complaint call list.
  handleGetComplaintCall = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetComplaintCall",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ complaintCallData: data });
        } else {
          self.setState({ complaintCallData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  //handle get customer type list.
  handleGetCustomerType = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetCustomerType",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ customerTypeData: data });
        } else {
          self.setState({ customerTypeData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  //handle get consuling doctore list.
  handleGetConsultingDoctor = (UnitID) => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetConsultingDoctor",
      headers: authHeader(),
      params: {
        UnitID: UnitID,
      },
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ consultingDoctorData: data });
        } else {
          self.setState({ consultingDoctorData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  handleTicketFieldInputDateChange = (name, e) => {
    console.log(name + " " + e);
    let selectetedParameters = this.state.selectetedParameters;
    selectetedParameters[name] = e;
    this.setState({
      selectetedParameters,
    });
  };
  handleGetEmailID = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/GetEmailID",
      headers: authHeader(),
    })
      .then(function (res) {
        let status = res.data.message;
        let data = res.data.responseData;
        if (status === "Success") {
          self.setState({ emailIDData: data });
        } else {
          self.setState({ emailIDData: [] });
        }
      })
      .catch((error) => console.log(error));
  };
  handleMailsenderID = (e) => {
    let ticketDetailsData = this.state.ticketDetailsData;
    ticketDetailsData["sendEmailID"] = e.target.value;
    this.setState({
      ticketDetailsData,
    });
  };

  handleGetProgramCode = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getCurrentSession",
      headers: authHeader(),
      params: {
        IsStore: false,
      },
    })
      .then(function (res) {
        var status = res.data.message;
        var programCode = res.data.responseData[0].programCode
          .toLowerCase()
          .replace(/[^A-Z0-9]/gi, "");

        if (status === "Success") {
          self.setState({
            programCode,
          });
        } else {
          self.setState({
            programCode: "",
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  handleGetStoreList() {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Store/StoreList",
      headers: authHeader(),
    })
      .then((res) => {
        const msg = res.data.message;
        const storeList = res.data.responseData;
        if (msg === "Success") {
          this.setState({
            storeList,
          });
        } else {
          this.setState({
            storeList: [],
          });
        }
      })
      .catch((err) => {
        console.log(err);
      });
  }

  handleSearchStore = (Value) => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getStoreByNameAndCode",
      headers: authHeader(),
      params: {
        searchText: Value,
      },
    })
      .then((res) => {
        const msg = res.data.message;
        const responseData = res.data.responseData;
        if (msg === "Success") {
          this.setState({
            selectetedParameters: {
              ...this.state.selectetedParameters,
              storeCode: responseData[0].storeCode,
              storeName: responseData[0].storeName,
              storeCity: responseData[0].cityName,
              storeAddress: responseData[0].address,
              storePinCode: responseData[0].strPinCode,
              storePhoneNo: responseData[0].phoneNumber,
              storeEmailID: responseData[0].email,
            },
          });
          if (responseData[0].phoneNumber.length < 10) {
            this.setState({
              isPhoneDisabled: false,
            });
          } else {
            this.setState({
              isPhoneDisabled: true,
            });
          }
        } else {
          this.setState({
            selectetedParameters: self.state.selectetedParameters,
          });
        }
      })
      .catch((err) => {
        console.log(err);
      });
  };

  getMktPlaceList = () => {
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/getMktFieldsList",
      headers: authHeader(),
    })
      .then((res) => {
        const msg = res.data.message;
        const mktPlaceList = res.data.responseData;
        if (msg === "Success") {
          this.setState({
            mktPlaceList,
          });
        } else {
          this.setState({
            mktPlaceList: [],
          });
        }
      })
      .catch((err) => {
        console.log(err);
      });
  };

  handleGetChannelOfPurchaseName = (channelOfPurchaseId) => {
    // let channelOfPurchaseName =
    //   this.state.ChannelOfPurchaseData !== null
    //     ? this.state.ChannelOfPurchaseData.filter((data) => {
    //         return data.channelOfPurchaseID == channelOfPurchaseId;
    //       })[0]
    //         .nameOfChannel.toLowerCase()
    //         .replace(/[^A-Z0-9]/gi, "")
    //     : [];

    let channelOfPurchaseName = [];
    if (this.state.ChannelOfPurchaseData !== null) {
      channelOfPurchaseName = this.state.ChannelOfPurchaseData.filter(
        (data) => {
          return data.channelOfPurchaseID == channelOfPurchaseId;
        }
      )[0]
        .nameOfChannel.toLowerCase()
        .replace(/[^A-Z0-9]/gi, "");

      this.setState({
        channelOfPurchaseName,
      });
    }
  };

  handleGetSearchTicket(ID) {
    let self = this;
    this.setState({ loading: true });
    axios({
      method: "post",
      url: config.apiUrl + "/Search/GetTicketsOnSearch",
      headers: authHeader(),
      data: {
        HeaderStatusId: 1002,
        ActiveTabId: 2,
        searchDataByDate: null,
        searchDataByCustomerType: {
          CustomerEmailID: "",
          CustomerMobileNo: "",
          TicketID: ID === "" ? 0 : ID,
          TicketStatusID: "",
        },
        searchDataByTicketType: null,
        searchDataByCategoryType: null,
        SearchDataByAll: null,
      },
    })
      .then(function (res) {
        let response = res.data.responseData[0].ticketSourceType;
        self.setState({
          sourceName: response,
        });
      })
      .catch((data) => {
        console.log(data);
      });
  }

  openAddOrder = () => {
    this.handleSearchCustomer();
    this.setState({
      openAddOrder: !this.state.openAddOrder,
    });
  };

  closeAddOrder = () => {
    this.setState({
      openAddOrder: !this.state.openAddOrder,
    });
  };

  handleModeOfPaymentDropDown = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Master/getPaymentMode",
      headers: authHeader(),
    })
      .then(function (res) {
        let modeData = res.data.responseData;
        self.setState({ modeData: modeData });
      })
      .catch((data) => {
        console.log(data);
      });
  };

  handleSearchCustomer = () => {
    const TranslationContext = this.state.translateLanguage.default;

    if (this.state.ticketDetailsData.customerPhoneNumber > 0) {
      let self = this;
      axios({
        method: "post",
        url: config.apiUrl + "/Customer/searchCustomer",
        headers: authHeader(),
        params: {
          SearchText: this.state.ticketDetailsData.customerPhoneNumber.trim(),
        },
      })
        .then(function (res) {
          let SearchData = res.data.responseData[0].customerID;

          self.setState({
            customerID: SearchData,
          });
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
    }
  };

  handleCKEditorStyle = () => {
    let frame = document.getElementsByTagName("iframe");
    if (frame.length > 0) {
      let iframeDocument = frame[0].contentWindow.document;
      let iframeDocumentParagraph = iframeDocument.querySelector("p");
      let iframeHeading1 = iframeDocument.querySelector("h1");
      let iframeHeading2 = iframeDocument.querySelector("h2");
      let iframeHeading3 = iframeDocument.querySelector("h3");
      let iframeHeading4 = iframeDocument.querySelector("h4");
      let iframeHeading5 = iframeDocument.querySelector("h5");
      let iframeHeading6 = iframeDocument.querySelector("h6");
      // let image_preview = iframeDocument.querySelector(".ImagePreviewBox");

      // if (image_preview !== null) {
      //   let image_text = image_preview.innerHTML;
      //   if (image_text.includes("Lorem")) {
      //     image_preview.inn;
      //   }
      // }
      if (iframeDocumentParagraph !== null) {
        iframeDocumentParagraph.style.margin = "0";
      }
      if (iframeHeading1 !== null) {
        iframeHeading1.style.margin = "0";
      }
      if (iframeHeading2 !== null) {
        iframeHeading2.style.margin = "0";
      }
      if (iframeHeading3 !== null) {
        iframeHeading3.style.margin = "0";
      }
      if (iframeHeading4 !== null) {
        iframeHeading4.style.margin = "0";
      }

      if (iframeHeading5 !== null) {
        iframeHeading5.style.margin = "0";
      }
      if (iframeHeading6 !== null) {
        iframeHeading6.style.margin = "0";
      }
    }
  };

  handleIsEditCustomerProfile = () => {
    this.setState({
      isEditCustomerProfile: true,
    });
  };
  handleIsEditProfiledetails = () => {
    this.setState({
      isEditProfiledetails: true,
    });
  };

  // handleEditCustomerProfile = () => {
  //   let customerProfileInfo = this.state.customerProfileInfo;
  //   if (!this.state.validMobileNoStatus && !this.state.validAltMobileNoStatus) {
  //     this.setState({
  //       customerInfoLoading: true,
  //     });
  //     axios({
  //       method: "post",
  //       url: config.apiUrl + "/Ticketing/UpdateticketstatusDetails",
  //       headers: authHeader(),
  //       data: {
  //         CustomerID: customerProfileInfo.customerID,
  //         CustomerName: customerProfileInfo.customerName,
  //         CustomerPhoneNumber: customerProfileInfo.customerPhoneNumber,
  //         CustomerEmailId: customerProfileInfo.customerEmailId,
  //         AltNumber: customerProfileInfo.altNumber,
  //         TicketId: this.state.ticket_Id
  //       },
  //     })
  //       .then((response) => {
  //         let message = response.data.message;
  //         if (message === "Success") {
  //           this.setState({
  //             isEditCustomerProfile: false,
  //             profilemodal: false,
  //             customerInfoLoading: false,
  //           });
  //           NotificationManager.success(
  //             "Customer Details Updated Successfully ...!"
  //           );
  //         }

  //         this.handleGetTicketDetails(this.state.ticket_Id);
  //       })
  //       .catch((error) => {
  //         this.setState({
  //           customerInfoLoading: false,
  //           isEditCustomerProfile: false,
  //           profilemodal: false,
  //         });
  //         console.log(error);
  //         NotificationManager.error("Cannot Update Customer Details ...!");
  //       });
  //   } else {
  //     NotificationManager.warning("Mobile number length is not proper ...!");
  //   }
  // };
  handleEditCustomerProfile = () => {
    let customerProfileInfo = this.state.customerProfileInfo;
    if (!this.state.validMobileNoStatus && !this.state.validAltMobileNoStatus) {
      this.setState({
        customerInfoLoading: true,
      });
      axios({
        method: "post",
        url: config.apiUrl + "/Ticketing/UpdateCustomerDetails",
        headers: authHeader(),
        data: {
          CustomerID: customerProfileInfo.customerID,
          CustomerName: customerProfileInfo.customerName,
          CustomerPhoneNumber: customerProfileInfo.customerPhoneNumber,
          CustomerEmailId: customerProfileInfo.customerEmailId,
          //AltNumber: customerProfileInfo.altNumber,
          //TicketId: this.state.ticket_Id,
          twitterUserID: this.state.customerSocialDetails.twitterUserID,
          twitterSocialMediaCustomerID: this.state.customerSocialDetails.twitterSocialMediaCustomerID,
          facebookUserID: this.state.customerSocialDetails.facebookUserID,
          facebookSocialMediaCustomerID: this.state.customerSocialDetails.facebookSocialMediaCustomerID,
          instagramUserID: this.state.customerSocialDetails.instagramUserID,
          instagramSocialMediaCustomerID: this.state.customerSocialDetails.instagramSocialMediaCustomerID,
          googleReviewUserID: this.state.customerSocialDetails.googleReviewUserID,
          googleReviewSocialMediaCustomerID: this.state.customerSocialDetails.googleReviewSocialMediaCustomerID

        },
      })
        .then((response) => {
          let message = response.data.message;
          if (message === "Success") {
            this.setState({
              isEditCustomerProfile: false,
              profilemodal: false,
              customerInfoLoading: false,
            });
            NotificationManager.success(
              "Customer Details Updated Successfully ...!"
            );
          }

          this.handleGetTicketDetails(this.state.ticket_Id);
        })
        .catch((error) => {
          this.setState({
            customerInfoLoading: false,
            isEditCustomerProfile: false,
            profilemodal: false,
          });
          console.log(error);
          NotificationManager.error("Cannot Update Customer Details ...!");
        });
    } else {
      NotificationManager.warning("Mobile number length is not proper ...!");
    }
  };


  handleEditprofiledetails = () => {
    let profiledetailinfoData = this.state.profiledetailinfoData;
    this.setState({
      customerInfoLoading: true,
    });
    axios({
      method: "post",
      url: config.apiUrl + "/Lpass/UpdateCustomerDetails",
      headers: authHeader(),
      data: {
        FirstName: profiledetailinfoData.firstName,
        LastName: profiledetailinfoData.lastName,
        DateOfBirth: profiledetailinfoData.dateOfBirth,
        MobileNo: profiledetailinfoData.mobile,
        EmailId: profiledetailinfoData.email,
        Gender: profiledetailinfoData.gender,
      },
    })
      .then((response) => {
        let message = response.data.message;
        if (message === "Success") {
          console.log("profile updated");
          this.setState({
            isEditProfiledetails: false,
            profiledetail: false,
            customerInfoLoading: false,
          });
          NotificationManager.success(
            "Customer Details Updated Successfully ...!"
          );
        }

        // this.handleGetTicketDetails(this.state.ticket_Id);
      })
      .catch((error) => {
        this.setState({
          customerInfoLoading: false,
          isEditProfiledetails: false,
          profiledetail: false,
        });
        console.log(error);
        NotificationManager.error("Cannot Update Customer Details ...!");
      });
  };

  handleCustomerProfileChange = (e) => {
    // this.setState({
    //   validMobileNoStatus: false,
    //   validAltMobileNoStatus: false
    // })
    console.log("phone no", e);
    this.setState({
      customerProfileInfo: {
        ...this.state.customerProfileInfo,
        [e.target.name]: e.target.value,
      },
    });
    if (e.target.name == "customerPhoneNumber") {
      this.validationMobileNumberCheck(e.target.value);
    } else if (e.target.name == "altNumber") {
      this.validationAltMobileNumberCheck(e.target.value);
    }
  };
  handleCustomerProfileChangeSocial = (e) => {
    let name = e.target.name
    let val = e.target.value
    console.log("name", name)
    console.log("val", val)
    if (name === "customerFacebookName") {
      this.setState({
        customerSocialDetails: {
          ...this.state.customerSocialDetails,
          facebookUserID: val
        }
      })

    }
    if (name === "customertwitName") {
      this.setState({
        customerSocialDetails: {
          ...this.state.customerSocialDetails,
          twitterUserID: val
        }
      })


    }
    if (name === "customerGoogleName") {
      this.setState({
        customerSocialDetails: {
          ...this.state.customerSocialDetails,
          googleReviewUserID: val
        }
      })

    }
    if (name === "customerInstaName") {
      this.setState({
        customerSocialDetails: {
          ...this.state.customerSocialDetails,
          instagramUserID: val
        }
      })

    }

  }
  validationMobileNumberCheck(val) {
    var regEx = /^\d+$/;
    let MobNoLen = parseInt(this.state.mobileNoLength);
    if (val.length === 0) {
      this.setState({
        validMobileNoStatus: false,
      });
    } else if (val.length == MobNoLen && regEx.test(val)) {
      this.setState({
        validMobileNoStatus: false,
      });
    } else {
      this.setState({
        validMobileNoStatus: true,
      });
    }
  }
  validationAltMobileNumberCheck(val) {
    var regEx = /^\d+$/;
    let MobNoLen = parseInt(this.state.mobileNoLength);
    if (val.length === 0) {
      this.setState({
        validAltMobileNoStatus: false,
      });
    } else if (val.length == MobNoLen && regEx.test(val)) {
      this.setState({
        validAltMobileNoStatus: false,
      });
    } else {
      this.setState({
        validAltMobileNoStatus: true,
      });
    }
  }

  handleProfiledetailsChange = (e) => {
    this.setState({
      profiledetailinfoData: {
        ...this.state.profiledetailinfoData,
        [e.target.name]: e.target.value,
      },
    });
  };

  handleGetMailFooterData = () => {
    axios({
      url: config.apiUrl + "/Ticketing/TicketFooterMailContent",
      method: "POST",
      headers: authHeader(),
    })
      .then((response) => {
        let message = response.data.message;
        if (message === "Success") {
          if (response.data.responseData.mailFooter !== null) {
            let ticketMailerFooterWithUserName = response.data.responseData.mailFooter.replace(
              "@UserName",
              this.state.loggedInProfileDetails.firstName +
              " " +
              this.state.loggedInProfileDetails.lastName
            );
            let ticketMailerFooter = ticketMailerFooterWithUserName.replace(
              "@UserMobileNumber",
              this.state.loggedInProfileDetails.mobileNo
            );
            this.setState({
              // ticketMailerFooter,
              ...this.state.mailBodyData,
              ...this.state.replymailBodyData,
              mailBodyData: ticketMailerFooter,
              replymailBodyData: ticketMailerFooter,
            });
            // console.log("mailBodyData",this.state.mailBodyData)
          }

          this.handleCKEditorStyle();
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  handleGetLoggedInProfile = () => {
    axios({
      url: config.apiUrl + "/User/GetUserProfileDetail",
      method: "POST",
      headers: authHeader(),
    })
      .then((response) => {
        let message = response.data.message;
        if (message === "Success") {
          var id = response.data.responseData[0].userId.toString();
          this.setState({
            loggedInProfileDetails: response.data.responseData[0],
            callModalValue: {
              ...this.state.callModalValue,
              agent: id,
            },
          });
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  handleViewSignature = () => {
    this.setState({
      isViewSignature: true,
    });
  };

  handleCloseViewSignature = () => {
    this.setState({
      isViewSignature: false,
    });
  };

  handleGetInitailMailCC = (TicketID) => {
    axios({
      url: config.apiUrl + "/Ticketing/GetTicketMailCc",
      method: "POST",
      headers: authHeader(),
      params: {
        TicketID,
      },
    })
      .then((response) => {
        let message = response.data.message;

        let userCC = response.data.responseData.userCC;
        if (message === "Success") {
          this.setState({
            initialMailCC: response.data.responseData,
          });
          if (userCC) {
            console.log("usercc", userCC.split(",").length);
            this.setState({
              userCcCount: userCC.split(",").length,
              mailFiled: {
                // userCC:
                //   this.state.mailFiled.userCC.length > 0
                //     ? response.data.responseData.userCC
                //     : response.data.responseData.userCC +
                //       "," +
                //       this.state.mailFiled.userCC,
                ...this.state.mailFiled,
                userCC:
                  userCC.length > 0
                    ? this.state.mailFiled.userCC !== ""
                      ? this.state.mailFiled.userCC + "," + userCC
                      : userCC
                    : this.state.mailFiled.userCC,
              },
              isReplyAllClicked: true,
            });
            // NotificationManager.success("CCs Added to the CC section..!");
          }
          // else {
          //   NotificationManager.error("No CC Found..!");
          // }
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  handleOpenCallCustomer = () => {
    this.setState({
      isCallCustomer: true,
    });
  };

  handleCloseCallCustomer = () => {
    this.setState({
      isCallCustomer: false,
    });
  };

  handleCRMRole(id) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/CRMRole/GetRolesByUserID",
      headers: authHeader(),
    })
      .then(function (res) {
        let msg = res.data.message;
        let data = res.data.responseData.modules;

        let callLogsAccess = data.filter((module) => {
          return module.moduleName === "Call Logs";
        })[0]?.modulestatus;
        let mergeStatus = data.filter((module) => {
          return module.moduleName === "TicketMerge";
        })[0]?.modulestatus;

        if (msg === "Success") {
          self.setState({
            callLogsAccess,
            mobileNoLength: res.data.responseData.mobNumberLength,
            countryCode: res.data.responseData.countryCode,
            IsCategoryBusinessUnit_Dependent:
              res.data.responseData.isCategoryBusinessUnit,
            isVCWApplicable: res.data.responseData.isVCWApplicable,
            flags: res?.data?.responseData,
            isPriorityECRSelected: res.data.responseData.isPriorityECRSelected,
            isTicketMerge_tnt: res.data.responseData.isTicketMerge,
            isTicketMerge_mdl: mergeStatus,
          });
        } else {
          localStorage.clear();
          window.location.href = "/";
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetFileSize = () => {
    let self = this;
    axios({
      method: "POST",
      url: config.apiUrl + "/Tenant/GetTenantExtraDetials",
      headers: authHeader(),
    })
      .then(function (res) {
        var status = res.data.message;
        var data = res.data.responseData.fileSize;

        if (status === "Success") {
          self.setState({
            FileSize: data,
          });
        } else {
          self.setState({
            FileSize: "",
          });
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };

  hanldeCommentOpen3(MsgDetails, type) {
    let allMsgs = this.state.messageDetails;
    let bodyMsg = allMsgs.map((item) => {
      return item.msgDetails !== null
        ? item.msgDetails.map((detail) => {
          return detail.latestMessageDetails;
        })
        : [];
    });
    let finalForwardMsgArray = [];
    for (let i = bodyMsg.length - 1; i >= 0; i--) {
      let isBreak = false;
      var tempArray = bodyMsg[i];
      for (let j = tempArray.length - 1; j >= 0; j--) {
        if (tempArray[j].mailID == MsgDetails.mailID) {
          finalForwardMsgArray.push(tempArray[j]);
          isBreak = true;
          break;
        }
        finalForwardMsgArray.push(tempArray[j]);
      }
      if (isBreak) {
        break;
      }
    }

    let finalFowardMailBody = "";
    for (let i = finalForwardMsgArray.length - 1; i >= 0; i--) {
      if (finalForwardMsgArray[i].isMailMessage) {
        finalFowardMailBody += `<p><div>From: ${finalForwardMsgArray[i].fromEmailID
          }</div><div>Date: ${finalForwardMsgArray[i].createdDate
          }</div><div>Subject:${finalForwardMsgArray[i].ticketMailSubject
          }</div><div>To: ${finalForwardMsgArray[i].toEmail
          }</div>${finalForwardMsgArray[i].ticketMailBody.trim()}</p>`;
      } else {
        finalFowardMailBody += `<p><div>Date: ${finalForwardMsgArray[i].commentDatetime
          }</div><div>Comment Added By: ${finalForwardMsgArray[i].commentAddedBy == 0
            ? finalForwardMsgArray[i].commentBy
            : "Customer"
          }</div><div>${finalForwardMsgArray[i].comment.trim()}</div></p>`;
      }
      if (i - 1 > 0) {
        finalFowardMailBody += `</br>`;
      }
    }
    if (type === "forward") {
      this.setState({
        isForward: true,
        forwardTo: "",
        CommentCollapse3: true,
        mailId: MsgDetails.mailID,
        ForWardMailBodyData: finalFowardMailBody,
        forwardMailBody: finalFowardMailBody,
        forwardAttachmentFromMail: MsgDetails.messageAttachments,
        forwardFileText:
          this.state.forwardFileText + MsgDetails.messageAttachments.length,
        mailFiled: {
          ...this.state.mailFiled,
          userCC: "",
        },
      });
    } else {
      this.setState({
        isForward: false,
        forwardTo: "",
        CommentCollapse3: true,
        mailId: MsgDetails.mailID,
        ForWardMailBodyData: finalFowardMailBody,
        forwardMailBody: finalFowardMailBody,
        // forwardMailBody: "",
        forwardAttachmentFromMail: MsgDetails.messageAttachments,
        //forwardAttachmentFromMail: [],
        forwardFileText:
          this.state.forwardFileText + MsgDetails.messageAttachments.length,
        mailFiled: {
          ...this.state.mailFiled,
          userCC: "",
        },
      });
    }
    // var cols = document.getElementsByClassName('cke_combopanel');
    // for (let i = 0; i < cols.length; i++) {
    //   cols[i].style.top = '1366px';
    // }
    // document.getElementsByClassName("cke_combopanel").style.top = "1366px"
    // setTimeout(() => {
    //   document.getElementsByClassName('cke_combopanel').style.setProperty("top", "1366px");
    // }, 500);
  }

  hanldeCommentClose3() {
    this.setState({
      CommentCollapse3: false,
      // mailFiled: { userCC: "" },
      // isSendingReplyAllEmail: false,
      ticketDetailsData: {
        ...this.state.ticketDetailsData,
        sendEmailID: "",
      },
      isReplyAllClicked: false,
      userCcCount: 0,
      forwardFileText: 0,
      forwardFile: [],
      forwardFileData: [],
    });
  }

  handleCommentCollapseOpen3() {
    // this.setState((state) => ({ CommentCollapse3: !state.CommentCollapse3 }));
    this.setState({ CommentCollapse3: !this.state.CommentCollapse3 });
    this.handleCommentCollapseClose();
  }

  onForWardCKEditorChange = (evt) => {
    var newContent = evt.editor.getData();
    this.setState({
      ForWardMailBodyData: newContent,
    });
  };

  handleGetTicketSource = () => {
    axios({
      method: "POST",
      url: config.apiUrl + "/Ticketing/GetTicketSourceDetails",
      headers: authHeader(),
    })
      .then((response) => {
        let msg = response.data.message;
        let data = response.data.responseData;
        if (msg === "Success") {
          this.setState({
            ticketSourceData: data,
          });
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };

  handleOpenResponseModal = () => {
    this.setState({
      isResponseModal: true,
    });
    this.handleGetResponseData();
  };

  handleCloseResponseModal = () => {
    this.setState({
      isResponseModal: false,
    });
  };

  handleGetResponseData = () => {
    axios({
      method: "POST",
      url: config.apiUrl + "/Ticketing/GetCollectaResponse",
      headers: authHeader(),
      params: {
        ticketId: this.state.ticket_Id,
      },
    })
      .then((response) => {
        let msg = response.data.message;
        let data = response.data.responseData;
        if (msg === "Success") {
          this.setState({
            ticketResponseData: data,
          });
        }
      })
      .catch((error) => {
        console.log(error);
      });
  };
  checkTktSession(tktCreationDate, LatestMsgDate, isCustComnt) {
    const twentyFourHrInMs = 24 * 60 * 60 * 1000;
    const twentyFourHoursAgo = Date.now() - twentyFourHrInMs;
    if (LatestMsgDate != "") {
      if (
        tktCreationDate > twentyFourHoursAgo &&
        LatestMsgDate > twentyFourHoursAgo &&
        isCustComnt == 1
      ) {
        this.setState({
          IsTktWithinSession: true,
        });
      } else if (tktCreationDate > twentyFourHoursAgo) {
        this.setState({
          IsTktWithinSession: true,
        });
      } else if (LatestMsgDate > twentyFourHoursAgo && isCustComnt == 1) {
        this.setState({
          IsTktWithinSession: true,
        });
      } else {
        this.setState({
          IsTktWithinSession: false,
        });
      }
    } else {
      if (tktCreationDate > twentyFourHoursAgo) {
        this.setState({
          IsTktWithinSession: true,
        });
      } else {
        this.setState({
          IsTktWithinSession: false,
        });
      }
    }
  }

  handleSendMessageToCustomer(
    Message,
    messagewhatsAppContent,
    imageURL,
    appointmentSendWB
  ) {
    var dataObj = {
      TenantID: this.state.TenantID,
      chatId: 0,
      StoreMgr_ID: this.state.AgentID,
      userMaster_ID: 1,
      ProgramCode: this.state.programCode,
      StoreCode: "",
      Source: this.state.sourceType,
      MobileNo: this.state.ticketDetailsData.customerPhoneNumber,
      MessageData: Message,
      WhatsAppMessage: messagewhatsAppContent || "",
      ImageURL: imageURL || "",
      HeaderToken: authHeader()["X-Authorized-Token"],
      isAttachment: false,
      attachmentData: null,
    };
    socket.emit("SendCommunicationToCustomer", dataObj);
    this.setState({
      IsDeliveredOnWhatsApp: true,
    });
  }

  handleSendCampaignToCustomer(mobileNo, templateName) {
    var Request = {
      To: mobileNo,
      TemplateName: templateName,
    };
    axios({
      method: "post",
      url: config.apiUrl + "Template/SendWhatsAppTemplateMessage",
      headers: authHeader(),
      data: JSON.stringify(Request),
    })
      .then((res) => {
        const msg = res.data.message;
        const mktPlaceList = res.data.responseData;
        if (msg === "Success") {
          this.setState({
            mktPlaceList,
            IsDeliveredOnWhatsApp: true,
            placeholderValuesArray: [],
          });
          return true;
        } else {
          this.setState({
            mktPlaceList: [],
            IsDeliveredOnWhatsApp: false,
            placeholderValuesArray: [],
          });
          return false;
        }
      })
      .catch((err) => {
        console.log(err);
      });
  }

  handleSendImageWithTemplate(
    mobileNo,
    programCode,
    imageURL,
    additionalInfo,
    templateName,
    whatsAppNo,
    language
  ) {
    var Request = {
      to: mobileNo,
      programCode: programCode,
      imageURL: imageURL,
      additionalInfo: additionalInfo,
      templateName: templateName,
      whatsAppNumber: whatsAppNo,
      language: language,
    };
    axios({
      method: "post",
      url: config.apiUrl + "/Ticketing/SendImageWithTemplateNOCTA",
      headers: authHeader(),
      data: JSON.stringify(Request),
    })
      .then((res) => {
        const msg = res.data.message;
        const mktPlaceList = res.data.responseData;
        if (msg === "Success") {
          this.setState({
            mktPlaceList,
            IsDeliveredOnWhatsApp: true,
            placeholderValuesArray: [],
          });
          return true;
        } else {
          this.setState({
            mktPlaceList: [],
            IsDeliveredOnWhatsApp: false,
            placeholderValuesArray: [],
          });
          return false;
        }
      })
      .catch((err) => {
        console.log(err);
      });
  }

  handleShowCustomerTicketsModal = (status) => {
    console.log("Clicking the eye : ", status);
    this.setState({
      showCustomerTicketsModal: true,
      showCustomerTicketsStatus: status,
    });
  };

  handleCloseCustomerTicketsModal = () => {
    console.log("closing the eye : ");
    this.setState({
      showCustomerTicketsModal: false,
      showCustomerTicketsStatus: "",
    });
  };
  handleResolution = (e) => {
    let data = this.state.selectetedParameters;
    console.log(e.target.value);
    let resolution_status = this.state.resolutionData.filter(
      (ele) => ele.name === e.target.value
    )[0]?.id;
    data[e.target.name] =
      resolution_status !== undefined ? resolution_status : 0;
    // data[e.target.name] = e.target.value
    this.setState({
      selectedResolution: e.target.value,
      selectetedParameters: data,
    });
  };
  handleGetPendingReason = (e) => {
    let data = this.state.selectetedParameters;
    data["selectedPendingReason"] = e.target.value;
    this.setState({
      // selectedPendingReason: e.target.value,
      selectetedParameters: data,
    });
  };
  handleGetresolutionComment = (e) => {
    console.log(e.target.value, "e.target.value");
    let data = this.state.selectetedParameters;
    data["resolutionComment"] = e.target.value;
    this.setState({
      resolutionComment: e.target.value,
      selectetedParameters: data,
    });
  };
  handleEscalationDate = (e) => {
    //console.log(e.target.value, "e.target.value");
    let data = this.state.selectetedParameters;
    data["escalationDate"] = e.target.value;
    this.setState(
      {
        selectetedParameters: data,
      },
      console.log("selectetedParameters", this.state.selectetedParameters)
    );
  };
  handleEscalationStatus = (e) => {
    console.log(e.target.value, "e.target.value");
    let data = this.state.selectetedParameters;
    data["escalationStatusId"] = e.target.value;
    this.setState(
      {
        escError: e.target.value,
        selectetedParameters: data,
        escalationsourceerror: "",
      },
      console.log("selectetedParameters", this.state.selectetedParameters)
    );
  };

  // handleMultiDownload = (e) => {
  //   for (var i = 0; i < this.state.attachedFiles.length; i++) {
  //     this.forceDownload(this.state.attachedFiles[i].name,
  //       this.state.attachedFiles[i].name.substring(this.state.attachedFiles[i].name.lastIndexOf('/') + 1),
  //       this.state.attachedFiles[i].name.length)
  //   }
  // }

  // forceDownload = (url, fileName) => {
  //   var xhr = new XMLHttpRequest();
  //   xhr.open("GET", url, true);
  //   xhr.responseType = "blob";
  //   xhr.onload = () => {
  //     var urlCreator = window.URL || window.webkitURL;
  //     var imageUrl = urlCreator.createObjectURL(this.response);
  //     var tag = document.createElement('a');
  //     tag.href = imageUrl;
  //     tag.download = fileName;
  //     document.body.appendChild(tag);
  //     tag.click();
  //     document.body.removeChild(tag);
  //   }
  //   xhr.send();
  // }
  handleMultiDownload = (e) => {
    for (let n = 0; n < this.state.attachedFiles.length; n++) {
      var download = this.state.attachedFiles[n];

      console.log(
        "==",
        download.name.split("/")[download.name.split("/")?.length - 1]
      );

      axios
        .get(download.name, {
          responseType: "blob",
        })
        .then((res) => {
          fileDownload(
            res.data,
            res.config.url.split("/")[res.config.url.split("/")?.length - 1]
          );
        })
        .catch((error) => {
          console.error("Error downloading file:", error);
        });
    }
  };

  // handleMultiDownload = (e) => {

  //   e.preventDefault();
  //   console.log(this.state.attachedFiles)

  //   const zip = new JSZip();

  //   // Add each file to the ZIP blob
  //   this.state.attachedFiles.forEach(download => {
  //     zip.file( download.name.split('/')[download.name.split('/')?.length - 1], download.name);
  //   });

  //   zip.generateAsync({ type: 'blob' }).then(blob => {
  //     // Create a URL for the Blob
  //     const url = URL.createObjectURL(blob);

  //     // Create an anchor element to trigger the download
  //     const a = document.createElement('a');
  //     a.href = url;
  //     a.download = 'files.zip'; // The name of the downloaded zip file
  //     a.click();

  //     // Clean up the URL and anchor element
  //     URL.revokeObjectURL(url);
  //   });

  //   // // var temporaryDownloadLink = document.createElement("a");
  //   // // temporaryDownloadLink.style.display = 'none';
  //   // // document.body.appendChild(temporaryDownloadLink);
  //   // // for (var n = 0; n < this.state.attachedFiles.length; n++) {
  //   // //   console.log(this.state.attachedFiles[n]);
  //   // //   var download = this.state.attachedFiles[n];
  //   // //   var file = new Blob(
  //   // //     [
  //   // //       download.name
  //   // //     ],
  //   // //     // { type: "image/*" }
  //   // //   );
  //   //   // console.log(download.name.split('/')[download.name.split('/')?.length - 1], "Testttt");
  //   //   temporaryDownloadLink.href = URL.createObjectURL(file);
  //   //   temporaryDownloadLink.download = download.name.split('/')[download.name.split('/')?.length - 1];
  //   //   // temporaryDownloadLink.setAttribute('href', download.name);
  //   //   // temporaryDownloadLink.setAttribute('download', download.name.split('/')[download.name.split('/')?.length - 1]);
  //   //   // // console.log(download.name.split['/']);
  //   //   // setTimeout(() => {
  //   //   temporaryDownloadLink.click();
  //   //   // }, 400);
  //   // }

  //   // document.body.removeChild(temporaryDownloadLink);
  // }

  handleSearchOrderType = (e) => {
    let self = this;
    self.setState({
      searchType: e.target.id,
    });
    if (e.target.id === "mobId") {
      let number =
        self.state.ticketDetailsData?.customerPhoneNumber?.length > 10
          ? self.state.ticketDetailsData?.customerPhoneNumber.split(
            /91(.*)/s
          )[1]
          : self.state.ticketDetailsData?.customerPhoneNumber;
      self.setState({
        mobileNOtoSearch: number,
      });
    } else {
      self.setState({
        mobileNOtoSearch: "",
      });
    }
  };
  handleOrderCreditTab = (tabId, activeTab) => {
    let self = this;
    if (self.state.isorderattached.length > 0) {
      this.handleGetProductData()

    }
    // else {
    //   document.getElementById(tabId).click();
    //   self.setState({
    //     searchType: tabId,
    //   });
    //   if (activeTab === "order_tab") {
    //     this.handleGetWebSiteOrder();
    //   }
    // }

  };
  handleExtendCancel = (val) => {
    let self = this;
    self.setState({
      isExtendCancel: val,
    });
  };
  showExtendConfirm = () => {
    let self = this;
    self.setState({
      showExtendCredit: !this.state.showExtendCredit,
    });
  };
  showCancelCreditConfirm = () => {
    let self = this;
    self.setState({
      showCancelCredit: !this.state.showCancelCredit,
    });
  };
  //order type website or shop
  handleOrderSearchType = (e) => {
    let self = this;
    document.getElementById("orderId").click();
    self.setState({
      isorderFromShop: e.target.checked,
    });
    // to get all orders
    if (e.target.checked === true && self.state.isorderattached.length > 0) {
      this.handleGetProductData();
    }
    else if (e.target.checked === false && self.state.isorderattached.length > 0) {
      self.handleGetWebSiteOrder();

    }
  };
  // onchange order search input for orders
  handleSetOrderId = (e) => {
    let self = this;
    if (self.state.isorderFromShop) {
      self.setState({
        orderNumber: e.target.value,
        orderIdTobeSearched: e.target.value,
      });
    } else {
      self.setState({
        orderIdTobeSearched: e.target.value,
      });
    }
  };
  // onchange mobile search input for orders
  getOrderMobileNo = (e) => {
    let self = this;
    if (e.target.value.length <= 10) {
      if (self.state.isorderFromShop) {
        self.setState({
          // orderNumber: e.target.value,
          mobileNOtoSearch: e.target.value,
        });
      } else {
        self.setState({
          mobileNOtoSearch: e.target.value,
        });
      }
    }
  };
  getListOfOrdersMobile = async () => {
    let self = this;

    //for unknown attached if product is available in ticket or not
    // if (self.state.ProductName.length > 0) {
    //   this.handleGetProductData()
    //   self.setState({
    //     isOrderSearchLoading: false
    //   })
    // }
    //else {
    if (self.state.isorderFromShop) {
      this.handleOrderSearchData();
    } else {
      // await this.handleGetWebSiteOrder()
      self.setState({
        mobileOrders: [],
        isOrderSearchLoading: true,
      });
      // if (self.state.selectedWebsiteOrder?.length === 0) {
      if (self.state.mobileNOtoSearch !== "") {
        if (self.state.selectedWebsiteOrder?.length === 0) {
          axios({
            method: "post",
            headers: authHeader(),
            url: config.apiUrl + "/Omuni/GetOrderDetailsByMobile/",
            data: {
              mobileNo: self.state.mobileNOtoSearch,
              countryCallingCode: "+" + self.state.countryCode,
              userType: "CUSTOMER",
            },
          }).then(function (res) {
            if (res.data.statusCode === 200) {
              self.setState({
                mobileOrders: res.data.responseData.content,
                mobileNOtoSearch: "",
                isOrderSearchLoading: false,
              });
            } else {
              NotificationManager.error(
                res.data.responseData?.message !== undefined
                  ? res.data.responseData?.message
                  : res.data.message
              );
              self.setState({
                isOrderSearchLoading: false,
              });
            }
          });
        } else {
          NotificationManager.error("Delete attached order");
          self.setState({
            isOrderSearchLoading: false,
          });
        }
      } else {
        NotificationManager.error("Mobile no should not be Empty");
        self.setState({
          isOrderSearchLoading: false,
        });
      }
    }

    // }


    // }
  };
  handleGetOrderList = async (val) => {
    let self = this;
    self.setState({
      orderList: [],
      currentSubOrder: 0,
      isOrderSearchLoading: val === "" ? true : false,
    });
    // for unknown if else if only for checking order is attached or not
    // if (self.state.ProductName.length > 0) {
    //   this.handleGetProductData()
    //   self.setState({
    //     isOrderSearchLoading: false
    //   })
    // }
    // else {
    if (self.state.isorderFromShop) {

      this.handleOrderSearchData();
    } else {
      // await this.handleGetWebSiteOrder()
      let data = val !== "" ? val : this.state.orderIdTobeSearched;
      if (data !== "") {
        if (self.state.selectedWebsiteOrder?.length === 0) {
          axios({
            method: "get",
            headers: authHeader(),
            url: config.apiUrl + "/Omuni/GetOrderDetails/" + data,
          }).then(function (res) {
            if (res.data.statusCode === 200) {
              console.log(res.data, "orderlist");
              self.setState({
                orderIdTobeSearched: "",
                orderList: res.data.responseData,
                isOrderSearchLoading: false,
              });
            } else {
              self.setState({
                orderList: [],
                isOrderSearchLoading: false,
              });
              NotificationManager.error(
                res.data.responseData?.message !== undefined
                  ? res.data.responseData?.message
                  : res.data.message
              );
            }
          });
        } else {
          NotificationManager.error("Delete attached order");
          self.setState({
            isOrderSearchLoading: false,
          });
        }
      } else {
        NotificationManager.error("Order id should not be Empty");
        self.setState({
          isOrderSearchLoading: false,
        });
      }
      // }

      // else {
      //   this.getAttchedData()
      // }
    }
    //}
  };

  formatDate = (val) => {
    let test = val;
    if (val.includes("[")) {
      test = val.split("[")[0];
    }
    let dateVal = new Date(test);
    let date = dateVal.getDate();
    let month = dateVal.getMonth() + 1;
    let year = dateVal.getUTCFullYear();
    if (month <= 9) {
      month = "0" + month;
    }
    if (date <= 9) {
      date = "0" + date;
    }
    var todayDate = date + "-" + month + "-" + year;
    return todayDate;
  };

  handleSubOderPagination = (value) => {
    let self = this;
    if (value === "prev") {
      self.setState({
        currentSubOrder: self.state.currentSubOrder - 1,
      });
    } else if (value === "next") {
      self.setState({
        currentSubOrder: self.state.currentSubOrder + 1,
      });
    }
  };
  returnCancelEligiblility = (type, itemId) => {
    let self = this;
    axios({
      method: "get",
      headers: authHeader(),
      url:
        config.apiUrl +
        "/Omuni/CheckReturnOrCancelEligibilty/" +
        type +
        "/" +
        itemId,
    }).then(function (res) {
      let data = res.data;
      if (data.statusCode === 200) {
        if (type === "cancellation") {
          self.setState({
            cancelEligbleDetail: data.responseData.data,
          });
        } else if (type === "returns") {
          self.setState({
            returnEligbleDetail: data.responseData.data,
          });
        }
        console.log(res, "Res");
      }
    });
  };
  checkCancelReturEligbile = (type, itemId) => {
    let self = this;
    self.setState({
      subOrderShow: type,
    });
    this.returnCancelEligiblility(type, itemId);
  };
  getDefaultSubOrderView = (type) => {
    let self = this;
    self.setState({
      subOrderShow: type,
    });
  };
  getItemHistory = (data, type) => {
    let self = this;
    self.getDefaultSubOrderView(type);
    self.setState({
      itemOrderHistory: data,
    });
  };
  getReturnData = (data, type) => {
    let self = this;
    self.getDefaultSubOrderView(type);
    self.setState({
      returnItemDetail: data,
    });
    self.returnCancelEligiblility("returns", data.itemId);
  };
  getCancelData = (data, type) => {
    let self = this;
    self.getDefaultSubOrderView(type);
    self.setState({
      cancelItemDetail: data,
    });
    self.returnCancelEligiblility("cancellation", data.itemId);
  };
  selectReturnReason = (e) => {
    let self = this;
    self.setState({
      returnReason: e.target.value,
    });
  };
  selectCancelReason = (e) => {
    let self = this;
    self.setState({
      cancelReason: e.target.value,
    });
  };
  handleReturnCancelInitiate = (inputParam) => {
    let self = this;

    axios({
      method: "post",
      headers: authHeader(),
      url: config.apiUrl + "/Omuni/InitiateReturnOrCancel",
      data: inputParam,
    }).then(function (res) {
      if (res.data.statusCode === 200) {
        self.setState({
          returnReason: "",
          cancelReason: "",
          isCancelsubOrder: false
        });
        this.handleGetNotesTabDetails(self.state.ticket_Id);
        NotificationManager.success(
          res.data.responseData.message !== undefined
            ? res.data.responseData.message
            : res.data.message
        );
      } else {
        self.setState({
          isCancelsubOrder: false
        })
        NotificationManager.error(
          res.data.responseData.message !== undefined
            ? res.data.responseData.message
            : res.data.message
        );
      }
    });
  };
  handleReturn = (consignment) => {
    let self = this;
    self.setState({
      isCancelsubOrder: true
    })
    let inputParam = {
      ticketId: self.state.ticket_Id.toString(),
      customerID: self.state.custID,
      customerMobileNo: self.state.orderList[0]?.customerDetails?.mobileNumber,
      customerEmail: self.state.orderList[0]?.customerDetails?.emailId,
      source: "",
      orderId: self.state.orderList[0]?.orderId,
      itemIds: [self.state.returnItemDetail?.itemId],
      status: "RETURN_INITIATED",
      reason: self.state.returnReason,
      awb: consignment?.logisticsDetails?.airwayBillNumber,
      createdAt: Date.now(),
    };
    this.handleReturnCancelInitiate(inputParam);
  };
  handleCancel = () => {
    let self = this;
    self.setState({
      isCancelsubOrder: true
    })
    let inputParam = {
      ticketId: self.state.ticket_Id.toString(),
      customerID: self.state.custID,
      customerMobileNo: self.state.orderList[0]?.customerDetails?.mobileNumber,
      customerEmail: self.state.orderList[0]?.customerDetails?.emailId,
      source: "",
      orderId: self.state.orderList[0]?.orderId,
      itemIds: [self.state.cancelItemDetail?.itemId],
      status: "CANCELLED",
      reason: self.state.cancelReason,
      createdAt: Date.now(),
    };
    this.handleReturnCancelInitiate(inputParam);
  };

  // Credit Note
  getCreditNoteMobile = (e) => {
    let self = this;
    if (e.target.value.length <= 10) {
      self.setState({
        mobileNoCreditNote: e.target.value,
      });
    }
  };
  getCreditNoteOrderId = (e) => {
    let self = this;
    self.setState({
      creditNoteOrderId: e.target.value,
    });
  };
  handleGetCreditNoteList = () => {
    let self = this;
    self.setState({
      creditNotes: [],
      isOrderSearchCreditLoading: true,
    });
    if (self.state.mobileNoCreditNote !== "") {
      axios({
        method: "get",
        url:
          config.apiUrl +
          "/Omuni/GetCreditNoteDetails/" +
          self.state.mobileNoCreditNote,
        headers: authHeader(),
      }).then(function (res) {
        if (res.data.statusCode === 200) {
          self.setState({
            creditNotes: res.data.responseData,
            mobileNoCreditNote: "",
            isOrderSearchCreditLoading: false,
          });
        } else {
          NotificationManager.error(res.data.message);
          self.setState({
            creditNotes: [],
            isOrderSearchCreditLoading: false,
          });
        }
      });
    } else {
      self.setState({
        isOrderSearchCreditLoading: false,
      });
      NotificationManager.error("Mobile number should not be Empty");
    }
  };
  handleCheckCreditNoteList = () => {
    let self = this;
    self.setState({
      creditNotes: [],
      isOrderSearchCreditLoading: true,
    });
    if (self.state.creditNoteOrderId !== "") {
      axios({
        method: "get",
        url:
          config.apiUrl +
          "/Omuni/CheckCreditNoteDetail/" +
          self.state.creditNoteOrderId,
        headers: authHeader(),
      }).then(function (res) {
        if (res.data.statusCode === 200) {
          console.log(res.data.responseData, "res.data.responseData")
          self.setState({
            creditNotes: [res.data.responseData],
            creditNoteOrderId: "",
            isOrderSearchCreditLoading: false,
          });

        } else {
          NotificationManager.error(res.data.message);
          self.setState({
            creditNotes: [],
            isOrderSearchCreditLoading: false,
          });
        }
      });
    } else {
      self.setState({
        isOrderSearchCreditLoading: false,
      });
      NotificationManager.error("Order id should not be Empty");
    }
  };
  handleCreditNoteMobilePagination = (value) => {
    let self = this;
    if (value === "prev") {
      self.setState({
        currentCreditNote: self.state.currentCreditNote - 1,
      });
    } else if (value === "next") {
      self.setState({
        currentCreditNote: self.state.currentCreditNote + 1,
      });
    }
  };
  handleNumberOfDaysExtand = (e) => {
    let self = this;
    self.setState({
      extedDays: e.target.value,
    });
  };

  handleExtandReason = (e) => {
    let self = this;
    self.setState({
      extandReason: e.target.value,
    });
  };
  handleCancelExtandReason = (e) => {
    let self = this;
    self.setState({
      cancelExtandReason: e.target.value,
    });
  };
  confirmExtand = (couponVal) => {
    let self = this;

    axios({
      method: "post",
      headers: authHeader(),
      url: config.apiUrl + "/Omuni/RevalidateCreditNoteCoupon",
      data: {
        ticketId: self.state.ticket_Id.toString(),
        customerID: self.state.custID,
        customerMobileNo: self.state.ticketDetailsData.customerPhoneNumber,
        customerEmail: self.state.ticketDetailsData.customerEmailId,
        couponCode: couponVal,
        extendValidityForDays: self.state.extedDays,
        reason: self.state.extandReason,
      },
    }).then(function (res) {
      if (res.data.statusCode === 200) {
        self.showExtendConfirm();
        self.setState({
          extedDays: 0,
          extandReason: "",
        });
        this.handleGetNotesTabDetails(self.state.ticket_Id);
        NotificationManager.success(res.data.message);
      } else {
        self.showExtendConfirm();
        NotificationManager.error(res.data.message);
      }
    });
  };
  cancelExtand = (couponVal) => {
    let self = this;
    axios({
      method: "post",
      headers: authHeader(),
      url: config.apiUrl + "/Omuni/CancelCreditNoteCoupon",
      data: {
        ticketId: self.state.ticket_Id.toString(),
        customerID: self.state.custID,
        customerMobileNo: self.state.ticketDetailsData.customerPhoneNumber,
        customerEmail: self.state.ticketDetailsData.customerEmailId,
        couponCode: couponVal,
        cancelReferenceNo: couponVal.split("R")[1],
        reason: self.state.cancelExtandReason,
      },
    }).then(function (res) {
      if (res.data.statusCode === 200) {
        self.showCancelCreditConfirm();
        self.setState({
          cancelExtandReason: "",
        });
        this.handleGetNotesTabDetails(self.state.ticket_Id);
        NotificationManager.success(res.data.message);
      } else {
        self.showCancelCreditConfirm();
        NotificationManager.error(res.data.message);
      }
    });
  };
  handleSpaces = (s) => {
    return s.replace(/([A-Z])/g, " $1").trim();
  };
  handleUnknownSourceMap() {
    let self = this;
    axios({
      method: "get",
      url: config.apiUrl + "/Order/GetOrderMaterConfiguration",
      headers: authHeader(),
    })
      .then(function (res) {
        res.data.responseData.modifiedBy = 0;
        self.setState({
          masterConfigrationUnknown: res?.data?.responseData,
        });
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handleGetProductGatogry = async () => {
    let self = this;
    await axios({
      method: "GET",
      url: config.apiUrl + "/ProductCategory/GetProductCategory",
      headers: authHeader(),
    })
      .then(function (res) {
        if (res?.data?.status === true) {
          self.setState(
            {
              productCategory: res?.data?.responseData,
            },
            console.log("productCategory", self.state?.productCategory)
          );
        }
      })
      .catch((data) => {
        console.log(data);
      });
  };
  handleGetProductDetail(catogaryId) {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/ProductCategory/GetProductDetails",
      headers: authHeader(),
      params: {
        // ProductCategoryId:  this.state.selecteProduct["superCatogary"],
        ProductCategoryId: parseInt(catogaryId),
      },
    })
      .then(function (res) {
        if (res?.data?.status === true) {
          self.setState(
            {
              productDetail: res?.data?.responseData,
            },
            console.log("productCategory", self.state?.productCategory)
          );
        }
      })
      .catch((data) => {
        console.log(data);
      });
  }

  handelDropDownCatogary = (e) => {
    let self = this;
    let name = e.target.name;
    // let Value = e.target.value;
    let val = e.target.value;
    let newData = val.split("+");
    let ValueID = newData[0];
    let ValueName = newData[1];
    var valueNameId = newData[2];
    if (name === "productDetail") {
      self.setState(
        {
          productNameIdNew: valueNameId,
          productdetailunk: ValueName,
        },
        console.log("productNameIdNew", self.state.productNameIdNew)
      );
    }
    //
    if (ValueID !== "Select") {
      var data = self.state.selectedproduct;

      data["invoiceNO"] = self.state.selectedInvoiceNo;

      if (name === "superCategory") {
        self.handleGetProductDetail(ValueID);
        data[name] = ValueName;
        data["superCategoryId"] = ValueID;
        data["productDetailId"] = "";
        data["productCodeId"] = "";
        data.codeName = "";
        data.productDetail = "";
        self.setState(
          {
            selectedproduct: data,
            //sum
            // productdetailunk:,
            // codeNameUnk:,
            superCategoryUnk: ValueName,

            itemCode: [],
          },
          console.log(
            "superCategory",
            self.state.selectedproduct.superCategory,
            "===",
            data
          )
        );
      }
      if (name === "productDetail") {
        data[name] = ValueName;
        data["productDetailId"] = ValueID;
        let filterItemCode = self.state.productDetail.filter(
          (a, i) => a.productCategoryMappingId === parseInt(ValueID)
        );
        console.log("filterItemCode", filterItemCode)
        data["productCodeId"] = "";
        data.codeName = "";
        if (filterItemCode.length === 1) {
          data[name] = filterItemCode[0].productName;
          data["productCodeId"] = filterItemCode[0].productCodeId;
          data["productNameId"] = filterItemCode[0].productNameId;
        }
        self.setState({
          itemCode: filterItemCode,
          selectedproduct: data,
          showProductDetails: false,
          codeNameUnk: filterItemCode[0].codeName,
          hidebtnAdd: true
        });
      }
      if (name === "codeName") {
        data[name] = ValueName;
        data["productCodeId"] = ValueID;
        self.setState({
          showItemCode: false,
          selectedproduct: data,
          //codeNameUnk: this.state.itemCode[0].codeName

        });
      }
    }
    //new bug solving
    if (val === "Select") {
      self.setState({
        //productDetail: [],
        itemCode: []
      })

    }
  };

  handelAddProduct = () => {
    let self = this
    let selectedData = this.state.selectedproduct;
    console.log("selectedData", selectedData)
    if (
      selectedData?.productCodeId &&
      selectedData?.productCodeId !== "" &&
      selectedData?.productDetailId &&
      selectedData?.productDetailId !== "" &&
      selectedData?.superCategoryId &&
      selectedData?.superCategoryId !== ""
    ) {
      //  this.setState({ loading: true });
      axios({
        method: "post",
        url: config.apiUrl + "/Order/InsertOrderItems",
        headers: authHeader(),
        data: [
          {
            orderItemID: 0,
            orderMasterID: parseInt(this.state.orderMasterIDNew),
            itemName: "",
            invoiceNo: "",
            invoiceNumber: "",
            invoiceDate: "2023-08-28",
            itemCount: 0,
            itemPrice: 0,
            pricePaid: 0,
            createdBy: 0,
            createdDate: "2023-08-28",
            modifyBy: 0,
            modifyDate: "2023-08-28",
            size: "",
            requireSize: "",
            discount: 0,
            articleNumber: "",
            articleName: "",
            isCheck: true,
            paymentMode: "",
            superProductCategoryId: this.state.selectedproduct.superCategoryId,
            productNameId: this.state.productNameIdNew,
            productCodeId: this.state.selectedproduct.productCodeId,
          },
        ],
      })
        .then(function (res) {
          let msg = res.data.message
          if (msg === "Success") {
            let data = res.data.responseData;
            // data.split("|")
            let newsplit = data.split("|");
            console.log("ababc", newsplit[0]);
            selectedData.orderItemID = newsplit[0];
            console.log("res.data item", selectedData);
            self.setState({

            })

          }


          // let self = this
          // self.setState({ loading: false });
          // if (data.status === true) {
          //   NotificationManager.success(
          //     "Attach Order Success"
          //   );
          // }
        })
        .catch((data) => {
          console.log(data);
        });

      let dataObj = this.state.attchData;
      dataObj.push(selectedData);
      console.log("dataObj", dataObj)
      this.setState({
        attchData: dataObj,
        selectedproduct: {},
        // productDetail:[],
        itemCode: [],
      });
      console.log(this.state.attchData, "attchData");
    } else {
      NotificationManager.error("Please Select Field To Add.");
    }
  };
  handleUnknowItemproductdata = () => {
    if (this.state.productdetailunk.length > 0 && this.state.superCategoryUnk.length > 0) {
      let obj = {
        orderItemID: 0,
        orderMasterID: 0,
        itemName: "",
        invoiceNo: "",
        invoiceNumber: "",
        invoiceDate: "2023-08-28",
        itemCount: 0,
        itemPrice: 0,
        pricePaid: 0,
        createdBy: 0,
        createdDate: "2023-08-28",
        modifyBy: 0,
        modifyDate: "2023-08-28",
        size: "",
        requireSize: "",
        discount: 0,
        articleNumber: "",
        articleName: "",
        isCheck: true,
        paymentMode: "",
        superProductCategoryId: this.state.selectedproduct.superCategoryId,
        superProductCategoryId: this.state.newSupercategoryID,

        productNameId: this.state.productNameIdNew,
        productCodeId: this.state.selectedproduct.productCodeId,
        productDetail: this.state.productdetailunk,
        codeName: this.state.codeNameUnk,
        superCategory: this.state.superCategoryUnk,
      }
      let arr = this.state.attchData
      arr.push(obj)
      this.setState({
        attchData: arr,
        hidebtnAdd: false,
        forUnknowNewFlagAttach: true,
        selectedOption: 'Select',
        // newUnknowitemarr: this.state.attchData
      }, () => {
        console.log("this.state.newUnknowitemarr", this.state.newUnknowitemarr)
      })
      setTimeout(() => {
        const modifiedData = this.state.attchData.map(item => {
          item.isCheck = true;
          return item;
        });
        this.setState({
          newUnknowitemarr: modifiedData,
          //productDetail: []
        })

        console.log("h", modifiedData);


      }, 100);
      NotificationManager.success("Item Added Successfully")

    }
    else {
      NotificationManager.error("Please select item")
    }


  }
  handleSuperCategoryDropdown = (e) => {
    let self = this
    let val = e.target.value
    let dataSplit = val.split("+")
    if (val === "Select") {
      self.setState({
        productDetail: [],
        selectedOption: 'Select',
        itemCode: []
      })

    }
    else {
      self.handleGetProductDetail(dataSplit[0]);
      self.setState({
        superCategoryUnk: dataSplit[1],
        newSupercategoryID: dataSplit[0],
        selectedOption: dataSplit[1],
        itemCode: []
      })

    }

  }
  // handleProductItemName = (e) => {
  //   let self = this
  //   let val = e.target.value
  //   let dataSplit = val.split("+")
  //   console.log("dataSplit", dataSplit)
  //   if (val === "Select") {
  //     // self.setState({
  //     //   productDetail: []
  //     // })

  //   }
  //   else {
  //     //self.handleGetProductDetail(dataSplit[0]);

  //   }

  // }

  handleSaveProductInOrder() {
    //Need to implement api/Order/InsertOrderItems multiple item save in Attach button
    let self = this
    if (this.state.attchData.length == 0) {

      NotificationManager.error("Please Attach Atleast one item")
    } else {
      this.handleAttachProductData();
      self.setState({
        forUnknowNewFlagAttach: false
      })

    }


  }

  // new selecte arrowHandle
  newOpenSelectedItemData = () => {
    //  let self = this;
    this.setState({
      isAttachProduct: true,
    });
    this.handleGetProductData();
    // this.newGetOderItemDataList(e, invoiceNumber, rowData)
  };

  // new order radio button handler
  newGetOderItemDataList(e, invoiceNumber, rowData) {
    if (e.target.checked) {
      let currentSelectedInvoiceNo = this.state.selectedInvoiceNo;
      // currentSelectedInvoiceNo += invoiceNumber;
      currentSelectedInvoiceNo =
        invoiceNumber !== "" ? invoiceNumber : this.state.selectedInvoiceNo;
      this.setState({
        // SelectedAllOrder: [],
        SelectedAllItem: [],
        OrderSubItem: [],
        selectedInvoiceNo: currentSelectedInvoiceNo,
        CheckBoxAllOrder: {},
      });

      let self = this;
      axios({
        method: "post",
        // url: config.apiUrl + "/Order/getOrderItemDetailsList",
        url: config.apiUrl + "/Order/getOrderItemDetailsListWithBrand",
        headers: authHeader(),
        data: {
          OrderMasterID: rowData.orderMasterID,
          OrderNumber: rowData.invoiceNumber,
          CustomerID: this.state.custID,
          StoreCode: rowData.storeCode,
          InvoiceDate: rowData.invoiceDate,
          brandCode: (this.state.selectetedParameters.brandID).toString()
        },
      })
        .then(function (res) {
          let Msg = res.data.message;
          let data = res.data.responseData;
          if (Msg === "Success") {
            self.setState({
              OrderSubItem: data,
              attchData: data,
            });

            var selectedInvoiceNo = currentSelectedInvoiceNo;
            const newSelected = Object.assign({}, self.state.CheckBoxAllOrder);
            if (invoiceNumber !== "") {
              newSelected[invoiceNumber] = !self.state.CheckBoxAllOrder[
                invoiceNumber
              ];
            }
            self.setState({
              CheckBoxAllOrder: newSelected,
              selectedInvoiceNo,
            });
            var selectedRow = [];
            // var CselectedRow = [];
            var CselectedRow = [];
            // if (self.state.SelectedAllOrder.length === 0) {
            selectedRow.push(rowData);
            // selectedRow = rowData
            // var Order_Master = self.state.OrderSubItem.filter(
            var Order_Master = data.filter(
              (x) => x.invoiceNumber === invoiceNumber
            );
            console.log(Order_Master, "Order_Master");
            if (Order_Master.length > 0) {
              var objCheckBoxAllItem = new Object();
              for (let j = 0; j < Order_Master.length; j++) {
                objCheckBoxAllItem[Order_Master[j].orderItemID] = true;

                CselectedRow.push(Order_Master[j]);
              }
              self.setState({
                CheckBoxAllItem: objCheckBoxAllItem,
              });
            }
            if (invoiceNumber !== "") {
              self.setState({
                SelectedAllOrder: selectedRow,
                SelectedAllItem: CselectedRow,
              });
            }
            // }
            // else {

            //   selectedRow.push(rowData);
            //   for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
            //     // var Order_Master = self.state.OrderSubItem.filter(
            //     var Order_Master = data.filter(
            //       (x) => x.invoiceNumber === invoiceNumber
            //     );
            //     if (Order_Master.length > 0) {
            //       var objCheckBoxAllItem = new Object();
            //       for (let j = 0; j < Order_Master.length; j++) {
            //         objCheckBoxAllItem[Order_Master[j].orderItemID] = false;
            //       }
            //       self.setState({
            //         CheckBoxAllItem: objCheckBoxAllItem,
            //       });
            //     }

            //     self.setState({
            //       SelectedAllOrder: selectedRow,
            //       SelectedAllItem: [],
            //     });
            //     break;
            //   }
            // }

            // self.setState({
            //   SelectedAllOrder: selectedRow,
            //   SelectedAllItem: CselectedRow,
            // });
          } else {
            var selectedInvoiceNo = currentSelectedInvoiceNo;
            const newSelected = Object.assign({}, self.state.CheckBoxAllOrder);
            newSelected[invoiceNumber] = !self.state.CheckBoxAllOrder[
              invoiceNumber
            ];
            self.setState({
              CheckBoxAllOrder: newSelected,
              selectedInvoiceNo,
            });
            var selectedRow = [];
            var CselectedRow = [];
            if (self.state.SelectedAllOrder.length === 0) {
              selectedRow.push(rowData);
              // selectedRow = rowData
              // var Order_Master = self.state.OrderSubItem.filter(
              var Order_Master = data.filter(
                (x) => x.invoiceNumber === invoiceNumber
              );
              if (Order_Master.length > 0) {
                var objCheckBoxAllItem = new Object();
                for (let j = 0; j < Order_Master.length; j++) {
                  objCheckBoxAllItem[Order_Master[j].orderItemID] = true;

                  CselectedRow.push(Order_Master[j]);
                }
                self.setState({
                  CheckBoxAllItem: objCheckBoxAllItem,
                });
              }
              self.setState({
                SelectedAllOrder: selectedRow,
                SelectedAllItem: CselectedRow,
              });
            } else {
              selectedRow.push(rowData);
              for (var i = 0; i < self.state.SelectedAllOrder.length; i++) {
                // var Order_Master = self.state.OrderSubItem.filter(
                var Order_Master = data.filter(
                  (x) => x.invoiceNumber === invoiceNumber
                );
                if (Order_Master.length > 0) {
                  var objCheckBoxAllItem = new Object();
                  for (let j = 0; j < Order_Master.length; j++) {
                    objCheckBoxAllItem[Order_Master[j].orderItemID] = false;
                  }
                  self.setState({
                    CheckBoxAllItem: objCheckBoxAllItem,
                  });
                }

                self.setState({
                  SelectedAllOrder: selectedRow,
                  SelectedAllItem: [],
                });
                break;
              }
            }

            // self.setState({
            //   CheckBoxAllOrder: newSelected,
            //   selectedInvoiceNo,
            //   // OrderSubItem: [],
            // });
          }
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      let selectedInvoiceNo = this.state.selectedInvoiceNo;
      if (selectedInvoiceNo.includes(invoiceNumber)) {
        selectedInvoiceNo = selectedInvoiceNo.replace(invoiceNumber);
      }

      let SelectedAllOrder =
        this.state.SelectedAllOrder.length > 0
          ? this.state.SelectedAllOrder.filter((item) => {
            return item.invoiceNumber !== invoiceNumber;
          })
          : this.state.SelectedAllOrder;

      this.setState({
        SelectedAllOrder: SelectedAllOrder,
        SelectedAllItem: [],
        OrderSubItem: [],
        selectedInvoiceNo: selectedInvoiceNo,
      });
    }
  }
  newHandleGetOderItemData(e, invoiceNumber, rowData) {
    this.setState({
      orderMasterIDNew: rowData?.orderMasterID,
      isDataAttached: false,
      OrderSubItem: [],
      expanded: invoiceNumber !== "" ? {} : "1",
    });
    this.newGetOderItemDataList(e, invoiceNumber, rowData);
  }

  // new order remove selected button
  newhandleDeleteSelectedItem(e, invoiceNumber, rowData) {
    console.log(this.state.selectedInvoiceNo, "this.state.selectedInvoiceNo");
    this.setState({
      orderMasterIDNew: rowData.orderMasterID,
      expanded: {},
    });

    if (e.target.checked) {
      this.newHandleGetOderItemData(e, invoiceNumber, rowData);
    } else {
      let selectedinvoiceNo = this.state.selectedInvoiceNo;
      if (selectedinvoiceNo.includes(invoiceNumber)) {
        selectedinvoiceNo = selectedinvoiceNo.replace(invoiceNumber);
      }

      this.handleDeleteOrder();

      let SelectedAllOrder =
        this.state.SelectedAllOrder.length > 0
          ? this.state.SelectedAllOrder.filter((item) => {
            return item.invoiceNumber !== invoiceNumber;
          })
          : this.state.SelectedAllOrder;

      this.setState({
        SelectedAllOrder: SelectedAllOrder,
        SelectedAllItem: [],
        OrderSubItem: [],
        CheckBoxAllItem: {},
        selectedInvoiceNo:
          selectedinvoiceNo !== "undefined" ? selectedinvoiceNo : "",
      });
    }
  }
  // handleorderItemsmultiselect
  checkmultiIndividualItem = (orderItemID, rowData) => {
    // console.log(rowData?.rowData, "rowData?.orderItemIDm");
    // console.log(this.state.CheckBoxAllItem, "CheckBoxAllItem");
    console.log(this.state.SelectedAllItem, "SelectedAllItem");
    let newSelected = Object.assign({}, this.state.CheckBoxAllItem);
    newSelected[orderItemID] = !this.state.CheckBoxAllItem[orderItemID];
    this.setState({
      CheckBoxAllItem: orderItemID ? newSelected : false,
    });
    // console.log(Object.keys(newSelected).every(function(k){ return newSelected[k] === false }), 'type')
    // console.log(Object.values(newSelected).every(item => item === false));
    // console.log(Object.keys(newSelected)?.length, "newSelected.length");
    // if (Object.values(newSelected).every(item => item === true) && Object.keys(newSelected)?.length === this.state.OrderSubItem.length) {
    // if (Object.values(newSelected).every(item => item === false) === false) {
    //   this.setState({
    //     selectedInvoiceNo: rowData?.invoiceNumber
    //   })
    // }
    // else {
    //   this.setState({
    //     selectedInvoiceNo: ""
    //   })
    // }
    var selectedRow = [];
    if (this.state.SelectedAllItem.length === 0) {
      selectedRow.push(rowData);
      this.setState({
        SelectedAllItem: selectedRow,
      });

      var Order_Master = this.state.OrderSubItem.filter(
        (x) => x.orderItemID === selectedRow[0].orderItemID
      );
      if (Order_Master.length === selectedRow.length) {
        let newSelectedOrder = Object.assign({}, this.state.CheckBoxAllOrder);
        newSelectedOrder[Order_Master[0].orderItemID] = !this.state
          .CheckBoxAllOrder[Order_Master[0].orderItemID];
        this.setState({
          CheckBoxAllOrder: Order_Master[0].orderItemID
            ? newSelectedOrder
            : false,
        });
        var data_master = this.state.orderDetailsData.filter(
          (y) => y.invoiceNumber === Order_Master[0].invoiceNumber
        );
        if (data_master.length > 0) {
          // var MastOrd = this.state.SelectedAllOrder;
          var MastOrd = data_master[0];
          // MastOrd.push(data_master[0]);
          this.setState({
            SelectedAllOrder: data_master,
          });
        }
      }
    } else {
      if (newSelected[orderItemID] === true) {
        for (var i = 0; i < this.state.SelectedAllItem.length; i++) {
          // if (
          //   this.state.SelectedAllItem[i].orderItemID !==
          //   this.state.SelectedAllItem[i].orderItemID
          // ) {
          selectedRow = this.state.SelectedAllItem;
          selectedRow.push(rowData);
          // this.setState({
          //   SelectedAllItem: selectedRow
          // });
          // } else {
          //   selectedRow = [];
          //   selectedRow.push(rowData);
          // }

          var Order_Master = this.state.OrderSubItem.filter(
            (x) => x.orderItemID === this.state.SelectedAllItem[i].orderItemID
          );
          if (Order_Master.length === selectedRow.length) {
            let newSelectedOrder = Object.assign(
              {},
              this.state.CheckBoxAllOrder
            );
            newSelectedOrder[Order_Master[0].orderItemID] = !this.state
              .CheckBoxAllOrder[Order_Master[0].orderItemID];
            this.setState({
              CheckBoxAllOrder: Order_Master[0].orderItemID
                ? newSelectedOrder
                : false,
            });
            var data_master = this.state.orderDetailsData.filter(
              (y) => y.invoiceNumber === Order_Master[0].invoiceNumber
            );
            if (data_master.length > 0) {
              // var MastOrd = this.state.SelectedAllOrder;
              var MastOrd = data_master;
              // MastOrd.push(data_master[0]);
              this.setState({
                SelectedAllOrder: MastOrd,
              });
            }
          }

          break;
        }
      } else {
        for (var j = 0; j < this.state.SelectedAllItem.length; j++) {
          if (
            this.state.SelectedAllItem[j]?.orderItemID === rowData?.orderItemID
          ) {
            console.log(j, "j");
            console.log(
              this.state.SelectedAllItem[j]?.orderItemID ===
              rowData?.orderItemID
            );
            selectedRow = this.state.SelectedAllItem;
            selectedRow.splice(j, 1);
            // this.setState({
            //   SelectedAllItem: selectedRow
            // });
            var Order_Master = this.state.OrderSubItem.filter(
              (x) => x.orderItemID === rowData.orderItemID
            );

            if (Order_Master.length !== selectedRow.length) {
              let newSelectedOrder = Object.assign(
                {},
                this.state.CheckBoxAllOrder
              );
              newSelectedOrder[Order_Master[0].orderItemID] = false;
              this.setState({
                CheckBoxAllOrder: Order_Master[0].orderItemID
                  ? newSelectedOrder
                  : false,
              });
              // if (selectedRow?.length === 0) {
              //   this.setState({
              //     SelectedAllOrder: [],
              //   });
              // }
              // var data_master = this.state.orderDetailsData.filter(
              //   (y) => y.orderItemID === Order_Master[0].orderItemID
              // );
              // var GetIndex = this.state.orderDetailsData.findIndex(
              //   (y) => y.orderItemID === Order_Master[0].orderItemID
              // );
              // if (data_master.length > 0) {
              //   var MastOrd = this.state.SelectedAllOrder;
              //   MastOrd.splice(GetIndex, 1);
              //   this.setState({
              //     SelectedAllOrder: MastOrd,
              //   });
              // }
            }

            break;
          }
        }
      }
    }
    this.setState({
      SelectedAllItem: selectedRow,
      // SelectedAllOrder: selectedRow,
    });
  };
  typeTwoFormatDate(val) {
    // 2023-09-01T11:10:06Z[Etc/UTC]
    let test = val;
    if (val.includes("Z")) {
      test = val.split("Z")[0];
    }
    // let dateVal = new Date(test);
    // let date = dateVal.getDate()
    // let month = dateVal.getMonth() + 1
    // let year = dateVal.getUTCFullYear()
    // if (month <= 9) {
    //   month = "0" + month
    // }
    // if (date <= 9) {
    //   date = "0" + date
    // }
    // var todayDate = date + '-' + month + '-' + year
    var todayDate = test;
    return todayDate;
  }
  handleGetWebSiteOrder = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Order/getWebsiteOrderDetailByTicketID",
      headers: authHeader(),
      params: {
        TicketID: this.state.ticket_Id,
      },
    }).then(function (res) {
      if (res.data.statusCode === 200) {
        self.setState({
          selectedWebsiteOrder: res.data.responseData,
        }, () => { console.log("this.state.selectedWebsiteOrder", self.state.selectedWebsiteOrder) });
        self.getAttchedData();
      } else
        self.setState({
          selectedWebsiteOrder: [],
          isOrderSearchLoading: false,
        });
      console.log(res.data, "res.Data");
    });
  };
  newHandleOminiAttachProductData = () => {
    let self = this;
    if (this.state.orderList?.length > 0) {
      const formData = new FormData();
      /// For Attached order
      var OrderData = [];
      var order_data = this.state.orderList;
      // this.state.orderList[0]?.orderId
      if (this.state.orderList.length > 0) {
        for (let i = 0; i < order_data.length; i++) {
          let obj = {
            OrderMasterID: 0,
            OrderNumber: order_data[i].orderId,
            PurchaseDate: this.typeTwoFormatDate(order_data[i].orderDate),
            OrderPrice: 0,
            PricePaid: 0,
            CustomerID: this.state.custID,
            Discount: 0,
            StoreCode: "",
            TransactionDate: this.typeTwoFormatDate(order_data[i].orderDate),
            ModeOfPaymentID: 1,
            TicketSourceID: this.state.selectetedParameters.channelOfPurchaseID,
            orderSourceId: 1,
            orderSource: "omuni"
          };
          OrderData.push(obj);
        }
      } else {
        OrderData = null;
      }
      /// For Attached OrderItem data
      var order_itemData = [];
      if (self.state.selectedOminiItem?.length > 0) {
        for (let i = 0; i < self.state.selectedOminiItem?.length; i++) {
          var item_data = {};
          item_data["OrderItemID"] = 0;
          item_data["OrderMasterID"] = 0;
          item_data["ItemName"] =
            self.state.selectedOminiItem[i]?.itemData.product.description;
          item_data["InvoiceNumber"] = order_data[0].orderId;
          item_data["InvoiceDate"] = this.typeTwoFormatDate(
            order_data[0].orderDate
          );
          item_data["ItemCount"] = null;
          item_data["ItemPrice"] = parseFloat(
            self.state.selectedOminiItem[i]?.itemData.itemPricingDetails.value
          );
          item_data["PricePaid"] = parseFloat(
            self.state.selectedOminiItem[i]?.itemData.itemPricingDetails
              .netAmount
          );
          item_data["Size"] = null;
          item_data["RequireSize"] = "0";
          item_data["Discount"] = 0;
          item_data["ArticleNumber"] =
            self.state.selectedOminiItem[i]?.itemData.product.sku;
          item_data["ArticleName"] =
            self.state.selectedOminiItem[i]?.itemData.product.description;
          item_data["isCheck"] = true;
          item_data["subOrderNumber"] =
            self.state.selectedOminiItem[i]?.itemData.itemId;
          item_data["consignmentId"] = self.state.selectedOminiItem[i]?.cId;
          order_itemData.push(item_data);
        }
      } else {
        for (let i = 0; i < order_data[0]?.consignments?.length; i++) {
          for (
            let j = 0;
            j < order_data[0]?.consignments[i]?.items?.length;
            j++
          ) {
            var item_data = {};
            item_data["OrderItemID"] = 0;
            item_data["OrderMasterID"] = 0;
            item_data["ItemName"] =
              order_data[0].consignments[i].items[j].product.description;
            item_data["InvoiceNumber"] = order_data[0].orderId;
            item_data["InvoiceDate"] = this.typeTwoFormatDate(
              order_data[0].orderDate
            );
            item_data["ItemCount"] = parseInt(
              order_data[0].consignments[i].itemCount
            );
            item_data["ItemPrice"] = parseFloat(
              order_data[0].consignments[i].items[j].itemPricingDetails.value
            );
            item_data["PricePaid"] = parseFloat(
              order_data[0].consignments[i].items[j].itemPricingDetails
                .netAmount
            );
            item_data["Size"] = null;
            item_data["RequireSize"] = "0";
            item_data["Discount"] = 0;
            item_data["ArticleNumber"] =
              order_data[0].consignments[i].items[j].product.sku;
            item_data["ArticleName"] =
              order_data[0].consignments[i].items[j].product.description;
            item_data["isCheck"] = true;
            item_data["subOrderNumber"] =
              order_data[0].consignments[i].items[j].itemId;
            item_data["consignmentId"] =
              order_data[0].consignments[i]?.consignmentId;
            order_itemData.push(item_data);
          }
        }
      }
      let finalOrderData = { orderMaster: OrderData };
      formData.append("orderDetails", JSON.stringify(finalOrderData));
      formData.append("orderItemDetails", JSON.stringify(order_itemData));
      formData.append("OrderID", 0);
      formData.append("TicketId", this.state.ticket_Id);
      axios({
        method: "post",
        url: config.apiUrl + "/Order/attachorder",
        headers: authHeader(),
        data: formData,
      })
        .then(function (res) {
          let status = res.data.message;

          if (status === "Success") {
            NotificationManager.success("Product attached successfully.");
            // this.setState({

            // })
            self.handleGetWebSiteOrder();
            // this.handleOrderTableClose();
            // this.handleGetTicketDetails(this.state.ticket_Id);
            // this.setState({
            //   SelectedAllOrder: [],
            //   orderDetailsData: [],
            //   CheckBoxAllItem: {}
            // });
          } else {
            NotificationManager.error("Product not attached.");
          }
        })
        .catch((data) => {
          console.log(data);
        });
    } else {
      NotificationManager.error("Please select atleast one order.");
    }
  };
  handleDeleteOminiOrder = () => {
    var user_ID = JSON.parse(localStorage.getItem("UserProfile"));
    var orderIds = 0;
    let self = this;
    // self.setState({ loading: true });
    axios({
      method: "post",
      url: config.apiUrl + "/Order/cancelOrder",
      headers: authHeader(),
      data: {
        ticketId: self.state.ticket_Id,
        modifyBy: user_ID.agentId,
      },
    })
      .then(function (res) {
        let data = res.data;
        console.log("res.data", res.data);
        if (data.status === true) {
          self.setState({
            selectedWebsiteOrder: [],
            attachedWebData: [],
          });
          NotificationManager.success(data.message);
        }
        // this.setState({ loading: false });
      })
      .catch((data) => {
        console.log(data);
      });
  };
  // to get attached items id of omini(website order)
  getAttchedData = () => {
    let self = this;
    axios({
      method: "get",
      headers: authHeader(),
      url:
        config.apiUrl +
        "/Omuni/GetOrderDetails/" +
        self.state.selectedWebsiteOrder[0]?.invoiceNumber,
    }).then(function (res) {
      if (res.data.statusCode === 200) {
        var respData = res.data.responseData;
        var consignments = respData[0]?.consignments;
        consignments.forEach((data, i) => {
          if (
            self.state.selectedWebsiteOrder[0]?.orderItems.filter(
              (ele) => ele.consignmentId === data?.consignmentId
            )?.length === 0
          ) {
            respData[0].consignments.splice(i, 1);
            // console.log(respData[0]?.consignments, "consignment");
          } else {
            let selectedItems = respData[0].consignments[
              i
            ].items.filter((elem) =>
              self.state.selectedWebsiteOrder[0]?.orderItems.find(
                ({ subOrderNumber }) => elem.itemId === subOrderNumber
              )
            );
            respData[0].consignments[i].items = selectedItems;
            // console.log(respData, "respData");
          }
        });
        // console.log(respData);
        self.setState({
          orderIdTobeSearched: "",
          attachedWebData: respData,
          isOrderSearchLoading: false,
        });
      } else {
        self.setState({
          attachedWebData: [],
          isOrderSearchLoading: false,
        });
        NotificationManager.error(
          res.data.responseData?.message !== undefined
            ? res.data.responseData?.message
            : res.data.message
        );
      }
    });
  };

  // to selecte/deselct items of omini
  handleOminiSelectedItem = (e, consignmentId, Item) => {
    let self = this;
    let selectedItems = self.state.selectedOminiItem;
    if (e.target.checked) {
      let selectData = {};
      selectData.cId = consignmentId;
      selectData.itemData = Item;
      selectData.itemID = Item.itemId;
      selectedItems.push(selectData);
      self.setState({
        selectedOminiItem: selectedItems,
      });
      console.log(selectedItems, "checked");
    } else {
      selectedItems.forEach((element, i) => {
        if (element.itemData?.itemId === Item?.itemId) {
          selectedItems.splice(i, 1);
          self.setState({
            selectedOminiItem: selectedItems,
          });
          console.log(selectedItems, "unchecked");
        }
      });
    }
  };

  // sms template implementation
  handleGetSMSData = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Template/GetTemplatesWithDetails",
      headers: authHeader(),
    })
      .then(function (res) {
        if (res.data.statusCode === 200) {
          self.setState({
            smsdata: res.data.responseData,
          });
          //console.log("SMSTICKETDATA", res.data.responseData)
        } else {
          self.setState({
            smsData: [],
            loading: false,
          });
        }
      })
      .catch((error) => console.log(error));
  };
  handleSendSms = () => {
    let self = this;
    axios({
      method: "post",
      url: config.apiUrl + "/Template/SendSMS",
      headers: authHeader(),
      data: {
        vendorID: this.state.venderIDOnly,
        templateID: this.state.templateID,
        vendorTemplateID: this.state.vendorTemplateID,
        message: this.state.textdescription,
        to: this.state.customerProfileInfo.customerPhoneNumber.toString(),
        ticketID: this.state.ticketIDsend,
        createdBy: 0,
      },
    })
      .then(function (res) {
        if (res.data.statusCode === 200) {
          NotificationManager.success(res.data.message);
          self.setState({
            venderIDOnly: "",
            templateID: "",
            textdescription: "",
            isSMS: false,
          });
        } else {
          NotificationManager.info(res.data.message);
          self.setState({
            loading: false,
          });
        }
      })
      .catch((error) => console.log(error));
  };
  handleGoogleevent = (evt) => {
    var newContent = evt.target.value;
    this.setState({
      googlereviewbody: newContent,
    });
  };
  handleInstaevent = (evt) => {
    var newContent = evt.target.value;
    this.setState({
      instareviewbody: newContent,
    });
  };
  handleFacebookevent = (evt) => {

    var newContent = evt.target.value;
    this.setState({
      facebookreviewbody: newContent,
    });
  };
  handleTagFB = () => {
    let self = this
    if (this.state.sourceName === "Facebook") {
      self.setState({
        facebookreviewbody: this.state.facebookreviewbody + `  @[${this.state.socialChannelCommentObj?.userID}]`,

      })
    }
    if (this.state.sourceName === "Instagram") {
      self.setState({
        instareviewbody: this.state.instareviewbody + `  @${this.state.socialChannelCommentObj?.userName}`
      })


    }
  }
  handleSubmitGoogleReview = () => {
    let self = this;
    let ticketIDMSG = this.state.ticketIDsend
    axios({
      method: "post",
      url: config.apiUrl + "/GoogleReview/ReviewReply",
      headers: authHeader(),
      data: {
        reply: this.state.googlereviewbody,
        ticketId: this.state.ticketIDsend,
      },
    }).then(function (res) {
      let varl = res.data.statusCode
      console.log("varl", varl)
      if (res.data.statusCode === 200) {
        NotificationManager.success("Thankyou for your Review");
        self.setState({
          isGoogleReview: false,
          googlereviewbody: "",
        });
        self.handleGetMessageDetails(ticketIDMSG)
      } else {
        NotificationManager.info(res.data.message);
        self.setState({
          loading: false,
        });
      }
    })
      .catch((error) => console.log(error));
  };
  handleSubmitFacebookReview = () => {
    let self = this;
    // let ticketIDMSG = this.state.ticketIDsend
    self.setState({
      reviewLoader: true
    })
    axios({
      method: "post",
      url: config.apiUrlsocial + "/Facebook/ReplyOnComment",
      headers: authHeader(),
      data: {
        ticketID: this.state.ticketIDsend,
        pageId: this.state.socialChannelCommentObj.pageID,
        commentId: this.state.socialChannelCommentObj.commentID,
        attachment_url: "",
        message: this.state.facebookreviewbody

      },
    }).then(function (res) {
      let varl = res.data.statusCode
      console.log("varl", varl)
      if (res.data.response_Code === 200) {
        NotificationManager.success("Thankyou for your Reply");
        self.setState({
          // isFromFB: false,
          facebookreviewbody: "",
          reviewLoader: false
        });
        //self.handleGetMessageDetails(ticketIDMSG)
      } else {
        NotificationManager.info("Failed to Reply");
        self.setState({
          reviewLoader: false,
        });
      }
    })
      .catch((error) => console.log(error));
  };
  handleSubmitInstaReview = () => {
    let self = this;
    // let ticketIDMSG = this.state.ticketIDsend
    self.setState({
      reviewLoader: true
    })

    axios({
      method: "post",
      url: config.apiUrlsocial + "/Instagram/ReplyOnComment",
      headers: authHeader(),
      data: {
        ticketID: this.state.ticketIDsend,
        pageId: this.state.socialChannelCommentObj.pageID,
        commentId: this.state.socialChannelCommentObj.commentID,
        message: this.state.instareviewbody

      },
    }).then(function (res) {
      let varl = res.data.statusCode
      console.log("varl", varl)
      if (res.data.response_Code === 200) {
        NotificationManager.success("Thankyou for your Reply");
        self.setState({
          // isFromFB: false,
          instareviewbody: "",
          reviewLoader: false,
        });
        //self.handleGetMessageDetails(ticketIDMSG)
      } else {
        NotificationManager.error("Failed to Reply");
        self.setState({
          reviewLoader: false,
        });
      }
    })
      .catch((error) => console.log(error));
  };
  handelSMSTamplet = (e) => {
    let drpName = e.target.value;
    const matchingObject = this.state.smsdata.find(
      (item) => item.id.toString() === drpName
    );
    if (drpName === "-5") {
      this.setState({
        textdescription: "",
        vendorTemplateID: "",
        templateID: "",
        venderIDOnly: "",
      });
    } else {
      this.setState({
        textdescription: matchingObject.templateDescription,
        vendorTemplateID: matchingObject.templateId,
        templateID: matchingObject.id.toString(),
        venderIDOnly: matchingObject.vendorId,
      });
    }
  };

  // CC Avenue Flow

  // onchange cc avenue search input for orders
  handleSetCCAveID = (e) => {
    let self = this;
    self.setState({
      ccAvenueTobeSearched: e.target.value,
    });
  };
  // onchange mobile search input for cc avenue
  getCCAveMobileNo = (e) => {
    let self = this;
    if (e.target.value.length <= 10) {
      self.setState({
        ccAve_mobileNOtoSearch: e.target.value,
      });
    }
  };

  handleSearchCCAvenueType = (e) => {
    let self = this;
    self.setState({
      ccAve_searchType: e.target.id,
    });
    if (e.target.id === "cc_mobId") {
      let number =
        self.state.ticketDetailsData.customerPhoneNumber.length > 10
          ? self.state.ticketDetailsData.customerPhoneNumber.split(/91(.*)/s)[1]
          : self.state.ticketDetailsData.customerPhoneNumber;
      self.setState({
        ccAve_mobileNOtoSearch: number,
      });
    } else {
      self.setState({
        ccAve_mobileNOtoSearch: "",
      });
    }
  };

  getListOfCCAvenueMobile = async () => {
    let self = this;

    self.setState({
      ccAvenueMobileList: [],
      isCCAvenueSearchLoading: true,
    });
    if (self.state.ccAve_mobileNOtoSearch !== "") {
      axios({
        method: "post",
        headers: authHeader(),
        url: config.apiUrl + "/Payment/CCAvenuePaymentDetailsByMobile/",
        params: {
          MobileNo: self.state.ccAve_mobileNOtoSearch,
        },
        // data: {
        //   mobileNo: self.state.mobileNOtoSearch,
        //   countryCallingCode: "+" + self.state.countryCode,
        //   userType: "CUSTOMER"
        // }
      }).then(function (res) {
        if (res.data.statusCode === 200) {
          self.setState({
            ccAvenueMobileList:
              res.data.responseData.encResponse.order_Status_List,
            ccAve_mobileNOtoSearch: "",
            isCCAvenueSearchLoading: false,
          });
        } else {
          NotificationManager.error(
            res.data.responseData?.message !== undefined
              ? res.data.responseData?.message
              : res.data.message
          );
          self.setState({
            isCCAvenueSearchLoading: false,
          });
        }
      });
    } else {
      NotificationManager.error("Mobile no should not be Empty");
      self.setState({
        isCCAvenueSearchLoading: false,
      });
    }
  };
  handleGetCCAvenueOrder = async (val) => {
    let self = this;
    self.setState({
      ccAvenueOrderList: [],
      currentSubOrder: 0,
      isCCAvenueSearchLoading: val === "" ? true : false,
    });

    let data = val !== "" ? val : this.state.ccAvenueTobeSearched;
    if (data !== "") {
      axios({
        method: "POST",
        headers: authHeader(),
        url: config.apiUrl + "/Payment/CCAvenuePaymentDetailsByOrderId",
        params: {
          OrderNo: data,
        },
      }).then(function (res) {
        if (res.data.statusCode === 200) {
          self.setState({
            ccAvenueTobeSearched: "",
            ccAvenueOrderList: res.data.responseData,
            isCCAvenueSearchLoading: false,
          });
        } else {
          self.setState({
            isCCAvenueSearchLoading: false,
          });
          NotificationManager.error(
            res.data.responseData?.message !== undefined
              ? res.data.responseData?.message
              : res.data.message
          );
        }
      });
    } else {
      NotificationManager.error("Order id should not be Empty");
      self.setState({
        isCCAvenueSearchLoading: false,
      });
    }
  };
  handleSendStoreInfo = (e, _index) => {
    var user_ID = JSON.parse(localStorage.getItem("UserProfile"));
    let self = this;
    let storeId = e.storeID;
    console.log("strId", this.state.customerProfileInfo);
    self.setState({
      storeInfoLoading: true,
      selectedIndex: _index,
    });
    if (this.state.customerProfileInfo.customerPhoneNumber !== "") {
      axios({
        method: "post",
        // url: config.apiUrl + "/Template/SendStoreInformation",
        url: config.apiUrl + "/Template/SendStoreInformationByBrand",
        headers: authHeader(),
        data: {
          mobileNumber: this.state.customerProfileInfo.customerPhoneNumber.toString(),
          customerEmail: this.state.customerProfileInfo.customerEmailId.toString(),
          storeId: storeId,
          ticketID: this.state.ticketIDsend.toString(),
          createdBy: user_ID.agentId,
          brandId: parseInt(this.state.selectetedParameters.brandID)
        },
      })
        .then(function (res) {
          if (res.data.statusCode === 200) {
            NotificationManager.success("Send successfully.");
            self.setState({
              storeInfoLoading: false,
            });
          } else {
            NotificationManager.error("Failed to Send");
            self.setState({
              loading: false,
            });
          }
        })
        .catch((error) => console.log(error));
    } else {
      NotificationManager.error("Mobile Number Not Found");
    }
  };
  //belgianwaffle new unknown start
  handleNewUnknownOrderEast = () => {
    let self = this
    let unknowObj =
    {
      "orderMasterID": 0,
      "invoiceNumber": "Unknown",
      "invoiceDate": null,
      //"invoiceNumber":null,
      "ordeItemPrice": 0,
      "orderPricePaid": 0,
      "CustomerID": 604,
      "discount": 0,
      "storeCode": "",
      "TransactionDate": null,
      "ModeOfPaymentID": 1,
      "TicketSourceID": 0,
      "orderSource": "unknown"
    }
    let valarr = []
    valarr.push(unknowObj)
    //console.log("valarrr", valarr)
    if (self.state.NewUnknown === true) {
      //NotificationManager.success("Unknown Order Created Successfully");
      // console.log("unknowObj", unknowObj)
      self.setState({
        SelectedAllOrder: valarr,
        selectedInvoiceNo: valarr[0]?.invoiceNumber
      })
    }

  }

  handleNewOrderUnknownToitem = (e) => {
    let self = this
    // let val=e.target.check
    // console.log("valssss",val)
    this.setState({
      NewUnknown: !self.state.NewUnknown,

    })
    setTimeout(() => {
      if (self.state.NewUnknown) {
        this.handleNewUnknownOrderEast();
        self.setState({
          isAttachProduct: !self.state.isAttachProduct

        })
      }
      else {
        // NotificationManager.info("Create Order")
        self.setState({
          isAttachProduct: !self.state.isAttachProduct

        })
      }

    }, 100)

  }

  //belgianwaffle new unknown easiness end

  handleGetSentimentList = () => {
    let self = this
    axios({
      method: "GET",
      url: config.apiUrl + "/Master/GetSentimentList",
      headers: authHeader(),
    }).then(function (res) {
      let statusCode = res.data.statusCode
      let data = res.data.responseData
      if (statusCode) {
        self.setState({
          sentimentDropData: data
        })
      }
      else {
        self.setState({
          sentimentDropData: []
        })
      }

    })
      .catch((e) => { console.log(e) })



  }
  handleGetEmotionalList = () => {
    let self = this
    axios({
      method: "GET",
      url: config.apiUrl + "/Master/GetEmotionList",
      headers: authHeader(),
    }).then(function (res) {
      let statusCode = res.data.statusCode
      let data = res.data.responseData
      if (statusCode) {
        self.setState({
          emotionalDropData: data
        })
      }
      else {
        self.setState({
          emotionalDropData: []
        })
      }

    })
      .catch((e) => { console.log(e) })

  }
  handleCustomerDetailSocial = () => {
    let self = this
    console.log(" this.state.custID", this.state.ticketDetailsData.customerID)
    axios({
      method: "POST",
      url: config.apiUrl + "/Ticketing/GetCustomerDetails",
      headers: authHeader(),
      params: {
        CustomerID: this.state.ticketDetailsData.customerID
      }
    }).then(function (res) {
      let statusCode = res.data.statusCode
      let data = res.data.responseData
      console.log("datadataGetCustomerDetails", data)
      if (statusCode) {
        self.setState({
          customerSocialDetails: data
        })
      }
      else {
        self.setState({
          customerSocialDetails: {}
        })
      }

    })
      .catch((e) => { console.log(e) })
  }

  handleNotesClick = (e) => {
    console.log("e", e)
    let data = e.split("#")[1]
    let ticketId = parseInt(data.split(" ")[0])
    this.HandleRowClickPage(ticketId, this.state.sourceName)
    // console.log("ticketId", ticketId)
    // if (!isNaN(ticketId)) {
    //   this.HandleRowClickPage(ticketId, this.state.sourceName)
    // }
    // else {
    //   NotificationManager.error("cannot find ticket id")
    // }
  }

  render() {
    const TranslationContext = this.state.translateLanguage.default;
    const {
      open,
      ticketDetailsData,
      historicalDetails,
      SearchAssignData,
      orderDetails,
      selectedStore,
      appointmentList,
      programCode,
      profiledetailData,
      searchType,
      isExtendCancel,
      orderIdTobeSearched,
      orderList,
      currentSubOrder,
      subOrderShow,
      cancelEligbleDetail,
      returnEligbleDetail,
      itemOrderHistory,
      isorderFromShop,
      returnItemDetail,
      cancelItemDetail,
      mobileNoCreditNote,
      creditNotes,
      currentCreditNote,
      creditNoteOrderId,
      extedDays,
      extandReason,
      cancelExtandReason,
      selecteProduct,
      isOrderSearchLoading,
      isOrderSearchCreditLoading,
      mobileNOtoSearch,
      mobileOrders,
      tenantFlags,
      catIssue,
      subCatIssue,
      subSubCatIssue,
      issueTypeError,
      ecrError,
      priorityError,
      selectedWebsiteOrder,
      attachedWebData,
      isDataAttached,
      expandVal,
      selectedOminiItem,
      ccAve_searchType,
      ccAve_mobileNOtoSearch,
      ccAvenueTobeSearched,
      isCCAvenueSearchLoading,
      ccAvenueOrderList,
      ccAvenueMobileList,
      flags,
      selectedIndex
    } = this.state;
    var SearchAssignDatacount = SearchAssignData.length;
    var statusValidate = false;
    if (
      this.state.role_Name === "Supervisor" ||
      this.state.role_Name === "Admin" ||
      this.state.role_Name === "Agent"
    ) {
      statusValidate = true;
      this.state.statusValidate = true;
    } else {
      if (this.state.logInEmail === this.state.userEmailID) {
        statusValidate = true;
        this.state.statusValidate = true;
      } else {
        statusValidate = false;
        this.state.statusValidate = false;
      }
    }

    const EmailCollapseUpDown = this.state.EmailCollapse ? (
      <a
        href="#!"
        style={{ height: "30px", cursor: "pointer" }}
        onClick={this.HandleEmailCollapseOpen.bind(this)}
      >
        <img src={MinusImg} alt="Minus" className="minus-img" />
      </a>
    ) : (
      <a
        href="#!"
        style={{ height: "30px", cursor: "pointer" }}
        onClick={this.HandleEmailCollapseOpen.bind(this)}
      >
        <img src={PlusImg} alt="Plush" className="plush-img" />
      </a>
    );
    const todayDate = new Date().toISOString().split("T")[0];

    return (
      <Fragment>
        {this.state.loading === true ? (
          <div className="loader-icon"></div>
        ) : (
          <div>
            <div className="head-header">
              <div className="head-header-1">
                <div className="row">
                  <div className="col-12 col-xs-4 col-sm-4 col-md-8 d-flex">
                    {window.localStorage.getItem("isTicketInNewTab") !==
                      "true" && (
                        <Link
                          to={{
                            pathname: this.props.location.notifiPathname
                              ? "dashboard"
                              : this.state.pathname,
                            appliedTableFilters: this.state.appliedTableFilters,
                            tableFilterData: this.state.tableFilterData,
                          }}
                        >
                          <img
                            src={backBtn}
                            alt="left-arrow"
                            className="headphone"
                            style={{ transform: "rotate(90deg)" }}
                          />
                        </Link>
                      )}
                    <img
                      src={
                        this.state.sourceName === "Mails"
                          ? MailImg
                          : HeadphoneImg
                      }
                      alt="headphone"
                      className="headphone"
                    />
                    <label className="id-abc-1234">
                      {TranslationContext !== undefined
                        ? TranslationContext.label.id
                        : "ID"}
                      - {ticketDetailsData.ticketID}
                      <span className="updated-2-d-ago">
                        {TranslationContext !== undefined
                          ? TranslationContext.p.updated
                          : "Updated "}
                        {ticketDetailsData.updateDate}
                      </span>
                    </label>
                    <a
                      href="#!"
                      className="loading-rectangle-cntr"
                      onClick={this.handleGetHistoricalData.bind(this)}
                    >
                      <img
                        src={LoadingImg}
                        alt="Loading"
                        className="loading-rectangle m-0"
                        title="Ticket Historical"
                      // onClick={this.handleGetHistoricalData.bind(this)}
                      />
                    </a>
                    <div className="source-type">
                      Ticket Source: {this.state.sourceName}
                    </div>
                    <div className="source-type">
                      <div className="circleBox" >
                        <div>
                          {ticketDetailsData.ticketMergeStatus === "parent" ?
                            <span className="table-b table-yellow-btn-ticket">
                              <label>Parent</label>
                            </span>
                            : ticketDetailsData.ticketMergeStatus === "child" ?
                              <span className="table-b table-blue-btn-ticket">
                                <label>Child</label>
                              </span> : null}
                        </div>
                      </div>
                    </div>

                  </div>

                  <div className="historical-model">
                    <Modal
                      open={open}
                      onClose={this.onCloseModal.bind(this)}
                      closeIconId="sdsg"
                      modalId="Historical-popup"
                      overlayId="logout-ovrly"
                      classNames={{ modal: "historical-popup" }}
                    >
                      <label className="lblHistorical">
                        {TranslationContext !== undefined
                          ? TranslationContext.label.tickethistorical
                          : "Ticket Historical"}
                      </label>
                      <img
                        src={CancelImg}
                        alt="cancelImg"
                        className="cancalImg"
                        onClick={this.onCloseModal.bind(this)}
                      />
                      <div className="tic-history tic-his varunoverflow">
                        <ReactTable
                          data={historicalDetails}
                          columns={[
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.span.name
                                    : "Name"}
                                </span>
                              ),
                              accessor: "name",
                              width: 150,
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.span.action
                                    : "Action"}
                                </span>
                              ),
                              accessor: "action",
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.ticketingDashboard
                                      .timedate
                                    : "Time & Date"}
                                </span>
                              ),
                              accessor: "dateandTime",
                              width: 200,
                              Cell: (row) => {
                                var date = row.original["dateandTime"];
                                return (
                                  <span>
                                    {moment(date).format("M/D/YYYY")} &nbsp;
                                    {moment(date).format("HH:mm")}
                                  </span>
                                );
                              },
                            },
                          ]}
                          resizable={false}
                          defaultPageSize={historicalDetails.length}
                          showPagination={false}
                        />
                      </div>
                    </Modal>
                  </div>

                  <div
                    className={
                      this.state.isKB
                        ? "col-12 col-xs-8 col-sm-8 col-md-4 iskbticket"
                        : "col-12 col-xs-8 col-sm-8 col-md-4"
                    }
                  >
                    <div
                      style={{
                        float: "right",
                        marginTop: "0px",
                        display: "flex",
                        justifyContent: "space-around",
                        width: "500px",
                        alignItems: "center",
                      }}
                      className={this.state.isKB ? "iskbticket" : ""}
                    >
                      <a
                        href="#!"
                        className="d-inline-block"
                        onClick={this.HandlelabelModalOpen.bind(this)}
                      >
                        <img
                          src={Headphone2Img}
                          alt="headphone"
                          className="oval-55"
                          title="Agent List"
                        />
                        <label
                          className="naman-r"
                        // onClick={this.HandlelabelModalOpen.bind(this)}
                        >
                          {ticketDetailsData.username}
                        </label>
                        <img src={DownImg} alt="down" className="down-header" />
                      </a>
                      <button
                        type="button"
                        className={
                          this.state.isKB
                            ? "myticket-submit-solve-button iskbticket"
                            : "myticket-submit-solve-button"
                        }
                        onClick={this.handleSubmitTicket.bind(this)}
                      >
                        {TranslationContext !== undefined
                          ? TranslationContext.button.submit
                          : "SUBMIT"}
                      </button>
                    </div>
                  </div>
                  <Modal
                    open={this.state.labelModal}
                    onClose={this.HandlelabelModalClose.bind(this)}
                    closeIconId="close"
                    modalId="labelmodel-popup"
                    overlayId="logout-ovrly"
                  >
                    <div
                      className={
                        this.state.isKB
                          ? "myTicket-table remov agentlist iskbticket"
                          : "myTicket-table remov agentlist"
                      }
                      id="tic-det-assign"
                    >
                      <ReactTable
                        className="limit-react-table-body"
                        data={SearchAssignData !== null ? SearchAssignData : []}
                        columns={[
                          {
                            Header: (
                              <span>
                                {TranslationContext !== undefined
                                  ? TranslationContext.span.empid !== null &&
                                  TranslationContext.span.empid
                                  : "Emp Id"}
                              </span>
                            ),
                            accessor: "user_ID",
                            width: 80,
                          },
                          {
                            Header: (
                              <span>
                                {TranslationContext !== undefined
                                  ? TranslationContext.span.name !== null &&
                                  TranslationContext.span.name
                                  : "Name"}
                              </span>
                            ),
                            accessor: "agentName",
                          },
                          {
                            Header: (
                              <span>
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.designation !==
                                  null &&
                                  TranslationContext.label.designation
                                  : "Designation"}
                              </span>
                            ),
                            accessor: "designation",
                          },
                        ]}
                        minRows={2}
                        //defaultPageSize={-1}
                        pageSize={this.state.SearchAssignDatacountNew}
                        showPagination={false}
                        resizable={false}
                        getTrProps={(rowInfo, column) => {
                          const index = column ? column.index : -1;
                          return {
                            onClick: (e) => {
                              this.selectedRow = index;
                              var agentId = column.original["user_ID"];
                              this.setState({ agentId });
                            },
                            style: {
                              background:
                                this.selectedRow === index ? "#ECF2F4" : null,
                            },
                          };
                        }}
                      />
                      <div className="button-margin">
                        <button
                          type="button"
                          className="btn btn-outline-primary"
                          onClick={this.handleReAssignCommentOpen.bind(
                            this,
                            "assignCmd"
                          )}
                        >
                          {TranslationContext !== undefined
                            ? TranslationContext.placeholder.select
                            : "SELECT"}
                        </button>
                      </div>
                      <div
                        className="cancel-assign"
                        onClick={this.HandlelabelModalClose.bind(this)}
                      >
                        <img src={Cancel} alt="cancel" />
                      </div>
                    </div>
                  </Modal>
                </div>
              </div>
            </div>
            <Modal
              open={this.state.ReAssignComment}
              onClose={this.handleReAssignCommentOpen.bind(this)}
              closeIconId="sdsg"
              modalId="Historical-popup"
              overlayId="logout-ovrly"
              classNames={{
                modal: "historical-popup",
              }}
            >
              <div className="commenttextborder">
                <div className="comment-disp">
                  <div className="Commentlabel">
                    <label className="Commentlabel1">
                      {TranslationContext !== undefined
                        ? TranslationContext.button.addcomment
                        : "Add Comment"}
                    </label>
                  </div>
                  <div>
                    <img
                      src={CrossIcon}
                      alt="Minus"
                      className="pro-cross-icn m-0"
                      onClick={this.handleReAssignCommentOpen.bind(this)}
                    />
                  </div>
                </div>
                <div className="commenttextmessage">
                  <textarea
                    cols="31"
                    rows="3"
                    className="ticketMSGCmt-textarea"
                    name="addReassignCmmt"
                    maxLength={300}
                    value={this.state.addReassignCmmt}
                    onChange={this.handleNoteOnChange}
                  ></textarea>
                </div>
                {this.state.addReassignCmmt.length === 0 && (
                  <p style={{ color: "red", marginTop: "0px" }}>
                    {this.state.AssignCommentCompulsory}
                  </p>
                )}
                <div className="SendCommentBtn" style={{ float: "left" }}>
                  <button
                    className="SendCommentBtn1"
                    onClick={this.handleSkipComment.bind(this)}
                  >
                    {TranslationContext !== undefined
                      ? TranslationContext.button.skip
                      : "SKIP"}
                  </button>
                </div>
                <div className="SendCommentBtn">
                  <button
                    className="SendCommentBtn1"
                    onClick={this.handleSendMailData.bind(this, "Twitter")}
                  >
                    {TranslationContext !== undefined
                      ? TranslationContext.label.add
                      : "ADD"}
                  </button>
                </div>
              </div>
            </Modal>
            <div className="card-rectangle">
              <div className="rectangle-box">
                <div className="row">
                  <div className="col-md-3">
                    <div style={{ padding: "15px" }}>
                      <label className="mobile-number">
                        {TranslationContext !== undefined
                          ? TranslationContext.label.mobilenumber
                          : "Mobile Number"}
                      </label>
                      <br />
                      <label className="mobile-no">
                        {ticketDetailsData.customerPhoneNumber}
                      </label>
                      <a
                        href="#!"
                        onClick={this.HandleProfileModalOpen.bind(this)}
                      >
                        <img
                          src={EyeImg}
                          alt="eye"
                          className="eyeImg1"
                          title="Customer Profile"
                        />
                      </a>
                      <Modal
                        open={this.state.profilemodal}
                        onClose={this.HandleProfileModalClose.bind(this)}
                        modalId="profile-popup"
                        overlayId="logout-ovrly"
                      >
                        <div className="profilemodalmaindiv">
                          <div style={{ float: "right" }}>
                            <img
                              src={CrossIcon}
                              alt="cross-icon"
                              className="pro-cross-icn"
                              onClick={this.HandleProfileModalClose.bind(this)}
                            />
                          </div>
                          <div className="row profilemodalrow">
                            <div className="col-md-6">
                              <label className="profilemodal-text">
                                {TranslationContext !== undefined
                                  ? TranslationContext.span.name
                                  : "Name"}
                              </label>
                              <label className="profilemodal-textval">
                                {ticketDetailsData.customerName}
                              </label>
                            </div>
                            <div className="col-md-6">
                              <label className="profilemodal-text">
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.mobile
                                  : "Mobile"}
                              </label>
                              <label className="profilemodal-textval">
                                {ticketDetailsData.customerPhoneNumber}
                              </label>
                            </div>
                          </div>
                          <div className="row profilemodalrow-1">
                            <div className="col-md-6">
                              <label className="profilemodal-text">
                                {TranslationContext !== undefined
                                  ? TranslationContext.a.email
                                  : "Email"}
                              </label>
                              <label className="profilemodal-textval">
                                {ticketDetailsData.customerEmailId}
                              </label>
                            </div>

                            <div className="col-md-6">
                              <label className="profilemodal-text">
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.alternatenumber
                                  : "Alternate Number"}
                              </label>
                              <label className="profilemodal-textval">
                                {ticketDetailsData.altNumber}
                              </label>
                            </div>
                          </div>
                          <div className="row" style={{ marginLeft: "15px" }}>
                            <div className="openticketbox profilemodalrow-1">
                              <label className="open-tickets-box-text">
                                {ticketDetailsData.openTicket}
                                <small className="open-tickets-box-textval">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.ticketingDashboard
                                      .opentickets
                                    : "Open Tickets"}
                                </small>
                              </label>
                            </div>
                            <div className="openticketbox-2 profilemodalrow-1">
                              <label className="open-tickets-box-text">
                                {ticketDetailsData.totalticket}
                                <small className="open-tickets-box-textval">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.ticketingDashboard
                                      .totaltickets
                                    : "Total Tickets"}
                                </small>
                              </label>
                            </div>
                          </div>
                          <div className="row profilemodal-row-3">
                            <img src={CustomerIcon} alt="customer-icon" />
                            <label className="full-profile-view-text">
                              {TranslationContext !== undefined
                                ? TranslationContext.label.fullprofileview
                                : "FULL PROFILE VIEW"}
                            </label>
                          </div>
                        </div>
                      </Modal>
                      <a
                        href={Demo.BLANK_LINK}
                        onClick={this.handleBillImgModalOpen.bind(this)}
                        className=""
                        style={{
                          display: "inline",
                          marginLeft: "5px",
                        }}
                      >
                        <img
                          src={BillInvoiceImg}
                          alt="eye"
                          className="billImg"
                          title="Historical Order"
                        />
                      </a>
                      <Modal
                        open={this.state.BillInvoiceModal}
                        onClose={this.handleBillImgModalClose.bind(this)}
                        modalId="BillInvoice-popup"
                        overlayId="logout-ovrly"
                      >
                        <div className="row">
                          <div className="col-md-5">
                            <div className="customerBill">
                              <img
                                src={UserIcon}
                                alt="customer-icon"
                                className="usericon"
                              />
                              <label className="customer-text">
                                {TranslationContext !== undefined
                                  ? TranslationContext.span.customer
                                  : "CUSTOMER"}
                              </label>
                            </div>
                            <div className="row">
                              <div className="col-md-6 namepad">
                                <label className="fullna">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.fullname
                                    : "Full Name"}
                                </label>
                                <label className="namedi">
                                  {ticketDetailsData.customerName}
                                </label>
                              </div>
                              <div className="col-md-6 namepad">
                                <label className="fullna">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.mobilenumber
                                    : "Mobile Number"}
                                </label>
                                <label className="namedi">
                                  {ticketDetailsData.customerPhoneNumber}
                                </label>
                              </div>
                            </div>
                            <div className="row">
                              <div className="col-md-12 namepad">
                                <label className="fullna">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.emailid
                                    : "Email ID"}
                                </label>
                                <label className="namedi">
                                  {ticketDetailsData.customerEmailId}
                                </label>
                              </div>
                            </div>
                          </div>

                          <div className="col-md-7 xyz">
                            <img
                              src={CrossIcon}
                              alt="cross-icon"
                              className="cross"
                              onClick={this.handleBillImgModalClose.bind(this)}
                            />
                            <div>
                              <div className="histo">
                                <img
                                  src={Order}
                                  alt="customer-icon"
                                  style={{ marginTop: "-10px" }}
                                />
                                <label className="customer-text">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.historicalorder
                                    : "HISTORICAL ORDER"}
                                </label>
                              </div>

                              <div className="tablehistrical">
                                <ReactTable
                                  data={orderDetails}
                                  columns={[
                                    {
                                      Header: (
                                        <span className="historyTable-header">
                                          {TranslationContext !== undefined
                                            ? TranslationContext.span
                                              .ordernumber
                                            : "Order Number"}
                                        </span>
                                      ),
                                      accessor: "orderNumber",
                                    },
                                    {
                                      Header: (
                                        <span className="historyTable-header">
                                          {TranslationContext !== undefined
                                            ? TranslationContext.label
                                              .mobilenumber
                                            : "Mobile Number"}
                                        </span>
                                      ),
                                      accessor: "mobileNumber",
                                    },
                                    {
                                      Header: (
                                        <span className="historyTable-header">
                                          {TranslationContext !== undefined
                                            ? TranslationContext.p.amount
                                            : "Amount"}
                                        </span>
                                      ),
                                      accessor: "itemPrice",
                                    },
                                    {
                                      Header: (
                                        <span className="historyTable-header">
                                          {TranslationContext !== undefined
                                            ? TranslationContext.span
                                              .purchasedate
                                            : "Purchase Date"}
                                        </span>
                                      ),
                                      accessor: "dateFormat",
                                    },
                                  ]}
                                  defaultPageSize={5}
                                  showPagination={false}
                                />
                              </div>
                            </div>
                          </div>
                        </div>
                      </Modal>
                      {this.state.callLogsAccess && (
                        <a
                          href={Demo.BLANK_LINK}
                          onClick={this.handleOpenCallCustomer}
                          className=""
                          style={{
                            display: "inline",
                            marginLeft: "5px",
                          }}
                        >
                          <img
                            src={Call}
                            alt="Call"
                            className="billImg"
                            title="Call Customer"
                          />
                        </a>
                      )}

                      <Modal
                        open={this.state.isCallCustomer}
                        onClose={this.handleCloseCallCustomer}
                        modalId="callModal"
                        classNames={{ modal: "call-modal" }}
                        center
                      >
                        <CallModal
                          handleCloseCallCustomer={this.handleCloseCallCustomer}
                          callModalValue={this.state.callModalValue}
                          userProgramCode={programCode}
                        />
                      </Modal>
                      {(this.state.isTicketMerge_tnt && this.state.isTicketMerge_mdl && ticketDetailsData.ticketMergeStatus !== "child") && (
                        <label>
                          {ticketDetailsData.ticketMergeStatus !== "parent" && (
                            <a
                              href={Demo.BLANK_LINK}
                              onClick={this.HandleTicketListModalOpen.bind(this)}
                              className=""
                              style={{
                                display: "inline",
                                marginLeft: "5px",
                              }}
                            >
                              <img
                                src={MergeTicketImg}
                                alt="eye"
                                className="billImg"
                                title="Merge into Another Ticket"
                              />
                            </a>
                          )}
                          <a
                            href={Demo.BLANK_LINK}
                            onClick={this.HandleMergedTicketsModalOpen.bind(this)}
                            className=""
                            style={{
                              display: "inline",
                              marginLeft: "5px",
                            }}
                          >
                            <img
                              src={MergedTicketsImg}
                              alt="eye"
                              className="billImg"
                              title="Merged Tickets List"
                            />
                          </a>
                        </label>
                      )}


                      {/* ------------Modal for ticket searcing and merging------- */}
                      <Modal
                        open={this.state.searchticketmodal}
                        //onClose={this.HandleTicketListModalClose.bind(this)}
                        modalId="ticketlist-popup"
                        overlayId="logout-ovrly"
                        closeOnOverlayClick={false}
                      >
                        <div className="profilemodalmaindiv">
                          <div style={{ float: "right" }}>
                            <img
                              src={CrossIcon}
                              alt="cross-icon"
                              className="pro-cross-icn"
                              onClick={this.HandleTicketListModalClose.bind(this)}
                            />
                          </div>
                          {
                            this.state.tabCount === 1 && (
                              <div>
                                <div>
                                  <div className="row profilemodalrow-1">
                                    <div className="col-md-7 mt-4">
                                      <label className="profilemodal-text">{ticketDetailsData.customerName}Tickets's (Other than Closed)</label>
                                    </div>
                                    <div className={"col-md-5 m-b-10 m-t-10"}>
                                      <label>Enter Ticket ID to Merge into</label>
                                      <input
                                        type="text"
                                        // maxLength={15}
                                        className="systemordersearch"
                                        placeholder={
                                          TranslationContext !== undefined
                                            ? TranslationContext.label
                                              .searchbynamepincodecode
                                            : "Ticket ID/Subject"
                                        }
                                        // value={this.state.txtSearchTicket}
                                        name="SearchTicket"
                                        // autoComplete="off"
                                        onChange={(e) => { this.handleGetSearchMergingTicket(e) }}
                                      />
                                      <img
                                        src={SearchBlackImg}
                                        alt="Search"
                                        className="systemorder-imgsearch"
                                      //onClick={this.handleGetSearchMergingTicket.bind(this)}
                                      />
                                    </div>
                                  </div>

                                  <div className="row" style={{ marginLeft: "25px" }}>


                                    {/* <div className="col-md-12 mt-4">
                                      <label className="profilemodal-text">Select one of the following tickets</label>
                                    </div> */}
                                    <div className="col-md-12 padding-div">
                                      <hr />
                                      <div className="row customerTickets_tableheader">
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Ticket ID
                                          </label>
                                        </div>
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Ticket Title
                                          </label>
                                        </div>
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Status
                                          </label>
                                        </div>
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Category
                                          </label>
                                        </div>
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Created Date
                                          </label>
                                        </div>
                                        <div className="col-md-2">
                                          <label className="modal-lbl1">
                                            Action
                                          </label>
                                        </div>
                                      </div>
                                      <div className='customerTicketModal'>
                                        {this.state.loadingTickets === true ? (
                                          <div className="loader-icon"></div>
                                        ) :
                                          (this.state.mergingTicketsData.length > 0
                                            ? (this.state.mergingTicketsData.map(
                                              (item, index) => {
                                                return (
                                                  <div>
                                                    <div className="row opn-ticketDiv">
                                                      <div className="col-md-1">
                                                        <label
                                                          className="no-mdl textoverflowmodal"
                                                          onClick={this.HandleRowClickPage.bind(this, item.ticketId, item.ticketSource)}>
                                                          <a href="#">
                                                            {item.ticketId}
                                                          </a>
                                                        </label>

                                                      </div>
                                                      <div className="col-md-1">
                                                        <label className="mno-mdl MyTicketListReact">
                                                          {item.ticketMergeStatus === "parent" ?
                                                            <span className="table-p table-yellow-btn">
                                                              <label>Parent</label>
                                                            </span>
                                                            : null}
                                                        </label>
                                                      </div>
                                                      <div className="col-md-2">
                                                        <label className="mno-mdl textoverflowmodal">
                                                          {item.ticketTitle}
                                                        </label>
                                                      </div>
                                                      <div className="col-md-2">
                                                        <label className="mno-mdl textoverflowmodal">
                                                          {item.ticketStatus}
                                                        </label>
                                                      </div>
                                                      <div className="col-md-2">
                                                        <label className="mno-mdl textoverflowmodal">
                                                          {item.ticketCategory}
                                                        </label>
                                                      </div>
                                                      <div className="col-md-2">
                                                        <label className="mno-mdl textoverflowmodal">
                                                          {item.createdDate}
                                                        </label>
                                                      </div>
                                                      <div className="col-md-2">
                                                        <label className="no-mdl textoverflowmodal" onClick={this.HandleTicketMergingNext.bind(this, item.ticketId)}>
                                                          <a href="#">{"Merge"}</a>
                                                        </label>
                                                      </div>
                                                    </div>
                                                    <hr />
                                                  </div>
                                                );
                                              }
                                            ))
                                            : <div className='row '>
                                              <div className='col-sm-12' style={{ textAlign: 'center' }}>No Tickets found !!!</div>
                                            </div>)}
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                {/* <div className="d-flex justify-content-end">
                                  <button onClick={this.HandleTicketMergingNext.bind(this)}>Save & Next</button>
                                </div> */}
                              </div>
                            )
                          }

                          {
                            this.state.tabCount === 2 && (
                              <div className="">
                                <div className="row">
                                  <div className="col-md-2"></div>
                                  <div className="col-md-8">
                                    <b><label> You are about to merge ticket({this.state.ticketDetailsData.ticketID}) into ticket({this.state.selectedParentTicketDetails.ticketId}) </label></b>
                                  </div>
                                </div>
                                <div className="mt-5 mb-5 openticketbox-3">
                                  <div className="row ml-2">
                                    <div className="col-md-6 mt-2"> Ticket Id : {this.state.ticketDetailsData.ticketID} [{this.state.ticketDetailsData.ticketTitle}]</div>
                                    <div className="col-md-3 mt-2">{moment(this.state.ticketDetailsData.createdDate).format("DD-MM-YYYY HH:mm:ss")}</div>
                                    <div className="col-md-3 mt-2">{this.state.ticketDetailsData.customerName}</div>
                                  </div>
                                  <div className="row ml-2 mt-1">
                                    <div className="col-md-12 mt-3">
                                      <img
                                        src={InfoIcon2}
                                        alt="info-icon"
                                        height={25}
                                        width={25}
                                        className="ml-1"
                                      />
                                      <label className="ml-2">{"This ticket will be auto closed with the following comment:"}</label><br></br>
                                      <label className="ml-4">(This request was closed and merged into ticket id #{this.state.selectedParentTicketDetails.ticketId} [{this.state.selectedParentTicketDetails.ticketTitle}]) </label>
                                    </div>
                                    <div className="col-md-12">
                                      <input type="checkbox" name="Recepient" value={this.state.isCopyRecepient} onChange={this.handleTicketFlagOnChange}></input>
                                      <label className="ml-1">Want to copy child mail recipients in the parent ticket</label>
                                    </div>
                                    <div className="col-md-12">
                                      <input type="checkbox" name="AutoReply" value={this.state.isAutoReply} onChange={this.handleTicketFlagOnChange}></input>
                                      <label className="ml-1">Auto reply to customer about this merging</label>
                                    </div>
                                    <div className="col-md-12">
                                      <input type="checkbox" name="CopyContent" value={this.state.isCopyContent} onChange={this.handleTicketFlagOnChange}></input>
                                      <label className="ml-1">Want to migrate child ticket email content/comments and attachment into parent ticket</label>
                                    </div>
                                  </div>
                                </div>
                                <div className="mt-5 mb-5 openticketbox-4">
                                  <div className="row ml-2 mt-2">
                                    <div className="col-md-6 mt-2"> Ticket Id : {this.state.selectedParentTicketDetails.ticketId} [{this.state.selectedParentTicketDetails.ticketTitle}]</div>
                                    <div className="col-md-3 mt-2">{this.state.selectedParentTicketDetails.createdDate}</div>
                                    <div className="col-md-3 mt-2">{this.state.ticketDetailsData.customerName}</div>
                                    <div className="col-md-12 mt-3">
                                      <img
                                        src={InfoIcon2}
                                        alt="info-icon"
                                        height={25}
                                        width={25}
                                        className="ml-1"
                                      />
                                      <label className="ml-2">{"This ticket will be updated with the following comment:"}</label><br></br>
                                      <label className="ml-4">(Ticket id #{this.state.ticketDetailsData.ticketID} [{this.state.ticketDetailsData.ticketTitle}] was closed and merged into this ticket)</label>
                                    </div>
                                  </div>

                                </div>
                                <div className="d-flex justify-content-end">
                                  <button onClick={this.HandleTicketMergingBack.bind(this)}>Back</button>
                                  <button className="ml-2" disable={this.state.disableButtonmerged} onClick={this.HandleConfirmAndMerge.bind(this)}>
                                    {
                                      this.state.mergedLoader ?
                                        <img
                                          src={loaderGif}
                                          style={{ width: "20PX" }}
                                        />
                                        : "Confirm & Merge"
                                    }

                                  </button>
                                </div>
                              </div>)
                          }

                        </div>
                      </Modal>
                      {/* ---------------Merged tickets List Modal------------ */}
                      <Modal
                        open={this.state.mergedticketmodal}
                        onClose={this.HandleMergedTicketsModalClose.bind(this)}
                        modalId="mergedticketlist-popup"
                        overlayId="logout-ovrly"
                        closeOnOverlayClick={false}

                      >
                        <div className="profilemodalmaindiv">
                          <div style={{ float: "right" }}>
                            <img
                              src={CrossIcon}
                              alt="cross-icon"
                              className="pro-cross-icn"
                              onClick={this.HandleMergedTicketsModalClose.bind(this)}
                            />
                          </div>
                          <div>

                            <div className="row" style={{ marginLeft: "25px" }}>
                              <div className="col-md-12 padding-div">
                                <hr />
                                <div className="row customerTickets_tableheader">
                                  <div className="col-md-2">
                                    <label className="modal-lbl1">
                                      Ticket ID
                                    </label>
                                  </div>
                                  <div className="col-md-2">
                                    <label className="modal-lbl1">
                                      Ticket Source
                                    </label>
                                  </div>
                                  <div className="col-md-3">
                                    <label className="modal-lbl1">
                                      Ticket Title
                                    </label>
                                  </div>
                                  <div className="col-md-2">
                                    <label className="modal-lbl1">
                                      Category
                                    </label>
                                  </div>
                                  <div className="col-md-3">
                                    <label className="modal-lbl1">
                                      Created Date
                                    </label>
                                  </div>

                                </div>
                                <div className='customerTicketModal'>
                                  {(this.state.mergedTicketsData.length > 0
                                    ? (this.state.mergedTicketsData.map(
                                      (item, index) => {
                                        return (
                                          <div>
                                            <div className="row opn-ticketDiv">
                                              <div className="col-md-2 ">
                                                <label className="no-mdl" onClick={this.HandleRowClickPage.bind(this, item.ticketId, item.ticketSource)}>
                                                  <span style={{ cursor: "pointer" }}>{item.ticketId}</span>
                                                </label>
                                              </div>
                                              <div className="col-md-2">
                                                <label className="mno-mdl textoverflowmodal">
                                                  {item.ticketSource}
                                                </label>
                                              </div>
                                              <div className="col-md-3">
                                                <label className="mno-mdl textoverflowmodal">
                                                  {item.ticketTitle}
                                                </label>
                                              </div>
                                              <div className="col-md-2">
                                                <label className="mno-mdl textoverflowmodal">
                                                  {item.ticketCategory}
                                                </label>
                                              </div>
                                              <div className="col-md-3">
                                                <label className="mno-mdl textoverflowmodal">
                                                  {item.createdDate}
                                                </label>
                                              </div>
                                            </div>
                                            <hr />
                                          </div>
                                        );
                                      }
                                    ))
                                    : <div className='row '>
                                      <div className='col-sm-12' style={{ textAlign: 'center' }}>No Tickets found !!!</div>
                                    </div>)}
                                </div>
                              </div>
                            </div>
                          </div>
                          <div className="d-flex justify-content-end">
                            <button onClick={this.HandleMergedTicketsModalClose.bind(this)}>Close</button>
                          </div>
                        </div>
                      </Modal>
                      <div className="card-space-1">
                        <label className="target-closure-date">
                          {TranslationContext !== undefined
                            ? TranslationContext.ticketingDashboard
                              .targetclosuredate
                            : "Target Closure Date"}
                          &nbsp;
                        </label>
                        <label className="Date-target">
                          {ticketDetailsData.targetClosuredate}
                        </label>
                      </div>
                      <div className="mobilenumber-resp">
                        <span className="line-respo"></span>
                        <label className="respo">
                          {TranslationContext !== undefined
                            ? TranslationContext.label.response
                            : "Response"}
                        </label>
                        <label className="resol">
                          <span className="line-resol"></span>
                          {TranslationContext !== undefined
                            ? TranslationContext.label.resolution
                            : "Resolution"}
                        </label>
                      </div>

                      <div className="tic-det-progress">
                        <Progress multi>
                          {this.state.progressDataWithcColor.map(function (
                            item
                          ) {
                            if (item.color === "No Color") {
                              return <Progress bar></Progress>;
                            }
                            if (item.color === "Orange") {
                              return (
                                <Progress
                                  bar
                                  color="warning"
                                  value={item.value}
                                ></Progress>
                              );
                            }

                            if (item.color === "Red") {
                              return (
                                <Progress
                                  bar
                                  color="danger"
                                  value={item.value}
                                ></Progress>
                              );
                            }

                            if (item.color === "Green") {
                              return (
                                <Progress
                                  bar
                                  color="success"
                                  value={item.value}
                                ></Progress>
                              );
                            }
                          })}
                        </Progress>
                      </div>
                      <p className="logout-label font-weight-bold prog-indi-1">
                        {ticketDetailsData.durationRemaining}
                      </p>
                    </div>
                  </div>

                  {/* <div className="col-md-6"> */}
                  {/* <div className={window.localStorage.getItem("Programcode") === 'bataclub' ? "col-md-9" : "col-md-6"}> */}
                  <div
                    className={flags?.isHorizontal ? "col-md-9" : "col-md-6"}
                  >
                    <div className="mid-sec mid-secnew mid-scl">
                      <div className="row mob-pad">
                        <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4">
                          <div
                            className={
                              statusValidate
                                ? "form-group"
                                : "form-group disabled-link"
                            }
                          >
                            <label className="label-4">
                              {TranslationContext !== undefined
                                ? TranslationContext.label.status
                                : "Status"}
                            </label>
                            <select
                              className={
                                this.state.isKB
                                  ? "rectangle-9 select-category-placeholder iskbticket"
                                  : "rectangle-9 select-category-placeholder"
                              }
                              value={
                                this.state.selectetedParameters.ticketStatusID
                              }
                              onChange={this.handleDropDownChange}
                              name="ticketStatusID"
                            >
                              <option>
                                {TranslationContext !== undefined
                                  ? TranslationContext.div.ticketstatus
                                  : "Ticket Status"}
                              </option>
                              {this.state.TicketStatusData.length &&
                                this.state.TicketStatusData.map((item, i) => (
                                  // item.ticketStatusID !== 104 &&
                                  <option key={i} value={item.ticketStatusID}>
                                    {item.ticketStatusName}
                                  </option>
                                ))}
                            </select>
                          </div>
                        </div>
                        {this.state.displayTicketFields["Brand"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Brand".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Brand".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Brand".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.brand
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Brand".toLowerCase()
                                        )[0].displayEnglishName || "Brand"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.brand
                                        : "Brand"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.brand
                                      : "Brand"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.brand
                                    : "Brand"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters.brandID}
                                onChange={this.handleDropDownChange}
                                name="brandID"
                              >
                                <option className="select-category-placeholder">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.ticketingDashboard
                                      .selectbrand
                                    : "Select Brand"}
                                </option>
                                {this.state.BrandData !== null &&
                                  this.state.BrandData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.brandID}
                                      className="select-category-placeholder"
                                    >
                                      {item.brandName}
                                    </option>
                                  ))}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["BusinessUnit"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "BusinessUnit".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "BusinessUnit".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "BusinessUnit".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.bussinessUnit
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "BusinessUnit".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "BusinessUnit"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.bussinessUnit
                                        : "BusinessUnit"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.bussinessUnit
                                      : "BusinessUnit"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.bussinessUnit
                                    : "BusinessUnit"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.businessUnitId
                                }
                                onChange={this.handleDropDownChange}
                                name="businessUnitId"
                              >
                                <option className="select-category-placeholder">
                                  {"Select Business Unit Category"}
                                  {/* {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Business Unit Category"} */}
                                </option>
                                {this.state.businessUnitData !== null &&
                                  this.state.businessUnitData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.businessUnitId}
                                      className="select-category-placeholder"
                                    >
                                      {item.businessUnitName}
                                    </option>
                                  ))}
                              </select>
                              {this.state.BusinessUnitError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.BusinessUnitError}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["SubBusinessUnit"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "SubBusinessUnit".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "SubBusinessUnit".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "SubBusinessUnit".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .subBussinessUnit
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "SubBusinessUnit".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "SubBusinessUnit"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label
                                          .subBussinessUnit
                                        : "SubBusinessUnit"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.subBussinessUnit
                                      : "SubBusinessUnit"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.subBussinessUnit
                                    : "SubBusinessUnit"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters
                                    .subBusinessUnitId
                                }
                                onChange={this.handleDropDownChange}
                                name="subBusinessUnitId"
                              >
                                <option className="select-category-placeholder">
                                  {"Select Sub Business Unit"}
                                </option>
                                {this.state.subbusinessUnitData !== null &&
                                  this.state.subbusinessUnitData.map(
                                    (item, i) => (
                                      <option
                                        key={i}
                                        value={item.subBusinessUnitId}
                                        className="select-category-placeholder"
                                      >
                                        {item.subBusinessUnitName}
                                      </option>
                                    )
                                  )}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Category"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Category".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Category".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Category".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.category
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Category".toLowerCase()
                                        )[0].displayEnglishName || "Category"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.category
                                        : "Category"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.category
                                      : "Category"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.category
                                    : "Category"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.categoryID
                                }
                                onChange={this.handleDropDownChange}
                                name="categoryID"
                              >
                                <option className="select-category-placeholder">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.option.selectcategory
                                    : "Select Category"}
                                </option>
                                {this.state.CategoryData !== null &&
                                  this.state.CategoryData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.categoryID}
                                      className="select-category-placeholder"
                                    >
                                      {item.categoryName}
                                    </option>
                                  ))}
                              </select>
                              {catIssue !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {catIssue}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Sub Category"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Sub Category".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Sub Category".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Sub Category".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.subcategory
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Sub Category".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Sub Category"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.subcategory
                                        : "Sub Category"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.subcategory
                                      : "Sub Category"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.subcategory
                                    : "Sub Category"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.subCategoryID
                                }
                                onChange={this.handleDropDownChange}
                                name="subCategoryID"
                              >
                                <option className="select-category-placeholder">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Sub Category"}
                                </option>
                                {this.state.SubCategoryData !== null &&
                                  this.state.SubCategoryData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.subCategoryID}
                                      className="select-category-placeholder"
                                    >
                                      {item.subCategoryName}
                                    </option>
                                  ))}
                              </select>
                              {subCatIssue !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {subCatIssue}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["SubSubCategoryId"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "SubSubCategoryId".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "SubSubCategoryId".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "SubSubCategoryId".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.subcategory
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "SubSubCategoryId".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "SubSubCategoryId"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.subcategory
                                        : "SubSubCategoryId"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.subcategory
                                      : "SubSubCategoryId"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.subcategory
                                    : "SubSubCategoryId"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters
                                    .subSubCategoryID
                                }
                                onChange={this.handleDropDownChange}
                                name="subSubCategoryID"
                              >
                                <option className="select-category-placeholder">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Sub Sub Category"}
                                </option>
                                {this.state.SubSubCategoryData !== null &&
                                  this.state.SubSubCategoryData.map(
                                    (item, i) => (
                                      <option
                                        key={i}
                                        value={item.subSubCategoryID}
                                        className="select-sub-sub-category-placeholder"
                                      >
                                        {item.subSubCategoryName}
                                      </option>
                                    )
                                  )}
                              </select>
                              {subSubCatIssue !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {subSubCatIssue}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Issue Type"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Issue Type".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Issue Type".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Issue Type".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label.issuetype
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Issue Type".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Issue Type"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.issuetype
                                        : "Issue Type"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.issuetype
                                      : "Issue Type"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.issuetype
                                    : "Issue Type"}
                              </label>

                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.issueTypeID
                                }
                                onChange={this.handleDropDownChange}
                                name="issueTypeID"
                              >
                                <option
                                  className="select-sub-category-placeholder"
                                  value={null}
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.option.selectissuetype
                                    : "Select Issue Type"}
                                </option>
                                {this.state.IssueTypeData !== null &&
                                  this.state.IssueTypeData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.issueTypeID}
                                      className="select-category-placeholder"
                                    >
                                      {item.issueTypeName}
                                    </option>
                                  ))}
                              </select>
                              {issueTypeError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {issueTypeError}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {/* {window.localStorage.getItem("Programcode") === 'bataclub' && */}
                        {this.state.displayTicketFields["ECR"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div className="form-group">
                              <label className="label-4">
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "ECR".toLowerCase()
                                  )[0].displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters?.ecrId}
                                onChange={this.handleDropDownChange}
                                name="ecrId"
                              >
                                <option className="select-sub-category-placeholder">
                                  Select ECR
                                </option>
                                {/*  this.state.ecrData.map(
                                    (item, i) => { */}
                                {this.state.ecrData?.ecrID !== undefined && (
                                  <option
                                    value={this.state.ecrData?.ecrID}
                                    className="select-category-placeholder"
                                  >
                                    {this.state.ecrData?.ecrName}
                                  </option>
                                )}
                                {/* }
                                  ) */}
                              </select>
                              {ecrError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {ecrError}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Ticket Priority"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Ticket Priority".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Ticket Priority".toLowerCase()
                                    )[0].detailsPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Ticket Priority".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .ticketpriority
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Ticket Priority".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Ticket Priority"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.ticketpriority
                                        : "Ticket Priority"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.ticketpriority
                                      : "Ticket Priority"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.ticketpriority
                                    : "Ticket Priority"}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.priorityID
                                }
                                onChange={this.handleDropDownChange}
                                name="priorityID"
                              >
                                <option className="select-sub-category-placeholder">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.option.selectpriority
                                    : "Select Priority"}
                                </option>
                                {this.state.TicketPriorityData !== null &&
                                  this.state.TicketPriorityData.map(
                                    (item, i) => {
                                      if (
                                        this.state.isSystemGenerated == false &&
                                        item.priortyName === "Auto"
                                      ) {
                                        return null;
                                      } else if (
                                        this.state.isSystemGenerated == true &&
                                        item.priortyName === "Auto"
                                      ) {
                                        return (
                                          <option
                                            key={i}
                                            value={item.priorityID}
                                          >
                                            {item.priortyName}
                                          </option>
                                        );
                                      } else {
                                        return (
                                          <option
                                            key={i}
                                            value={item.priorityID}
                                          >
                                            {item.priortyName}
                                          </option>
                                        );
                                      }
                                    }
                                  )}
                              </select>
                              {this.state.checkPriorityDetails && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.ticketingDashboard
                                      .slahasnotbeencreated
                                    : "SLA has not been created"}
                                </p>
                              )}

                              {this.state.priorityError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.priorityError}
                                </p>
                              )}


                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields[
                          "Channel Of Purchase"
                        ] && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div
                                // className={
                                //   this.state.role_Name === "Supervisor"
                                //     ? "form-group"
                                //     : "form-group disabled-link" &&
                                //       this.state.role_Name === "Admin"
                                //     ? "form-group"
                                //     : "form-group disabled-link"
                                // }
                                className="form-group"
                              >
                                {window.localStorage.getItem("Programcode") ===
                                  "campusshoes" ? (
                                  <label className="label-4">
                                    {
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Channel Of Purchase".toLowerCase()
                                      )[0]?.displayEnglishName
                                    }
                                  </label>
                                ) : (
                                  <label className="label-4">
                                    {this.state.ticketFields.length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Channel Of Purchase".toLowerCase()
                                      ).length > 0
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Channel Of Purchase".toLowerCase()
                                        )[0].detailsPage
                                          ? TranslationContext !== undefined
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Channel Of Purchase".toLowerCase()
                                            )[0].displayHindiName ||
                                            TranslationContext.label
                                              .channelofpurchase
                                            : this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Channel Of Purchase".toLowerCase()
                                            )[0].displayEnglishName ||
                                            "Channel Of Purchase"
                                          : TranslationContext !== undefined
                                            ? TranslationContext.label
                                              .channelofpurchase
                                            : "Channel Of Purchase"
                                        : TranslationContext !== undefined
                                          ? TranslationContext.label
                                            .channelofpurchase
                                          : "Channel Of Purchase"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.channelofpurchase
                                        : "Channel Of Purchase"}
                                  </label>
                                )}
                                <select
                                  className={
                                    this.state.isKB
                                      ? "rectangle-9 select-category-placeholder iskbticket"
                                      : "rectangle-9 select-category-placeholder"
                                  }
                                  value={
                                    this.state.selectetedParameters
                                      .channelOfPurchaseID
                                  }
                                  onChange={this.handleDropDownChange}
                                  name="channelOfPurchaseID"
                                >
                                  <option className="select-category-placeholder">
                                    {window.localStorage.getItem(
                                      "Programcode"
                                    ) === "campusshoes"
                                      ? "Select " +
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Channel Of Purchase".toLowerCase()
                                      )[0]?.displayEnglishName
                                      : TranslationContext !== undefined
                                        ? TranslationContext.option
                                          .selectchannelofpurchase
                                        : "Select Channel Of Purchase"}
                                  </option>
                                  {this.state.ChannelOfPurchaseData !== null &&
                                    this.state.ChannelOfPurchaseData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={item.channelOfPurchaseID}
                                          className="select-category-placeholder"
                                        >
                                          {item.nameOfChannel}
                                        </option>
                                      )
                                    )}
                                </select>
                                {this.state.TouchUnitError !== "" && (
                                  <p
                                    style={{ color: "red", marginBottom: "0px" }}
                                  >
                                    {this.state.TouchUnitError}
                                  </p>
                                )}
                              </div>
                            </div>
                          )}
                        {/* This block will be visible when programcode is "organicindia" */}
                        {this.state.programCode === "organicindia" && (
                          <>
                            {/* This block will be visible when channel of purchase is "D2C" */}
                            {this.state.channelOfPurchaseName === "d2c" && (
                              <>
                                {this.state.displayTicketFields[
                                  "Store Code"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Code".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Code".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Code".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storecode
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Code".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Code"
                                                : "Store Code"
                                              : "Store Code"
                                            : "Store Code"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Code".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <select
                                          className={
                                            this.state.isKB
                                              ? "rectangle-9 select-category-placeholder iskbticket"
                                              : "rectangle-9 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeCode
                                          }
                                          onChange={this.handleDropDownChange}
                                          name="storeCode"
                                        >
                                          <option>Select</option>
                                          {this.state.storeList.map((store) => {
                                            return (
                                              <option value={store.storeCode}>
                                                {store.storeCode}
                                              </option>
                                            );
                                          })}
                                        </select>
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store Name"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Name".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Name".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Name".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storename
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Name".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Name"
                                                : "Store Name"
                                              : "Store Name"
                                            : "Store Name"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Name".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <select
                                          className={
                                            this.state.isKB
                                              ? "rectangle-9 select-category-placeholder iskbticket"
                                              : "rectangle-9 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeName
                                          }
                                          onChange={this.handleDropDownChange}
                                          name="storeName"
                                        >
                                          <option>Select</option>

                                          {this.state.storeList.map((store) => {
                                            return (
                                              <option value={store.storeName}>
                                                {store.storeName}
                                              </option>
                                            );
                                          })}
                                        </select>
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store City"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store City".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store City".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store City".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storecity
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store City".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store City"
                                                : "Store City"
                                              : "Store City"
                                            : "Store City"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store City".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          disabled
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeCity
                                          }
                                          onChange={this.handleDropDownChange}
                                          name="storeCity"
                                          placeholder="Store City"
                                        />
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store Address"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Address".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Address".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Address".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storeaddress
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Address".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Address"
                                                : "Store Address"
                                              : "Store Address"
                                            : "Store Address"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Address".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <textarea
                                          className={
                                            this.state.isKB
                                              ? "rectangle-11 select-category-placeholder iskbticket"
                                              : "rectangle-11 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeAddress
                                          }
                                          disabled
                                          onChange={this.handleDropDownChange}
                                          name="storeAddress"
                                          placeholder="Store Address"
                                          rows={3}
                                        ></textarea>
                                      </div>
                                    </div>
                                  )}
                                {/* {this.state.displayTicketFields[
                                  "Store Pin Code"
                                ] && (
                                  <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                    <div className="form-group">
                                      <label className="label-4">
                                        {this.state.ticketFields.length > 0
                                          ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Pin Code".toLowerCase()
                                            ).length > 0
                                            ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Pin Code".toLowerCase()
                                              )[0].createPage
                                              ? TranslationContext !== undefined
                                                ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Pin Code".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storepincode
                                                : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Pin Code".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Pin Code"
                                              : "Store Pin Code"
                                            : "Store Pin Code"
                                          : "Store Pin Code"}
                                      </label>
                                      <input
                                        disabled
                                        className={
                                          this.state.isKB
                                            ? "rectangle-10 select-category-placeholder iskbticket"
                                            : "rectangle-10 select-category-placeholder"
                                        }
                                        value={
                                          this.state.selectetedParameters
                                            .storePinCode
                                        }
                                        onChange={this.handleDropDownChange}
                                        name="storePinCode"
                                        placeholder="Store Pin Code"
                                      />
                                    </div>
                                  </div>
                                )} */}
                                {this.state.displayTicketFields[
                                  "Store Phone No"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Phone No".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Phone No".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Phone No".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storephoneno
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Phone No".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Phone No"
                                                : "Store Phone No"
                                              : "Store Phone No"
                                            : "Store Phone No"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Phone No".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          disabled={this.state.isPhoneDisabled}
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storePhoneNo
                                          }
                                          onChange={this.handleDropDownChange}
                                          placeholder="Store Phone No"
                                          name="storePhoneNo"
                                          autoComplete="off"
                                        />
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store Email ID"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Email ID".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Email ID".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Email ID".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storeemailid
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Email ID".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Email ID"
                                                : "Store Email ID"
                                              : "Store Email ID"
                                            : "Store Email ID"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Email ID".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          disabled
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeEmailID
                                          }
                                          placeholder="Store Email ID"
                                          onChange={this.handleDropDownChange}
                                          name="storeEmailID"
                                        />
                                      </div>
                                    </div>
                                  )}
                              </>
                            )}
                            {/* This block will be visible when channel of purchase is "Retail" */}
                            {this.state.channelOfPurchaseName === "retail" && (
                              <>
                                {this.state.displayTicketFields[
                                  "Store Name"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Name".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Name".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Name".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storename
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Name".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Name"
                                                : "Store Name"
                                              : "Store Name"
                                            : "Store Name"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Name".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeName
                                          }
                                          placeholder="Store Name"
                                          onChange={this.handleDropDownChange}
                                          name="storeName"
                                          autoComplete="off"
                                        />
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store City"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store City".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store City".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store City".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storecity
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store City".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store City"
                                                : "Store City"
                                              : "Store City"
                                            : "Store City"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store City".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeCity
                                          }
                                          placeholder="Store City"
                                          onChange={this.handleDropDownChange}
                                          name="storeCity"
                                          autoComplete="off"
                                        />
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store Address"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Address".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Address".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Address".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storeaddress
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Address".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Address"
                                                : "Store Address"
                                              : "Store Address"
                                            : "Store Address"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Address".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <textarea
                                          className={
                                            this.state.isKB
                                              ? "rectangle-11 select-category-placeholder iskbticket"
                                              : "rectangle-11 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeAddress
                                          }
                                          onChange={this.handleDropDownChange}
                                          name="storeAddress"
                                          placeholder="Store Address"
                                          rows={3}
                                          autoComplete="off"
                                        ></textarea>
                                      </div>
                                    </div>
                                  )}
                                {/* {this.state.displayTicketFields[
                                  "Store Pin Code"
                                ] && (
                                  <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                    <div className="form-group">
                                      <label className="label-4">
                                        {this.state.ticketFields.length > 0
                                          ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Pin Code".toLowerCase()
                                            ).length > 0
                                            ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Pin Code".toLowerCase()
                                              )[0].createPage
                                              ? TranslationContext !== undefined
                                                ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Pin Code".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storepincode
                                                : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Pin Code".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Pin Code"
                                              : "Store Pin Code"
                                            : "Store Pin Code"
                                          : "Store Pin Code"}
                                      </label>
                                      <input
                                        className={
                                          this.state.isKB
                                            ? "rectangle-10 select-category-placeholder iskbticket"
                                            : "rectangle-10 select-category-placeholder"
                                        }
                                        value={
                                          this.state.selectetedParameters
                                            .storePinCode
                                        }
                                        onChange={this.handleDropDownChange}
                                        name="storePinCode"
                                        placeholder="Store Pin Code"
                                      />
                                    </div>
                                  </div>
                                )} */}
                                {this.state.displayTicketFields[
                                  "Store Phone No"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Phone No".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Phone No".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Phone No".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storephoneno
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Phone No".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Phone No"
                                                : "Store Phone No"
                                              : "Store Phone No"
                                            : "Store Phone No"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Phone No".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storePhoneNo
                                          }
                                          onChange={this.handleDropDownChange}
                                          placeholder="Store Phone No"
                                          name="storePhoneNo"
                                          autoComplete="off"
                                        />
                                      </div>
                                    </div>
                                  )}
                                {this.state.displayTicketFields[
                                  "Store Email ID"
                                ] && (
                                    <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                      <div className="form-group">
                                        <label className="label-4">
                                          {/* {this.state.ticketFields.length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Email ID".toLowerCase()
                                            ).length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Store Email ID".toLowerCase()
                                              )[0].createPage
                                                ? TranslationContext !== undefined
                                                  ? this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Email ID".toLowerCase()
                                                  )[0].displayHindiName ||
                                                  TranslationContext.label
                                                    .storeemailid
                                                  : this.state.ticketFields.filter(
                                                    (x) =>
                                                      x.fieldName.toLowerCase() ===
                                                      "Store Email ID".toLowerCase()
                                                  )[0].displayEnglishName ||
                                                  "Store Email ID"
                                                : "Store Email ID"
                                              : "Store Email ID"
                                            : "Store Email ID"} */}
                                          {
                                            this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Store Email ID".toLowerCase()
                                            )[0]?.displayEnglishName
                                          }
                                        </label>
                                        <input
                                          className={
                                            this.state.isKB
                                              ? "rectangle-10 select-category-placeholder iskbticket"
                                              : "rectangle-10 select-category-placeholder"
                                          }
                                          value={
                                            this.state.selectetedParameters
                                              .storeEmailID
                                          }
                                          placeholder="Store Email ID"
                                          onChange={this.handleDropDownChange}
                                          name="storeEmailID"
                                          autoComplete="off"
                                        />
                                      </div>
                                    </div>
                                  )}
                              </>
                            )}
                            {/* This block will be visible when channel of purchase is "Export" */}
                            {this.state.channelOfPurchaseName === "export" && (
                              <>
                                {this.state.displayTicketFields["Country"] && (
                                  <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                    <div className="form-group">
                                      <label className="label-4">
                                        {/* {this.state.ticketFields.length > 0
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Country".toLowerCase()
                                          ).length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Country".toLowerCase()
                                            )[0].createPage
                                              ? TranslationContext !== undefined
                                                ? this.state.ticketFields.filter(
                                                  (x) =>
                                                    x.fieldName.toLowerCase() ===
                                                    "Country".toLowerCase()
                                                )[0].displayHindiName ||
                                                TranslationContext.label
                                                  .country
                                                : this.state.ticketFields.filter(
                                                  (x) =>
                                                    x.fieldName.toLowerCase() ===
                                                    "Country".toLowerCase()
                                                )[0].displayEnglishName ||
                                                "Country"
                                              : "Country"
                                            : "Country"
                                          : "Country"} */}
                                        {
                                          this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Country".toLowerCase()
                                          )[0]?.displayEnglishName
                                        }
                                      </label>
                                      <input
                                        className={
                                          this.state.isKB
                                            ? "rectangle-10 select-category-placeholder iskbticket"
                                            : "rectangle-10 select-category-placeholder"
                                        }
                                        value={
                                          this.state.selectetedParameters
                                            .country
                                        }
                                        placeholder="Country"
                                        onChange={this.handleDropDownChange}
                                        name="country"
                                        autoComplete="off"
                                      />
                                    </div>
                                  </div>
                                )}
                                {this.state.displayTicketFields["Region"] && (
                                  <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                    <div className="form-group">
                                      <label className="label-4">
                                        {/* {this.state.ticketFields.length > 0
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Region".toLowerCase()
                                          ).length > 0
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "Region".toLowerCase()
                                            )[0].createPage
                                              ? TranslationContext !== undefined
                                                ? this.state.ticketFields.filter(
                                                  (x) =>
                                                    x.fieldName.toLowerCase() ===
                                                    "Region".toLowerCase()
                                                )[0].displayHindiName ||
                                                TranslationContext.label
                                                  .region
                                                : this.state.ticketFields.filter(
                                                  (x) =>
                                                    x.fieldName.toLowerCase() ===
                                                    "Region".toLowerCase()
                                                )[0].displayEnglishName ||
                                                "Region"
                                              : "Region"
                                            : "Region"
                                          : "Region"} */}
                                        {
                                          this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Region".toLowerCase()
                                          )[0]?.displayEnglishName
                                        }
                                      </label>
                                      <input
                                        className={
                                          this.state.isKB
                                            ? "rectangle-10 select-category-placeholder iskbticket"
                                            : "rectangle-10 select-category-placeholder"
                                        }
                                        value={
                                          this.state.selectetedParameters.region
                                        }
                                        placeholder="Region"
                                        onChange={this.handleDropDownChange}
                                        name="region"
                                        autoComplete="off"
                                      />
                                    </div>
                                  </div>
                                )}
                              </>
                            )}
                            {/* This block will be visible when channel of purchase is "Mkt-place" */}
                            {this.state.channelOfPurchaseName ===
                              "mktplace" && (
                                <>
                                  {this.state.displayTicketFields[
                                    "Mkt-Place"
                                  ] && (
                                      <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                        <div className="form-group">
                                          <label className="label-4">
                                            {/* {this.state.ticketFields.length > 0
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Mkt Place".toLowerCase()
                                              ).length > 0
                                                ? this.state.ticketFields.filter(
                                                  (x) =>
                                                    x.fieldName.toLowerCase() ===
                                                    "Mkt Place".toLowerCase()
                                                )[0].createPage
                                                  ? TranslationContext !== undefined
                                                    ? this.state.ticketFields.filter(
                                                      (x) =>
                                                        x.fieldName.toLowerCase() ===
                                                        "Mkt Place".toLowerCase()
                                                    )[0].displayHindiName ||
                                                    TranslationContext.label
                                                      .mktplace
                                                    : this.state.ticketFields.filter(
                                                      (x) =>
                                                        x.fieldName.toLowerCase() ===
                                                        "Mkt Place".toLowerCase()
                                                    )[0].displayEnglishName ||
                                                    "Mkt Place"
                                                  : "Mkt Place"
                                                : "Mkt Place"
                                              : "Mkt Place"} */}
                                            {
                                              this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "Mkt Place".toLowerCase()
                                              )[0]?.displayEnglishName
                                            }
                                          </label>
                                          <select
                                            className={
                                              this.state.isKB
                                                ? "rectangle-9 select-category-placeholder iskbticket"
                                                : "rectangle-9 select-category-placeholder"
                                            }
                                            value={
                                              this.state.selectetedParameters
                                                .mktPlace
                                            }
                                            onChange={this.handleDropDownChange}
                                            name="mktPlace"
                                          >
                                            <option value="">Select</option>
                                            {this.state.mktPlaceList.map((mkt) => {
                                              return (
                                                <option value={mkt.mktPlace}>
                                                  {mkt.mktPlace}
                                                </option>
                                              );
                                            })}
                                          </select>
                                        </div>
                                      </div>
                                    )}
                                </>
                              )}
                          </>
                        )}
                        {this.state.displayTicketFields[
                          "Ticket Action Type"
                        ] && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div
                                // className={
                                //   this.state.role_Name === "Supervisor"
                                //     ? "form-group"
                                //     : "form-group disabled-link" &&
                                //       this.state.role_Name === "Admin"
                                //     ? "form-group"
                                //     : "form-group disabled-link"
                                // }
                                className="form-group"
                              >
                                <label className="label-4">
                                  {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Ticket Action Type".toLowerCase()
                                    ).length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Ticket Action Type".toLowerCase()
                                      )[0].detailsPage
                                        ? TranslationContext !== undefined
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Ticket Action Type".toLowerCase()
                                          )[0].displayHindiName ||
                                          TranslationContext.label
                                            .ticketactiontype
                                          : this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Ticket Action Type".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Ticket Action Type"
                                        : TranslationContext !== undefined
                                          ? TranslationContext.label
                                            .ticketactiontype
                                          : "Ticket Action Type"
                                      : TranslationContext !== undefined
                                        ? TranslationContext.label.ticketactiontype
                                        : "Ticket Action Type"
                                    : TranslationContext !== undefined
                                      ? TranslationContext.label.ticketactiontype
                                      : "Ticket Action Type"}
                                </label>
                                <select
                                  className={
                                    this.state.isKB
                                      ? "rectangle-9 select-category-placeholder iskbticket"
                                      : "rectangle-9 select-category-placeholder"
                                  }
                                  value={
                                    this.state.selectetedParameters
                                      .ticketActionTypeID
                                  }
                                  onChange={this.handleDropDownChange}
                                  name="ticketActionTypeID"
                                >
                                  <option className="select-category-placeholder">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.ticketingDashboard
                                        .selectticketactiontype
                                      : "Select Ticket Action Type"}
                                  </option>
                                  {this.state.TicketActionTypeData !== null &&
                                    this.state.TicketActionTypeData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={item.ticketActionTypeID}
                                          className="select-category-placeholder"
                                        >
                                          {item.ticketActionTypeName}
                                        </option>
                                      )
                                    )}
                                </select>
                              </div>
                            </div>
                          )}
                        {this.state.displayTicketFields["Customer Type"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Customer Type".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Customer Type".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Customer Type".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Customer Type".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Customer Type"
                                      : "Customer Type"
                                    : "Customer Type"
                                  : "Customer Type"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Customer Type".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.customerType
                                }
                                onChange={this.handleDropDownChange}
                                name="customerType"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.customerTypeData.length > 0
                                  ? this.state.customerTypeData.map(
                                    (item, i) => (
                                      <option
                                        key={i}
                                        value={item.customerType_Id + ""}
                                        className="select-category-placeholder"
                                      >
                                        {item.customerType_Name}
                                      </option>
                                    )
                                  )
                                  : null}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Complaint Call"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Complaint Call".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Complaint Call".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Complaint Call".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Complaint Call".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Complaint Call"
                                      : "Complaint Call"
                                    : "Complaint Call"
                                  : "Complaint Call"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Complaint Call".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.complaintCall
                                }
                                onChange={this.handleDropDownChange}
                                name="complaintCall"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.complaintCallData !== null &&
                                  this.state.complaintCallData.map(
                                    (item, i) => (
                                      <option
                                        key={i}
                                        value={item.complaintCall_Id + ""}
                                        className="select-category-placeholder"
                                      >
                                        {item.complaintCall_Name}
                                      </option>
                                    )
                                  )}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields[
                          "Consulting Hospital"
                        ] && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div
                                // className={
                                //   this.state.role_Name === "Supervisor"
                                //     ? "form-group"
                                //     : "form-group disabled-link" &&
                                //       this.state.role_Name === "Admin"
                                //     ? "form-group"
                                //     : "form-group disabled-link"
                                // }
                                className="form-group"
                              >
                                <label className="label-4">
                                  {/* {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Consulting Hospital".toLowerCase()
                                    ).length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Consulting Hospital".toLowerCase()
                                      )[0].createPage
                                        ? TranslationContext !== undefined
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Consulting Hospital".toLowerCase()
                                          )[0].displayHindiName ||
                                          TranslationContext.label
                                            .channelofpurchase
                                          : this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Consulting Hospital".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Consulting Hospital"
                                        : "Consulting Hospital"
                                      : "Consulting Hospital"
                                    : "Consulting Hospital"} */}
                                  {
                                    this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Consulting Hospital".toLowerCase()
                                    )[0]?.displayEnglishName
                                  }
                                </label>
                                <select
                                  className={
                                    this.state.isKB
                                      ? "rectangle-9 select-category-placeholder iskbticket"
                                      : "rectangle-9 select-category-placeholder"
                                  }
                                  value={
                                    this.state.selectetedParameters
                                      .consultingHospital
                                  }
                                  onChange={this.handleDropDownChange}
                                  name="consultingHospital"
                                >
                                  <option className="select-category-placeholder">
                                    Select
                                  </option>
                                  {this.state.consultingHospitalData
                                    ? this.state.consultingHospitalData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={
                                            item.consultingHospital_Id + ""
                                          }
                                          className="select-category-placeholder"
                                        >
                                          {item.consultingHospital_Name}
                                        </option>
                                      )
                                    )
                                    : null}
                                </select>
                              </div>
                            </div>
                          )}
                        {this.state.displayTicketFields["Purpose Of Visit"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {this.state.ticketFields.filter(
                                  (x) =>
                                    x.fieldName.toLowerCase() ===
                                    "Purpose Of Visit".toLowerCase()
                                )[0]?.displayEnglishName || "Purpose Of Visit"}
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Purpose Of Visit".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Purpose Of Visit".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Purpose Of Visit".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Purpose Of Visit".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Purpose Of Visit"
                                      : "Purpose Of Visit"
                                    : "Purpose Of Visit"
                                  : "Purpose Of Visit"} */}
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.purposeOfVisit
                                }
                                onChange={this.handleDropDownChange}
                                name="purposeOfVisit"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.purposeVisitData
                                  ? this.state.purposeVisitData.map(
                                    (item, i) => (
                                      <option
                                        key={i}
                                        value={item.purposeOfVisit_Id + ""}
                                        className="select-category-placeholder"
                                      >
                                        {item.purposeOfVisit_Name}
                                      </option>
                                    )
                                  )
                                  : null}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Unit Name"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Unit Name".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Unit Name".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Unit Name".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Unit Name".toLowerCase()
                                        )[0].displayEnglishName || "Unit Name"
                                      : "Unit Name"
                                    : "Unit Name"
                                  : "Unit Name"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Unit Name".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters.unitName}
                                onChange={this.handleDropDownChange}
                                name="unitName"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.unitNameData !== null &&
                                  this.state.unitNameData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.unitName_Id + ""}
                                      className="select-category-placeholder"
                                    >
                                      {item.unitName_Name}
                                    </option>
                                  ))}
                              </select>
                              {this.state.UnitNameError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.UnitNameError}
                                </p>
                              )}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Department Name"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Department Name".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Department Name".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Department Name".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Department Name".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Department Name"
                                      : "Department Name"
                                    : "Department Name"
                                  : "Department Name"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Department Name".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.departmentName
                                }
                                onChange={this.handleDropDownChange}
                                name="departmentName"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.departmentData
                                  ? this.state.departmentData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.departmentName_Id + ""}
                                      className="select-category-placeholder"
                                    >
                                      {item.departmentName_Name}
                                    </option>
                                  ))
                                  : null}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields[
                          "Consulting Doctor"
                        ] && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div
                                // className={
                                //   this.state.role_Name === "Supervisor"
                                //     ? "form-group"
                                //     : "form-group disabled-link" &&
                                //       this.state.role_Name === "Admin"
                                //     ? "form-group"
                                //     : "form-group disabled-link"
                                // }
                                className="form-group"
                              >
                                <label className="label-4">
                                  {/* {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Consulting Doctor".toLowerCase()
                                    ).length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Consulting Doctor".toLowerCase()
                                      )[0].createPage
                                        ? TranslationContext !== undefined
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Consulting Doctor".toLowerCase()
                                          )[0].displayHindiName ||
                                          TranslationContext.label
                                            .channelofpurchase
                                          : this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Consulting Doctor".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Consulting Doctor"
                                        : "Consulting Doctor"
                                      : "Consulting Doctor"
                                    : "Consulting Doctor"} */}
                                  {
                                    this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Consulting Doctor".toLowerCase()
                                    )[0]?.displayEnglishName
                                  }
                                </label>
                                <select
                                  className={
                                    this.state.isKB
                                      ? "rectangle-9 select-category-placeholder iskbticket"
                                      : "rectangle-9 select-category-placeholder"
                                  }
                                  value={
                                    this.state.selectetedParameters
                                      .consultingDoctor
                                  }
                                  onChange={this.handleDropDownChange}
                                  name="consultingDoctor"
                                >
                                  <option className="select-category-placeholder">
                                    Select
                                  </option>
                                  {this.state.consultingDoctorData !== null &&
                                    this.state.consultingDoctorData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={item.consultingDoctor_Id + ""}
                                          className="select-category-placeholder"
                                        >
                                          {item.consultingDoctor_Name}
                                        </option>
                                      )
                                    )}
                                </select>
                              </div>
                            </div>
                          )}
                        {this.state.displayTicketFields["Unit City"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Unit City".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Unit City".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Unit City".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Unit City".toLowerCase()
                                        )[0].displayEnglishName || "Unit City"
                                      : "Unit City"
                                    : "Unit City"
                                  : "Unit City"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Unit City".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters.unitCity}
                                onChange={this.handleDropDownChange}
                                name="unitCity"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.unitCitytData
                                  ? this.state.unitCitytData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.unitCity_Id + ""}
                                      className="select-category-placeholder"
                                    >
                                      {item.unitCity_Name}
                                    </option>
                                  ))
                                  : null}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["LOB"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "LOB".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "LOB".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "LOB".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "LOB".toLowerCase()
                                        )[0].displayEnglishName || "LOB"
                                      : "LOB"
                                    : "LOB"
                                  : "LOB"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "LOB".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters.lob}
                                onChange={this.handleDropDownChange}
                                name="lob"
                              >
                                <option className="select-category-placeholder">
                                  Select
                                </option>
                                {this.state.lOBData !== null &&
                                  this.state.lOBData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.loB_Id + ""}
                                      className="select-category-placeholder"
                                    >
                                      {item.loB_Name}
                                    </option>
                                  ))}
                              </select>
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields[
                          "Appointment DateTime"
                        ] && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div
                                // className={
                                //   this.state.role_Name === "Supervisor"
                                //     ? "form-group"
                                //     : "form-group disabled-link" &&
                                //       this.state.role_Name === "Admin"
                                //     ? "form-group"
                                //     : "form-group disabled-link"
                                // }
                                className="form-group"
                              >
                                <label className="label-4">
                                  {/* {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Appointment DateTime".toLowerCase()
                                    ).length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Appointment DateTime".toLowerCase()
                                      )[0].createPage
                                        ? TranslationContext !== undefined
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Appointment DateTime".toLowerCase()
                                          )[0].displayHindiName ||
                                          TranslationContext.label
                                            .channelofpurchase
                                          : this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Appointment DateTime".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Appointment DateTime"
                                        : "Appointment DateTime"
                                      : "Appointment DateTime"
                                    : "Appointment DateTime"} */}
                                  {
                                    this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Appointment DateTime".toLowerCase()
                                    )[0]?.displayEnglishName
                                  }
                                </label>
                                <DatePicker
                                  className={
                                    this.state.isKB
                                      ? "rectangle-10 select-category-placeholder iskbticket txt-1"
                                      : "rectangle-10 select-category-placeholder"
                                  }
                                  placeholderText={"Select"}
                                  showIcon
                                  name="appointmentDateTime"
                                  showMonthDropdown
                                  showYearDropdown
                                  showTimeSelect
                                  dateFormat="dd/MM/yyyy h:mm aa"
                                  selected={
                                    this.state.selectetedParameters
                                      .appointmentDate
                                  }
                                  onChange={this.handleTicketFieldInputDateChange.bind(
                                    this,
                                    "appointmentDate"
                                  )}
                                  autoComplete="off"
                                  popperPlacement="bottom"
                                  withPortal
                                  minDate={new Date()}
                                />
                              </div>
                            </div>
                          )}
                        {this.state.displayTicketFields["Call Back"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Call Back".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Call Back".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Call Back".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Call Back".toLowerCase()
                                        )[0].displayEnglishName || "Call Back"
                                      : "Call Back"
                                    : "Call Back"
                                  : "Call Back"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Call Back".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={this.state.selectetedParameters.callBack}
                                onChange={this.handleDropDownChange}
                                name="callBack"
                              >
                                <option
                                  value={null}
                                  className="select-category-placeholder"
                                >
                                  Select
                                </option>

                                <option
                                  value={true}
                                  className="select-category-placeholder"
                                >
                                  Yes
                                </option>
                                <option
                                  value={false}
                                  className="select-category-placeholder"
                                >
                                  No
                                </option>
                              </select>
                            </div>
                          </div>
                        )}

                        {this.state.selectetedParameters.callBack === "true" ||
                          this.state.selectetedParameters.callBack === true ? (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              // className={
                              //   this.state.role_Name === "Supervisor"
                              //     ? "form-group"
                              //     : "form-group disabled-link" &&
                              //       this.state.role_Name === "Admin"
                              //     ? "form-group"
                              //     : "form-group disabled-link"
                              // }
                              className="form-group"
                            >
                              <label className="label-4">
                                {/* {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Call Back DateTime".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Call Back DateTime".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Call Back DateTime".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Call Back DateTime".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Call Back DateTime"
                                      : "Call Back DateTime"
                                    : "Call Back DateTime"
                                  : "Call Back DateTime"} */}
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Call Back DateTime".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <DatePicker
                                className={
                                  this.state.isKB
                                    ? "rectangle-10 select-category-placeholder iskbticket txt-1"
                                    : "rectangle-10 select-category-placeholder"
                                }
                                placeholderText={"Select"}
                                showIcon
                                name="callBackDate"
                                showMonthDropdown
                                showYearDropdown
                                showTimeSelect
                                dateFormat="dd/MM/yyyy h:mm aa"
                                selected={
                                  this.state.selectetedParameters.callBackDate
                                }
                                onChange={this.handleTicketFieldInputDateChange.bind(
                                  this,
                                  "callBackDate"
                                )}
                                autoComplete="off"
                                popperPlacement="bottom"
                                withPortal
                                minDate={new Date()}
                              />
                            </div>
                          </div>
                        ) : null}{" "}
                        {/* Resolution Status */}
                        {// window.localStorage.getItem('Programcode') === 'campusshoes' &&
                          tenantFlags?.isResolutionStatus &&
                          this.state.selectetedParameters.ticketStatusID ==
                          103 && (
                            <>
                              <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                <div className="form-group">
                                  <label className="label-4">
                                    {/* {this.state.ticketFields.length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "ResolutionStatusId".toLowerCase()
                                      ).length > 0
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "ResolutionStatusId".toLowerCase()
                                        )[0].detailsPage
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "ResolutionStatusId".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Resolution Status"
                                          : "Resolution Status"
                                        : "Resolution Status"
                                      : "Resolution Status"} */}
                                    {
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "ResolutionStatusId".toLowerCase()
                                      )[0]?.displayEnglishName
                                    }
                                  </label>
                                  <select
                                    className={
                                      this.state.isKB
                                        ? "rectangle-9 select-category-placeholder iskbticket"
                                        : "rectangle-9 select-category-placeholder"
                                    }
                                    // value={
                                    //   this.state.selectetedParameters.resolutionStatusId
                                    // }
                                    value={this.state.selectedResolution}
                                    onChange={this.handleResolution}
                                    name="resolutionStatusId"
                                  >
                                    <option
                                      className="select-category-placeholder"
                                      readOnly
                                    >
                                      {"Select Resolution Status"}
                                      {/* {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Business Unit Category"} */}
                                    </option>
                                    {this.state.resolutionData !== null &&
                                      this.state.resolutionData.map(
                                        (item, i) => (
                                          <option
                                            key={i}
                                            value={item.name}
                                            className="select-category-placeholder"
                                          >
                                            {item.name}
                                          </option>
                                        )
                                      )}
                                  </select>
                                </div>
                              </div>
                              {this.state.selectedResolution === "Other" && (
                                <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4">
                                  <label className="label-4">
                                    {/* {this.state.ticketFields.length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "ResolutionStatusComment".toLowerCase()
                                      ).length > 0
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "ResolutionStatusComment".toLowerCase()
                                        )[0].detailsPage
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "ResolutionStatusComment".toLowerCase()
                                          )[0].displayEnglishName ||
                                          "Resolution Status Comment"
                                          : "Resolution Status Comment"
                                        : "Resolution Status Comment"
                                      : "Resolution Status Comment"} */}
                                    {
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Resolution Status Comment".toLowerCase()
                                      )[0]?.displayEnglishName
                                    }
                                  </label>
                                  <input
                                    type="text"
                                    className="res_other_comment"
                                    placeholder={
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "ResolutionStatusComment".toLowerCase()
                                      )[0]?.displayEnglishName
                                    }
                                    value={this.state.resolutionComment}
                                    name="resolutionComment"
                                    autoComplete="off"
                                    onChange={this.handleGetresolutionComment}
                                  />
                                </div>
                              )}
                            </>
                          )}
                        {// window.localStorage.getItem('Programcode') === 'campusshoes' &&

                          this.state.selectetedParameters.ticketActionTypeID ===
                          202 && (
                            <>
                              <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                                <div className="form-group">
                                  <label className="label-4">
                                    {this.state.ticketFields.length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "EscalationSource".toLowerCase()
                                      )[0].displayEnglishName
                                      : "Escalation Source"}
                                  </label>
                                  <select
                                    className={
                                      this.state.isKB
                                        ? "rectangle-9 select-category-placeholder iskbticket"
                                        : "rectangle-9 select-category-placeholder"
                                    }
                                    value={
                                      this.state.selectetedParameters
                                        .escalationStatusId
                                    }
                                    // value={this.state.selectedResolution}
                                    onChange={(e) =>
                                      this.handleEscalationStatus(e)
                                    }
                                  //name="resolutionStatusId"
                                  >
                                    <option
                                      className="select-category-placeholder"
                                      readOnly
                                    >
                                      {"Select Escalation Status"}
                                      {/* {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Escalation Status""} */}
                                    </option>
                                    {this.state.EscalationStatusData !== null &&
                                      this.state.EscalationStatusData.map(
                                        (item, i) => (
                                          <option
                                            key={i}
                                            value={item.id}
                                            className="select-category-placeholder"
                                          >
                                            {item.name}
                                          </option>
                                        )
                                      )}
                                  </select>
                                  {/* {this.state.escError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.escalationsourceerror}
                                </p>
                              )} */}
                                </div>
                              </div>
                            </>
                          )}
                        {this.state.selectetedParameters.ticketActionTypeID ===
                          202 && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div className="form-group">
                                <label className="label-4">Escalation Date</label>
                                <input
                                  className="rectangle-9 select-category-placeholder"
                                  type="date"
                                  max={todayDate}
                                  onChange={(e) => this.handleEscalationDate(e)}
                                  value={
                                    this.state.selectetedParameters.escalationDate
                                  }
                                />
                              </div>
                            </div>
                          )

                          // <div
                          //   className="col-md-3 ticketreport"
                          //   style={{
                          //     display: this.state.CreateDateShowRecord,
                          //   }}
                          // >

                          //   <label className="label-4">
                          //     {TranslationContext !== undefined
                          //       ? TranslationContext.label.creationdate
                          //       : "Escalation Date"}
                          //   </label>
                          //   <div className="ticketreportdat">
                          //     <input type="date"/>
                          //     {/* <DatePicker
                          //       selected={this.state.ReportCreateDate}
                          //       //onChange={this.handleReportCreateDate.bind(this)}
                          //       placeholderText={
                          //         TranslationContext !== undefined
                          //           ? TranslationContext.label.creationdate
                          //           : "Creation Date"
                          //       }
                          //       showMonthDropdown
                          //       showYearDropdown
                          //       dateFormat="dd/MM/yyyy"
                          //       value={this.state.ReportCreateDate}

                          //     /> */}

                          //   </div>
                          // </div>
                        }

                        {
                          this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                            "TicketCSATScore".toLowerCase()
                          )[0]?.displayEnglishName &&
                          (this.state.ticketDetailsData.status === 103 || this.state.ticketDetailsData.status === 104) &&
                          (<div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div className="form-group">
                              <div className="order_input">
                                <label className="label-4">{this.state.ticketFields.length > 0 ?
                                  this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                                    "TicketCSATScore".toLowerCase()
                                  )[0]?.displayEnglishName : "CSAT Score"}</label>
                                <input
                                  maxLength={1}
                                  type="text"
                                  className="w-100 rectangle-9 csatscore"
                                  value={this.state.ticketDetailsData.ticketCSATScore == 0 ? "Not Available" : this.state.ticketDetailsData.ticketCSATScore}
                                  readOnly
                                />
                              </div>
                            </div>
                          </div>)
                        }
                        {/* WIP pending status */}
                        {// window.localStorage.getItem('Programcode') === 'campusshoes' &&
                          tenantFlags?.isPendingReasonStatus &&
                          this.state.selectetedParameters.ticketStatusID ==
                          107 &&
                          this.state.ticketFields.filter(
                            (a) =>
                              a.fieldName.toLowerCase() ===
                              "PendingReasonId".toLowerCase()
                          )[0]?.detailsPage && (
                            <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                              <div className="form-group">
                                <label className="label-4">
                                  {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "PendingReasonId".toLowerCase()
                                    )[0].displayEnglishName ||
                                    "Pending Reason"
                                    : "Pending Reason"}
                                </label>
                                <select
                                  className={
                                    this.state.isKB
                                      ? "rectangle-9 select-category-placeholder iskbticket"
                                      : "rectangle-9 select-category-placeholder"
                                  }
                                  value={
                                    this.state.selectetedParameters
                                      ?.selectedPendingReason
                                  }
                                  onChange={this.handleGetPendingReason}
                                  name="selectedPendingReason"
                                >
                                  <option
                                    className="select-category-placeholder"
                                    readOnly
                                  >
                                    {"Select Pending Reason"}
                                    {/* {TranslationContext !== undefined
                                    ? TranslationContext.option
                                      .selectsubcategory
                                    : "Select Business Unit Category"} */}
                                  </option>
                                  {this.state.pendingReasonData !== null &&
                                    this.state.pendingReasonData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={item.pendingResonId}
                                          className="select-category-placeholder"
                                        >
                                          {item.pendingResonStatusName}
                                        </option>
                                      )
                                    )}
                                </select>
                              </div>
                            </div>
                          )}
                        {/* emotion senti */}
                        {this.state.displayTicketFields["Sentiment"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              className="form-group"
                            >
                              <label className="label-4">
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Sentiment".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.sentimentID
                                }
                                onChange={this.handleDropDownChange}
                                name="sentimentID"
                              >
                                <option className="select-category-placeholder">
                                  {"Select Sentiment"}

                                </option>
                                {this.state.sentimentDropData !== null &&
                                  this.state.sentimentDropData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.sentimentID}
                                      className="select-category-placeholder"
                                    >
                                      {item.sentimentName}
                                    </option>
                                  ))}
                              </select>
                              {/* {this.state.sentimentError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.sentimentError}
                                </p>
                              )} */}
                            </div>
                          </div>
                        )}
                        {this.state.displayTicketFields["Emotion"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div

                              className="form-group"
                            >
                              <label className="label-4">
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Emotion".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.emotionID
                                }
                                onChange={this.handleDropDownChange}
                                name="emotionID"
                              >
                                <option className="select-category-placeholder">
                                  {"Select Emotion"}

                                </option>
                                {this.state.emotionalDropData !== null &&
                                  this.state.emotionalDropData.map((item, i) => (
                                    <option
                                      key={i}
                                      value={item.emotionID}
                                      className="select-category-placeholder"
                                    >
                                      {item.emotionName}
                                    </option>
                                  ))}
                              </select>
                              {/* {this.state.emotionError !== "" && (
                                <p
                                  style={{ color: "red", marginBottom: "0px" }}
                                >
                                  {this.state.emotionError}
                                </p>
                              )} */}
                            </div>
                          </div>
                        )}
                        {/* emotion senti */}

                        {/* escalationmanagement */}
                        {this.state.displayTicketFields["EscalationManagement"] && (
                          <div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div
                              className="form-group"
                            >
                              <label className="label-4">
                                {
                                  this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "EscalationManagement".toLowerCase()
                                  )[0]?.displayEnglishName
                                }
                              </label>
                              <select
                                className={
                                  this.state.isKB
                                    ? "rectangle-9 select-category-placeholder iskbticket"
                                    : "rectangle-9 select-category-placeholder"
                                }
                                value={
                                  this.state.selectetedParameters.escalationtomanagement
                                }
                                onChange={this.handleDropDownChange}
                                name="escalationtomanagement"
                              >
                                <option className="select-category-placeholder">
                                  {"Select"}

                                </option>
                                <option value={"Yes"}>
                                  Yes
                                </option>
                                <option value={"No"}>
                                  No
                                </option>
                              </select>
                              {/* {this.state.sentimentError !== "" && (
                                  <p
                                    style={{ color: "red", marginBottom: "0px" }}
                                  >
                                    {this.state.sentimentError}
                                  </p>
                                )} */}
                            </div>
                          </div>
                        )}
                        {/* escalationmanagement  */}
                        {
                          this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                            "LastInteractionDateByStoreStaff".toLowerCase()
                          )[0]?.displayEnglishName &&
                          (<div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div className="form-group">
                              <div className="order_input">
                                <label className="label-4">{this.state.ticketFields.length > 0 ?
                                  this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                                    "LastInteractionDateByStoreStaff".toLowerCase()
                                  )[0]?.displayEnglishName : "Last Interaction Date By Staff"}</label>
                                <input
                                  type="text"
                                  className="w-100 rectangle-9 csatscore"
                                  value={this.state.ticketDetailsData.lastInteractionDateByStaff == "" ? "Not Available" : this.state.ticketDetailsData.lastInteractionDateByStaff}
                                  readOnly
                                />
                              </div>
                            </div>
                          </div>)
                        }
                        {
                          this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                            "LastInteractionDateByCustomer".toLowerCase()
                          )[0]?.displayEnglishName &&

                          (<div className="col-12 col-xs-12 col-sm-6 col-md-6 col-lg-4 dropdrown">
                            <div className="form-group">
                              <div className="order_input">
                                <label className="label-4">{this.state.ticketFields.length > 0 ?
                                  this.state.ticketFields.filter((x) => x.fieldName.toLowerCase() ===
                                    "LastInteractionDateByCustomer".toLowerCase()
                                  )[0]?.displayEnglishName : "Last Interaction Date By Customer"}</label>
                                <input
                                  type="text"
                                  className="w-100 rectangle-9 csatscore"
                                  value={this.state.ticketDetailsData.lastInteractionDateByCustomer == "" ? "Not Available" : this.state.ticketDetailsData.lastInteractionDateByCustomer}
                                  readOnly
                                />
                              </div>
                            </div>
                          </div>)
                        }
                      </div>
                    </div>
                  </div>
                  {!flags?.isHorizontal &&
                    this.state.displayTicketFields["Store"] && (
                      <div className="col-md-3">
                        <div style={{ padding: "15px 0" }}>
                          <div className="storebox">
                            <div className="form-group">
                              {window.localStorage.getItem("isAttachStore") ===
                                "false" ? null : (
                                <label className="label-4 storeSpacing">
                                  {/* {TranslationContext !== undefined
                            ? TranslationContext.a.store
                            : "Store"} */}
                                  {/* {this.state.ticketFields.length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Store".toLowerCase()
                                    ).length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Store".toLowerCase()
                                      )[0].createPage
                                        ? TranslationContext !== undefined
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Store".toLowerCase()
                                          )[0].displayHindiName ||
                                          TranslationContext.label
                                            .channelofpurchase
                                          : this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "Store".toLowerCase()
                                          )[0].displayEnglishName || "Store"
                                        : "Store"
                                      : "Store"
                                    : "Store"} */}
                                  {
                                    this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Store".toLowerCase()
                                    )[0]?.displayEnglishName
                                  }
                                </label>
                              )}
                              {window.localStorage.getItem("isAttachStore") ===
                                "false" ? null : (
                                <a
                                  href="#!"
                                  className="bata-rajouri-garden d-inline-block"
                                  onClick={this.HandleStoreModalOpen.bind(this)}
                                >
                                  {this.state.StoreName === "" ? (
                                    <label className="label-4 storeSpacing">
                                      {TranslationContext !== undefined
                                        ? TranslationContext.ticketingDashboard
                                          .nostorattached
                                        : "No Store Attached"}
                                    </label>
                                  ) : (
                                    this.state.StoreName
                                  )}
                                  &nbsp;
                                  <img
                                    src={PencilImg}
                                    alt="Pencile"
                                    className="pencilImg"
                                    title="Attach Store"
                                  />
                                </a>
                              )}
                              <Modal
                                open={this.state.storemodal}
                                onClose={this.HandleStoreModalClose.bind(this)}
                                modalId="addStoreTableModal"
                                overlayId="logout-ovrly"
                              >
                                <div className="row storemainrow">
                                  <div className={"col-md-12"}>
                                    <select
                                      className={
                                        this.state.isKB
                                          ? "systemstoredropdown1 iskbticket"
                                          : "systemstoredropdown1"
                                      }
                                      value={this.state.CustStoreStatusDrop}
                                      onChange={this.hanldeStatusChange.bind(
                                        this
                                      )}
                                    >
                                      <option value="1">
                                        {TranslationContext !== undefined
                                          ? TranslationContext
                                            .ticketingDashboard
                                            .customerwanttovisitstore
                                          : "Customer Want to visit store"}
                                      </option>
                                      <option value="2">
                                        {TranslationContext !== undefined
                                          ? TranslationContext
                                            .ticketingDashboard
                                            .customeralreadyvisitedstore
                                          : "Customer Already visited store"}
                                      </option>
                                    </select>
                                    <div
                                      style={{
                                        display: "flex",
                                        marginTop: "7px",
                                        float: "right",
                                      }}
                                    >
                                      <label className="orderdetailpopup">
                                        {TranslationContext !== undefined
                                          ? TranslationContext.option.yes
                                          : "Yes"}
                                      </label>
                                      <div
                                        className={
                                          this.state.isKB
                                            ? "switchmargin iskbticket"
                                            : "switchmargin"
                                        }
                                      >
                                        <div className="switch switch-primary d-inline m-r-10">
                                          <input
                                            type="checkbox"
                                            id="editDashboard-p-12"
                                          />
                                          <label
                                            htmlFor="editDashboard-p-12"
                                            className="cr"
                                          ></label>
                                        </div>
                                      </div>
                                      <label className="orderdetailpopup">
                                        {TranslationContext !== undefined
                                          ? TranslationContext.option.no
                                          : "No"}
                                      </label>
                                      <div
                                        className="storeplusline13"
                                        onClick={this.HandleStoreModalClose.bind(
                                          this
                                        )}
                                      >
                                        <span
                                          className="plusline13"
                                          style={{ marginLeft: "10px" }}
                                        ></span>
                                        <img
                                          src={MinusImg}
                                          alt="Minus"
                                          className="minus-imgorder"
                                        />
                                      </div>
                                    </div>
                                  </div>
                                </div>

                                <div className="row m-0">
                                  <div
                                    className={
                                      this.state.isKB
                                        ? "col-md-6 m-b-10 m-t-10 iskbticket"
                                        : "col-md-6 m-b-10 m-t-10"
                                    }
                                  >
                                    <input
                                      type="text"
                                      className="systemordersearch"
                                      placeholder={
                                        TranslationContext !== undefined
                                          ? TranslationContext.label
                                            .searchbynamepincodecode
                                          : "Search By Store Name, Pin Code, Store Code"
                                      }
                                      value={this.state.SearchStore}
                                      name="SearchStore"
                                      autoComplete="off"
                                      onChange={this.handleNoteOnChange}
                                    />
                                    <img
                                      src={SearchBlackImg}
                                      alt="Search"
                                      className="systemorder-imgsearch"
                                      onClick={this.handleGetStoreDetails.bind(
                                        this
                                      )}
                                    />
                                  </div>
                                  <div className="col-md-6 m-b-10 m-t-10 text-right">
                                    <button
                                      type="button"
                                      className={
                                        this.state.isKB
                                          ? "myticket-submit-solve-button m-0 iskbticket"
                                          : "myticket-submit-solve-button m-0"
                                      }
                                      onClick={this.handleAttachStoreData.bind(
                                        this
                                      )}
                                    >
                                      {TranslationContext !== undefined
                                        ? TranslationContext.button.attachstore
                                        : "Attach Store"}
                                    </button>
                                  </div>
                                </div>
                                <span className="linestore1"></span>
                                <div className="newtabstore">
                                  <div className="tab-content tabcontentstore">
                                    <div className="">
                                      <ul
                                        className="nav alert-nav-tabs3 store-nav-tabs"
                                        role="tablist"
                                      >
                                        <li className="nav-item fo">
                                          <a
                                            className="nav-link active"
                                            data-toggle="tab"
                                            href="#storedetail-tab"
                                            role="tab"
                                            aria-controls="storedetail-tab"
                                            aria-selected="true"
                                          >
                                            {TranslationContext !== undefined
                                              ? TranslationContext.a
                                                .storedetails
                                              : "Store Details"}
                                          </a>
                                        </li>
                                        {/* {this.state.selectedStoreDataBloom.length >
                                        0 || selectedStore.length > 0 ? (
                                        <li className="nav-item fo">
                                          <a
                                            className="nav-link"
                                            data-toggle="tab"
                                            href="#selectedstore-tab"
                                            role="tab"
                                            aria-controls="selectedstore-tab"
                                            aria-selected="false"
                                          >
                                            {TranslationContext !== undefined
                                              ? TranslationContext.a
                                                .selectedstore
                                              : "Selected Store"}
                                          </a>
                                        </li>
                                      ) : null} */}
                                      </ul>
                                    </div>
                                  </div>
                                </div>
                                <span className="linestore2"></span>
                                <div className="tab-content p-0">
                                  <div
                                    className="tab-pane fade show active"
                                    id="storedetail-tab"
                                    role="tabpanel"
                                    aria-labelledby="storedetail-tab"
                                  >
                                    <div className="reactstoreselect mystyle custom-react-table">
                                      <ReactTable
                                        data={this.state.storeDetails}
                                        columns={[
                                          {
                                            Header: <span></span>,
                                            accessor: "purpose",
                                            Cell: (row) => {
                                              var storeId = 0;
                                              if (
                                                row.original.lpassStoreID > 0
                                              ) {
                                                storeId =
                                                  row.original.lpassStoreID;
                                              } else {
                                                storeId = row.original.storeID;
                                              }
                                              return (
                                                <div className="radioInput">
                                                  <input
                                                    type="radio"
                                                    id={"i" + storeId}
                                                    // style={{
                                                    //   display: "none",
                                                    // }}
                                                    name="ticket-store"
                                                    // checked={
                                                    //   this.state
                                                    //     .CheckStoreID ===
                                                    //   storeId
                                                    // }
                                                    checked={
                                                      this.state
                                                        .CheckStoreID
                                                    }
                                                    onChange={this.handleCheckStoreID.bind(
                                                      this,
                                                      storeId,
                                                      row.original
                                                    )}
                                                  //defaultChecked={true}
                                                  />
                                                  {/* <label
                                                  htmlFor={"i" + storeId}
                                                ></label> */}
                                                </div>
                                              );
                                            },
                                            width: 20,
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !==
                                                  undefined
                                                  ? TranslationContext.label
                                                    .storecode
                                                  : "Store Code"}
                                              </span>
                                            ),
                                            accessor: "storeCode",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !==
                                                  undefined
                                                  ? TranslationContext.label
                                                    .storename
                                                  : "Store Name"}
                                              </span>
                                            ),
                                            accessor: "storeName",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !==
                                                  undefined
                                                  ? TranslationContext.label
                                                    .storepincode
                                                  : "Store Pin Code"}
                                              </span>
                                            ),
                                            accessor: "pincode",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !==
                                                  undefined
                                                  ? TranslationContext.span
                                                    .storeemailid
                                                  : "Store Email ID"}
                                              </span>
                                            ),
                                            accessor: "storeEmailID",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !==
                                                  undefined
                                                  ? TranslationContext.label
                                                    .storeaddress
                                                  : "Store Address"}
                                              </span>
                                            ),
                                            accessor: "address",
                                          },
                                          {
                                            Header: <span>Store Contact</span>,
                                            accessor: "storePhoneNo",
                                          },
                                        ]}
                                        defaultPageSize={5}
                                        showPagination={true}
                                        minRows={2}
                                        resizable={true}
                                      />
                                    </div>
                                  </div>
                                  {/* <div
                                  className="tab-pane fade"
                                  id="selectedstore-tab"
                                  role="tabpanel"
                                  aria-labelledby="selectedstore-tab"
                                >
                                  <div className="reactstoreselect custom-react-table datePickertable storeTdetail">
                                    <ReactTable
                                      data={this.state.selectedStoreDataBloom}
                                      columns={[
                                        {
                                          Header: "",
                                          accessor: "storeID",
                                          width: 20,
                                          Cell: (row) => {
                                            var storeId = 0;
                                            if (row.original.lpassStoreID > 0) {
                                              storeId =
                                                row.original.lpassStoreID;
                                            } else {
                                              storeId = row.original.storeID;
                                            }
                                            return (
                                              <div
                                                className="filter-checkbox"
                                                style={{
                                                  marginLeft: "15px",
                                                }}
                                              >
                                                <input
                                                  type="radio"
                                                  id={"i" + storeId}
                                                  style={{
                                                    display: "none",
                                                  }}
                                                  name="ticket-store"
                                                  checked={
                                                    this.state.CheckStoreID === storeId
                                                  }
                                                  onChange={this.handleCheckStoreID.bind(
                                                    this,
                                                    storeId,
                                                    row.original
                                                  )}
                                                  defaultChecked={true}
                                                />
                                                <label
                                                  htmlFor={"i" + storeId}
                                                ></label>
                                              </div>
                                            );
                                          },
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.span
                                                  .purpose
                                                : "Purpose"}
                                            </span>
                                          ),
                                          accessor: "invoiceNumber",
                                          minWidth: 160,
                                          Cell: (row) => (
                                            <div
                                              className="filter-checkbox"
                                              style={{
                                                marginLeft: "15px",
                                              }}
                                            >
                                              <label
                                                htmlFor={
                                                  "i" + row.original.storeID
                                                }
                                              >
                                                {row.original.Purpose_Id === 1
                                                  ? "Customer Want to visit store"
                                                  : "Customer Already visited store"}
                                              </label>
                                            </div>
                                          ),
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.label
                                                  .storecode
                                                : "Store Code"}
                                            </span>
                                          ),
                                          accessor: "storeCode",
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.label
                                                  .storename
                                                : "Store Name"}
                                            </span>
                                          ),
                                          accessor: "storeName",
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.label
                                                  .storepincode
                                                : "Store Pin Code"}
                                            </span>
                                          ),
                                          accessor: "pincode",
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.span
                                                  .storeemailid
                                                : "Store Email ID"}
                                            </span>
                                          ),
                                          accessor: "storeEmailID",
                                          minWidth: 190,
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.label
                                                  .storeaddress
                                                : "Store Address"}
                                            </span>
                                          ),
                                          accessor: "address",
                                          minWidth: 140,
                                        },
                                        {
                                          Header: (
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.span
                                                  .visitdate
                                                : "Visit Date"}
                                            </span>
                                          ),
                                          accessor: "storeVisitDate",
                                          minWidth: 150,
                                          Cell: (row) => {
                                            var storeId = 0;
                                            if (row.original.lpassStoreID > 0) {
                                              storeId =
                                                row.original.lpassStoreID;
                                            } else {
                                              storeId = row.original.storeID;
                                            }
                                            return (
                                              <div className="col-sm-12 p-0">
                                                <DatePicker
                                                  selected={
                                                    row.original
                                                      .storeVisitDate !== null
                                                      ? new Date(
                                                        row.original.storeVisitDate
                                                      )
                                                      : new Date()
                                                  }
                                                  placeholderText="MM/DD/YYYY"
                                                  showIcon
                                                  showMonthDropdown
                                                  showYearDropdown
                                                  dateFormat="MM/DD/YYYY"
                                                  id={"visitDate" + storeId}
                                                  value={
                                                    row.original
                                                      .storeVisitDate !== null
                                                      ? moment(
                                                        row.original
                                                          .storeVisitDate
                                                      ).format("MM/DD/YYYY")
                                                      : ""
                                                  }
                                                  onChange={this.handleByvisitDate.bind(
                                                    this,
                                                    row
                                                  )}
                                                />
                                              </div>
                                            );
                                          },
                                        },
                                      ]}
                                      resizable={false}
                                      defaultPageSize={5}
                                      showPagination={true}
                                      minRows={2}
                                    />
                                  </div>
                                </div> */}
                                </div>
                              </Modal>
                            </div>
                            <div className="">
                              <label className="label-4">
                                {/* {TranslationContext !== undefined
                            ? TranslationContext.label.product
                            : "Product"} */}
                                {this.state.ticketFields.length > 0
                                  ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Product".toLowerCase()
                                  ).length > 0
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Product".toLowerCase()
                                    )[0].createPage
                                      ? TranslationContext !== undefined
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Product".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                        : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Product".toLowerCase()
                                        )[0].displayEnglishName ||
                                        "Order Details"
                                      : "Order Details"
                                    : "Order Details"
                                  : "Order Details"}
                              </label>
                              <a
                                href="#!"
                                className="bata-rajouri-garden d-inline-block"
                                onClick={this.handleOrderTableOpen.bind(this)}
                              >
                                {this.state.OrderInvoiceAttach === "" ? (
                                  <label className="label-4">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label
                                        .noproductattached
                                      : " Invoice Number"}
                                  </label>
                                ) : (
                                  this.state.OrderInvoiceAttach
                                )}
                                &nbsp;
                                <img
                                  src={PencilImg}
                                  alt="Pencile"
                                  className="pencilImg"
                                  title="Attach Product"
                                />
                                &nbsp;
                              </a>
                              {this.state.OrderInvoiceAttach === "" ? null : (
                                <a
                                  href="#!"
                                  className="bata-rajouri-garden d-inline-block"
                                  onClick={this.handleDeleteOrder.bind(this)}
                                >
                                  <img
                                    src={BlackDeleteIcon}
                                    alt="Pencile"
                                    className="pencilImg"
                                    title="Delete Product"
                                  />

                                </a>
                              )}
                              <Modal
                                onClose={this.handleOrderTableClose.bind(this)}
                                open={this.state.OrderTable}
                                modalId="addOrderTableModal"
                                overlayId="logout-ovrly"
                              >
                                <div
                                  className="row"
                                  style={{
                                    marginLeft: "0px",
                                    marginRight: "0px",
                                  }}
                                >
                                  <div
                                    className="col-md-12 claim-status-card"
                                    style={{ height: "54px" }}
                                  >
                                    <label style={{ marginTop: "7px" }}>
                                      <b>
                                        {TranslationContext !== undefined
                                          ? TranslationContext.label
                                            .customerwanttoattachorder
                                          : "Customer Want to attach order"}
                                      </b>
                                    </label>
                                    <div
                                      className="claimplus"
                                      onClick={this.handleOrderTableClose.bind(
                                        this
                                      )}
                                    >
                                      <span className="plusline12"></span>
                                      <span>
                                        <img
                                          src={MinusImg}
                                          alt="Minus"
                                          className="minus-imgorder"
                                        />
                                      </span>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className="row m-t-10 m-b-10"
                                  style={{
                                    marginLeft: "0",
                                    marginRight: "0",
                                  }}
                                >
                                  <div className="col-md-3">
                                    <label className="orderdetailpopup">
                                      {TranslationContext !== undefined
                                        ? TranslationContext.label.orderdetails
                                        : "Order Details"}
                                    </label>
                                  </div>
                                  {/* //new easiness start */}
                                  <div className="col-md-3">
                                    <div
                                      style={{
                                        float: "right",
                                        display: "flex",
                                      }}
                                    >
                                      <label className="orderdetailpopup">
                                        Order
                                      </label>
                                      <div
                                        className={
                                          "orderswitch orderswitchitem"
                                        }
                                      >
                                        <div className="switch switch-primary d-inline">
                                          <input
                                            type="checkbox"
                                            id="editTasks-p-10"
                                            // checked={
                                            //   this.state
                                            //     .masterConfigrationUnknown
                                            //     .isUnknown
                                            // }
                                            // disabled
                                            checked={this.state.NewUnknown}
                                            onChange={(e) => this.handleNewOrderUnknownToitem(e)}
                                          />
                                          <label
                                            htmlFor="editTasks-p-10"
                                            className="cr ord"
                                          ></label>
                                        </div>
                                      </div>
                                      <label className="orderdetailpopup">
                                        Unknown
                                      </label>
                                    </div>
                                  </div>
                                  {/* //new easiness end */}
                                  <div className="col-md-3">
                                    <div
                                      style={{
                                        float: "right",
                                        display: "flex",
                                      }}
                                    >
                                      <label className="orderdetailpopup">
                                        Source
                                      </label>
                                      <div
                                        className={
                                          "orderswitch orderswitchitem"
                                        }
                                      >
                                        <div className="switch switch-primary d-inline">
                                          <input
                                            type="checkbox"
                                            id="editTasks-p-10"
                                            checked={
                                              this.state
                                                .masterConfigrationUnknown
                                                .isUnknown
                                            }
                                            disabled
                                          //checked={this.state.NewUnknown}
                                          //onChange={(e) => this.handleNewOrderUnknownToitem(e)}
                                          />
                                          <label
                                            htmlFor="editTasks-p-10"
                                            className="cr ord"
                                          ></label>
                                        </div>
                                      </div>
                                      <label className="orderdetailpopup">
                                        Unknown
                                      </label>
                                    </div>
                                  </div>
                                  <div className="col-md-3">
                                    <div
                                      style={{
                                        float: "right",
                                        display: "flex",
                                      }}
                                    >
                                      <label className="orderdetailpopup">
                                        {TranslationContext !== undefined
                                          ? TranslationContext.label.order
                                          : "Order"}
                                      </label>
                                      <div
                                        className={
                                          this.state.isKB
                                            ? "orderswitch orderswitchitem iskbticket"
                                            : "orderswitch orderswitchitem"
                                        }
                                      >
                                        <div className="switch switch-primary d-inline">
                                          <input
                                            type="checkbox"
                                            id="editTasks-p-2"
                                            checked={this.state.OrdItmBtnStatus}
                                            onChange={
                                              this.handleChangeOrderItem
                                            }
                                            disabled={
                                              this.state
                                                .masterConfigrationUnknown
                                                .isUnknown
                                            }
                                          />
                                          <label
                                            htmlFor="editTasks-p-2"
                                            className="cr ord"
                                          ></label>
                                        </div>
                                      </div>
                                      <label className="orderdetailpopup">
                                        {TranslationContext !== undefined
                                          ? TranslationContext.label.item
                                          : "Item"}
                                      </label>
                                    </div>
                                  </div>
                                  <div
                                    className={
                                      this.state.isKB
                                        ? "col-md-3 iskbticket"
                                        : "col-md-3"
                                    }
                                  >
                                    <input
                                      type="text"
                                      className="searchtextpopup"
                                      placeholder={
                                        TranslationContext !== undefined
                                          ? TranslationContext.label
                                            .searchorderbyordernumber
                                          : "Search Order By Order No"
                                      }
                                      name="orderNumber"
                                      value={this.state.orderNumber}
                                      onChange={this.handleNoteOnChange}
                                      autoComplete="off"
                                    />
                                    <img
                                      src={SearchBlackImg}
                                      alt="Search"
                                      className="searchtextimgpopup"
                                      onClick={this.handleOrderSearchData.bind(
                                        this
                                      )}
                                    />
                                  </div>
                                </div>
                                {this.state.NewUnknown ?
                                  <>
                                    <div>
                                      {/* <a
                                        href="#"
                                        style={{ marginLeft: "10px" }}
                                        onClick={this.handleAttacheProduct.bind(
                                          this
                                        )}
                                      >
                                        Back
                                      </a> */}
                                      <div
                                        className="row"
                                        style={{
                                          width: "100%",
                                          margin: "10px",
                                          alignItems: "center",
                                        }}
                                      >
                                        <div className="col-md-2 form-group">
                                          <label className="form-label">
                                            Order Id
                                          </label>
                                          <h4>
                                            {
                                              this.state
                                                .selectedInvoiceNo
                                            }
                                          </h4>
                                        </div>
                                        <div className="col-md-3 form-group">
                                          <label className="form-label">
                                            Super Category
                                          </label>
                                          <select
                                            className="form-control"
                                            defaultValue={
                                              this.state.selectedOption
                                            }
                                            // onChange={
                                            //   this
                                            //     .handelDropDownCatogary
                                            // }
                                            onChange={(e) => { this.handleSuperCategoryDropdown(e) }}
                                            name="superCategory"
                                          >
                                            <option value="Select">Select</option>
                                            {this.state.productCategory.map(
                                              (data) => {
                                                return (
                                                  <option
                                                    value={
                                                      data.productCategoryID +
                                                      "+" +
                                                      data.productCategoryName
                                                    }
                                                  >
                                                    {
                                                      data.productCategoryName
                                                    }
                                                  </option>
                                                );
                                              }
                                            )}
                                          </select>
                                          {/* <div className=""></div> */}
                                        </div>

                                        <div className="col-md-3 form-group">
                                          <label className="form-label">
                                            Item Name
                                          </label>
                                          <select
                                            className="form-control"
                                            name="productDetail"
                                            // value={
                                            //   this.state.selectedproduct.productDetail
                                            // }
                                            onChange={
                                              this
                                                .handelDropDownCatogary
                                            }
                                          // onChange={(e) => { this.handleProductItemName(e) }}
                                          >
                                            <option value="Select">Select</option>


                                            {this.state.productDetail.map(
                                              (data) => {
                                                return (
                                                  <>
                                                    <option
                                                      value={
                                                        data.productCategoryMappingId +
                                                        "+" +
                                                        data.productName +
                                                        "+" +
                                                        data.productNameId
                                                      }
                                                    >
                                                      {
                                                        data.productName
                                                      }
                                                    </option>
                                                  </>
                                                );
                                              }
                                            )}


                                          </select>
                                        </div>


                                        {this.state.itemCode.length > 0 && this.state.hidebtnAdd &&
                                          // <div className="col-md-2 form-group">
                                          //   <label className="form-label">
                                          //     Item No
                                          //   </label>
                                          //   <select
                                          //     className="form-control"
                                          //     name="codeName"
                                          //     // value={
                                          //     //   this.state.selectedproduct.codeName
                                          //     // }

                                          //     onChange={
                                          //       this
                                          //         .handelDropDownCatogary
                                          //     }
                                          //   >
                                          //     {this.state.itemCode
                                          //       .length ? (
                                          //       <>
                                          //         <option>
                                          //           {this.state
                                          //             .selectedproduct
                                          //             .codeName &&
                                          //             this.state
                                          //               .selectedproduct
                                          //               ?.codeName !== ""
                                          //             ? this.state
                                          //               .selectedproduct
                                          //               ?.codeName
                                          //             : "Select"}
                                          //         </option>
                                          //         {this.state.itemCode.map(
                                          //           (data) => {
                                          //             return (
                                          //               <>
                                          //                 <option
                                          //                   onClick={
                                          //                     this
                                          //                       .handelDropDownCatogary
                                          //                   }
                                          //                   value={
                                          //                     data.productCodeId +
                                          //                     "+" +
                                          //                     data.codeName
                                          //                   }
                                          //                 >
                                          //                   {
                                          //                     data.codeName
                                          //                   }
                                          //                 </option>
                                          //               </>
                                          //             );
                                          //           }
                                          //         )}
                                          //       </>
                                          //     ) : (
                                          //       <option>Select</option>
                                          //     )}
                                          //   </select>
                                          // </div>
                                          <div className="col-md-2 form-group" style={{ marginBottom: "0px" }}>
                                            <input className="form-control" value={this.state.itemCode[0].codeName} disabled={true} />
                                          </div>

                                        }

                                        {this.state.itemCode.length > 0 && this.state.hidebtnAdd &&
                                          <div className="col-md-2 form-group">
                                            <button
                                              className="button"
                                              style={{
                                                marginTop: "20px",
                                                cursor: "pointer",
                                              }}
                                              // onClick={
                                              //   this.handelAddProduct
                                              // }
                                              onClick={
                                                this.handleUnknowItemproductdata
                                              }
                                            >
                                              Add
                                            </button>
                                          </div>}

                                      </div>
                                    </div>

                                    {this.state.attchData.length >
                                      0 && (
                                        <div className="px-4">
                                          <table>
                                            <thead>
                                              <th>Order Id</th>
                                              <th>Super Category</th>
                                              <th>Item Name</th>
                                              <th>Item Code</th>
                                              <th>Action</th>
                                            </thead>
                                            <tbody>
                                              {this.state.attchData.map(
                                                (datas, index) => {
                                                  return (
                                                    <tr key={index}>
                                                      <td>
                                                        {/* {datas.invoiceNO
                                                          ? datas.invoiceNO
                                                          : datas.invoiceNumber} */}
                                                        unknown
                                                      </td>
                                                      <td>
                                                        {
                                                          datas.superCategory
                                                        }
                                                      </td>
                                                      <td>
                                                        {
                                                          datas.productDetail
                                                        }
                                                      </td>
                                                      <td>
                                                        {datas.codeName}
                                                      </td>
                                                      <td>
                                                        <img
                                                          // onClick={() =>
                                                          //   this.handleDeleteItem(
                                                          //     datas
                                                          //   )
                                                          // }
                                                          onClick={() => { this.handleDeleteItemNew(datas) }}
                                                          src={
                                                            BlackDeleteIcon
                                                          }
                                                          alt="Pencile"
                                                          className="pencilImg"
                                                          title="Delete Product"
                                                        />
                                                      </td>
                                                    </tr>
                                                  );
                                                }
                                              )}
                                            </tbody>
                                          </table>
                                        </div>
                                      )}

                                    {this.state.forUnknowNewFlagAttach &&
                                      <div className="attach d-flex justify-content-end mb-3 mr-3">
                                        <button
                                          className="button"
                                          style={{
                                            marginTop: "20px",
                                            cursor: "pointer",
                                          }}
                                          onClick={() =>
                                            this.handleSaveProductInOrder()
                                          }
                                        >
                                          Save
                                        </button>
                                      </div>}



                                    {
                                      // <div>in same page attached previous order</div>
                                      //this.state.SelectedAllOrder> 0 &&
                                      // if the wanted to show order

                                      // <div
                                      //   // className="tab-pane fade"
                                      //   id="selectedproduct-tab"
                                      //   // role="tabpanel"
                                      //   aria-labelledby="selectedproduct-tab"
                                      // >
                                      //   <div
                                      //     className="reactstoreselect custom-react-table"
                                      //     id="ordertbls1"
                                      //     style={{ display: "block" }}
                                      //   >
                                      //     <ReactTable
                                      //       data={this.state.SelectedAllOrder}
                                      //       // expanded={this.state.expanded}
                                      //       // onExpandedChange={(
                                      //       //   newExpanded,
                                      //       //   index,
                                      //       //   event
                                      //       // ) => {
                                      //       //   if (newExpanded[index[0]] === false) {
                                      //       //     newExpanded = {};
                                      //       //   } else {
                                      //       //     Object.keys(newExpanded).map((k) => {
                                      //       //       newExpanded[k] =
                                      //       //         parseInt(k) === index[0]
                                      //       //           ? {}
                                      //       //           : false;
                                      //       //     });
                                      //       //   }
                                      //       //   this.setState({
                                      //       //     ...this.state,
                                      //       //     expanded: newExpanded,
                                      //       //   });
                                      //       // }}
                                      //       columns={[
                                      //         {
                                      //           Header: <span></span>,
                                      //           accessor: "invoiceNumber",
                                      //           width: 20,
                                      //           Cell: (row) => (
                                      //             // <div className="filter-checkbox">
                                      //             <div className="orders_radio_button">
                                      //               <input
                                      //                 type="checkbox"
                                      //                 id={
                                      //                   "all" +
                                      //                   row.original.invoiceNumber
                                      //                 }
                                      //                 // style={{
                                      //                 //   display: "none",
                                      //                 // }}
                                      //                 name="AllOrder"
                                      //                 checked={this.state.selectedInvoiceNo.includes(
                                      //                   row.original.invoiceNumber
                                      //                 )}
                                      //                 // onChange={this.handleGetOderItemData.bind(
                                      //                 //   this,
                                      //                 //   row.original.invoiceNumber,
                                      //                 //   row.original
                                      //                 // )}
                                      //                 onChange={(e) =>
                                      //                   this.newhandleDeleteSelectedItem(
                                      //                     e,
                                      //                     row.original
                                      //                       .invoiceNumber,
                                      //                     row.original
                                      //                   )
                                      //                 }
                                      //               />
                                      //               <label
                                      //                 htmlFor={
                                      //                   "all" +
                                      //                   row.original.invoiceNumber
                                      //                 }
                                      //               ></label>
                                      //             </div>
                                      //           ),
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .invoicenumber
                                      //                 : "Invoice Number"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "invoiceNumber",
                                      //           minWidth: 150,
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .invoicedate
                                      //                 : "Invoice Date"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "dateFormat",
                                      //           Cell: (row) => {
                                      //             return row.original
                                      //               .dateFormat !== null
                                      //               ? moment(
                                      //                 row.original.invoiceDate
                                      //               ).format("Do/MMM/YYYY")
                                      //               : "Not Added";
                                      //           },
                                      //           minWidth: 120,
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .itemcount
                                      //                 : "Item Count"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "itemCount",
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .itemprice
                                      //                 : "Item Price"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "ordeItemPrice",
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .pricepaid
                                      //                 : "Price Paid"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "orderPricePaid",
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .storecode
                                      //                 : "Store Code"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "storeCode",
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .storeaddress
                                      //                 : "Store Address"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "storeAddress",
                                      //         },
                                      //         {
                                      //           Header: (
                                      //             <span>
                                      //               {TranslationContext !==
                                      //                 undefined
                                      //                 ? TranslationContext.span
                                      //                   .discount
                                      //                 : "Discount"}
                                      //             </span>
                                      //           ),
                                      //           accessor: "discount",
                                      //         },
                                      //       ]}
                                      //       resizable={false}
                                      //       minRows={2}
                                      //       defaultPageSize={5}
                                      //       showPagination={
                                      //         this.state.SelectedAllOrder
                                      //           ?.length > 5
                                      //           ? true
                                      //           : false
                                      //       }
                                      //     />
                                      //   </div>

                                      // </div>
                                    }
                                  </> :
                                  <div>
                                    {/* same outside the new unknwo flag paste it */}
                                    <span className="linestore1"></span>
                                    <div className="newtabstore">
                                      <div className="tab-content tabcontentstore">
                                        <div className="row align-items-center mr-0  myticket-order-header-div">
                                          {!this.state.isAttachProduct && (
                                            <ul
                                              className="nav alert-nav-tabs3 store-nav-tabs col-md-4"
                                              role="tablist"
                                            >
                                              {!isDataAttached ? (
                                                <li className="nav-item fo">
                                                  <a
                                                    className="nav-link active"
                                                    data-toggle="tab"
                                                    href="#productdetail-tab"
                                                    role="tab"
                                                    aria-controls="productdetail-tab"
                                                    aria-selected="true"
                                                    onClick={this.handleSetDataTab}
                                                  >
                                                    {TranslationContext !==
                                                      undefined
                                                      ? TranslationContext.a
                                                        .productdetails
                                                      : "Product Details"}
                                                  </a>
                                                </li>
                                              ) : (
                                                // {this.state.SelectedAllOrder.length >
                                                //   0 ? (
                                                <li className="nav-item fo">
                                                  <a
                                                    className="nav-link"
                                                    data-toggle="tab"
                                                    href="#selectedproduct-tab"
                                                    role="tab"
                                                    aria-controls="selectedproduct-tab"
                                                    aria-selected="false"
                                                    onClick={this.handleSetDataTab}
                                                  >
                                                    {TranslationContext !==
                                                      undefined
                                                      ? TranslationContext.a
                                                        .selectedproduct
                                                      : "Selected Order"}
                                                  </a>
                                                </li>
                                              )
                                                // ) : null
                                              }
                                            </ul>
                                          )}
                                          {!this.state.orderDetailsData.length && (
                                            <div className="col-md-4">
                                              <button
                                                className="myticket-submit-solve-button"
                                                style={{
                                                  marginLeft: "0px",
                                                  width: "auto",
                                                  minWidth: "190px",
                                                }}
                                                onClick={this.openAddOrder}
                                              >
                                                Add Manually
                                              </button>
                                            </div>
                                          )}
                                          {!this.state.isAttachProduct &&
                                            !isDataAttached && (
                                              <div className="col-md-4 m-b-10 m-t-10 text-right">
                                                <button
                                                  type="button"
                                                  className={
                                                    this.state.isKB
                                                      ? "myticket-submit-solve-button m-0 iskbticket"
                                                      : "myticket-submit-solve-button m-0"
                                                  }
                                                  onClick={this.handleAttacheProduct.bind(
                                                    this
                                                  )}
                                                >
                                                  {TranslationContext !== undefined
                                                    ? TranslationContext.button
                                                      .attachproduct
                                                    : "Attach Order"}
                                                </button>
                                              </div>
                                            )}
                                        </div>
                                        {/* <Modal
                                    open={this.state.openAddOrder}
                                    onClose={this.closeAddOrder}
                                    closeIconId="sdsg"
                                    modalId="Historical-popup"
                                    overlayId="logout-ovrly"
                                    classNames={{ modal: "historical-popup" }}
                                  >
                                    <TicketSystemOrder
                                      isUnknown={this.state.masterConfigrationUnknown.isUnknown}
                                      custDetails={this.state.customerID}
                                      // AttachOrder={this.handleCustomerAttachamentStatus}
                                      // getParentOrderData={this.handleGetOrderId}
                                      // getItemOrderData={this.handleGetItemData}
                                      handleOrderSearchData={
                                        this.handleOrderSearchData
                                      }
                                      closeAddOrder={this.closeAddOrder}
                                      purchaseMode={0}
                                      message="Add"
                                      AddManuallyData={true}
                                      CurrentTicket={this.state.ticket_Id}
                                      modeData={this.state.modeData}
                                      searchHide={false}
                                    // ticket_IDS={this.state.ticketDetailID}
                                    // ShowOderdData={this.state.showOrderDetails}
                                    // parentCallBackFuncation={this.parentCallBackFuncation}
                                    />
                                  </Modal> */}
                                      </div>
                                    </div>
                                    <span className="linestore2"></span>
                                    <div className="tab-content p-0">
                                      {!isDataAttached ? (
                                        <div
                                          // className="tab-pane fade show active"
                                          id="productdetail-tab"
                                          // role="tabpanel"
                                          aria-labelledby="productdetail-tab"
                                        >
                                          <div
                                            className="reactstoreselect mystyle custom-react-table"
                                            id="ordertbls"
                                            style={{ display: "block" }}
                                          >
                                            {!this.state.isAttachProduct ? (
                                              <ReactTable
                                                data={this.state.orderDetailsData}
                                                columns={[
                                                  {
                                                    Header: <span></span>,
                                                    accessor: "invoiceNumber",
                                                    width: 20,
                                                    Cell: (row) => (
                                                      // <div className="filter-checkbox">
                                                      <div className="orders_radio_button">
                                                        <input
                                                          type="radio"
                                                          id={
                                                            "all" +
                                                            row.original
                                                              .invoiceNumber
                                                          }
                                                          // style={{
                                                          //   display: "none",
                                                          // }}
                                                          name="AllOrder"
                                                          checked={this.state.selectedInvoiceNo.includes(
                                                            row.original
                                                              .invoiceNumber
                                                          )}
                                                          onChange={(e) =>
                                                            this.newHandleGetOderItemData(
                                                              e,
                                                              row.original
                                                                .invoiceNumber,
                                                              row.original
                                                            )
                                                          }
                                                        // onChange={this.handleGetOderItemData.bind(
                                                        //   this,
                                                        //   row.original.invoiceNumber,
                                                        //   row.original
                                                        // )}
                                                        />
                                                        <label
                                                          htmlFor={
                                                            "all" +
                                                            row.original
                                                              .invoiceNumber
                                                          }
                                                        ></label>
                                                      </div>
                                                    ),
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .invoicenumber
                                                          : "Invoice Number"}
                                                      </span>
                                                    ),
                                                    accessor: "invoiceNumber",
                                                    minWidth: 150,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .invoicedate
                                                          : "Invoice Date"}
                                                      </span>
                                                    ),
                                                    accessor: "invoiceDate",
                                                    minWidth: 120,
                                                    Cell: (row) => {
                                                      return row.original
                                                        .invoiceDate !== null
                                                        ? moment(
                                                          row.original.invoiceDate
                                                        ).format("Do/MMM/YYYY")
                                                        : "Not Added";
                                                    },
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Sub Order ID"}
                                                      </span>
                                                    ),
                                                    accessor: "subOrderID",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Batch No"}
                                                      </span>
                                                    ),
                                                    accessor: "batchNo",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Product Bar Code"}
                                                      </span>
                                                    ),
                                                    accessor: "productBarCode",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Product Name"}
                                                      </span>
                                                    ),
                                                    accessor: "productName",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Category Name"}
                                                      </span>
                                                    ),
                                                    accessor: "categoryName",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Manufacturing Date"}
                                                      </span>
                                                    ),
                                                    accessor: "manufacturingDate",
                                                    Cell: (row) =>
                                                      row.original
                                                        .manufacturingDate !== null
                                                        ? moment(
                                                          row.original
                                                            .manufacturingDate
                                                        ).format("DD/MM/YYYY")
                                                        : "Not Added",

                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Expiry/Best Before Date"}
                                                      </span>
                                                    ),
                                                    accessor:
                                                      "expiryBestBeforeDate",
                                                    Cell: (row) =>
                                                      row.original
                                                        .expiryBestBeforeDate !==
                                                        null
                                                        ? moment(
                                                          row.original
                                                            .expiryBestBeforeDate
                                                        ).format("DD/MM/YYYY")
                                                        : "Not Added",
                                                    minWidth: 150,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {window.localStorage.getItem(
                                                          "Programcode"
                                                        ) === "campusshoes"
                                                          ? this.state.ticketFields.filter(
                                                            (x) =>
                                                              x.fieldName.toLowerCase() ===
                                                              "Channel Of Purchase".toLowerCase()
                                                          )[0]?.displayEnglishName
                                                          : TranslationContext !==
                                                            undefined
                                                            ? TranslationContext.span
                                                              .itemcount
                                                            : "Channel Of Purchase"}
                                                      </span>
                                                    ),
                                                    accessor: "channelOfPurchaseID",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Mode Of Payment"}
                                                      </span>
                                                    ),
                                                    accessor: "paymentModename",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Size"}
                                                      </span>
                                                    ),
                                                    accessor: "size",
                                                    minWidth: 90,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Resize"}
                                                      </span>
                                                    ),
                                                    accessor: "requireSize",
                                                    minWidth: 120,
                                                  },

                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemcount
                                                          : "Item Count"}
                                                      </span>
                                                    ),
                                                    accessor: "itemCount",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .itemprice
                                                          : "Item Price"}
                                                      </span>
                                                    ),
                                                    accessor: "ordeItemPrice",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .pricepaid
                                                          : "Price Paid"}
                                                      </span>
                                                    ),
                                                    accessor: "orderPricePaid",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .storecode
                                                          : "Store Code"}
                                                      </span>
                                                    ),
                                                    accessor: "storeCode",
                                                    minWidth: 120,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .storeaddress
                                                          : "Store Address"}
                                                      </span>
                                                    ),
                                                    accessor: "storeAddress",
                                                    minWidth: 300,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext.span
                                                            .discount
                                                          : "Discount"}
                                                      </span>
                                                    ),
                                                    accessor: "discount",
                                                    minWidth: 120,
                                                  },
                                                ]}
                                                resizable={true}
                                                minRows={2}
                                                defaultPageSize={5}
                                                showPagination={true}
                                              />
                                            ) : (
                                              <>
                                                <div>
                                                  <a
                                                    href="#"
                                                    style={{ marginLeft: "10px" }}
                                                    onClick={this.handleAttacheProduct.bind(
                                                      this
                                                    )}
                                                  >
                                                    Back
                                                  </a>
                                                  <div
                                                    className="row"
                                                    style={{
                                                      width: "100%",
                                                      margin: "10px",
                                                      alignItems: "center",
                                                    }}
                                                  >
                                                    <div className="col-md-2 form-group">
                                                      <label className="form-label">
                                                        Order Id
                                                      </label>
                                                      <h4>
                                                        {
                                                          this.state
                                                            .selectedInvoiceNo
                                                        }
                                                      </h4>
                                                    </div>
                                                    <div className="col-md-3 form-group">
                                                      <label className="form-label">
                                                        Super Category
                                                      </label>
                                                      <select
                                                        className="form-control"
                                                        // value={
                                                        //   this.state.selectedproduct.superCategory
                                                        // }
                                                        onChange={
                                                          this
                                                            .handelDropDownCatogary
                                                        }
                                                        name="superCategory"
                                                      >
                                                        <option>Select</option>
                                                        {this.state.productCategory.map(
                                                          (data) => {
                                                            return (
                                                              <option
                                                                value={
                                                                  data.productCategoryID +
                                                                  "+" +
                                                                  data.productCategoryName
                                                                }
                                                              >
                                                                {
                                                                  data.productCategoryName
                                                                }
                                                              </option>
                                                            );
                                                          }
                                                        )}
                                                      </select>
                                                      {/* <div className=""></div> */}
                                                    </div>

                                                    <div className="col-md-3 form-group">
                                                      <label className="form-label">
                                                        Item Name
                                                      </label>
                                                      <select
                                                        className="form-control"
                                                        name="productDetail"
                                                        // value={
                                                        //   this.state.selectedproduct.productDetail
                                                        // }
                                                        onChange={
                                                          this
                                                            .handelDropDownCatogary
                                                        }
                                                      >
                                                        {this.state.productDetail
                                                          .length ? (
                                                          <>
                                                            <option>
                                                              {this.state
                                                                .selectedproduct
                                                                .productDetail &&
                                                                this.state
                                                                  .selectedproduct
                                                                  ?.productDetail !==
                                                                ""
                                                                ? this.state
                                                                  .selectedproduct
                                                                  ?.productDetail
                                                                : "Select"}
                                                            </option>
                                                            {this.state.productDetail.map(
                                                              (data) => {
                                                                return (
                                                                  <>
                                                                    <option
                                                                      value={
                                                                        data.productCategoryMappingId +
                                                                        "+" +
                                                                        data.productName +
                                                                        "+" +
                                                                        data.productNameId
                                                                      }
                                                                    >
                                                                      {
                                                                        data.productName
                                                                      }
                                                                    </option>
                                                                  </>
                                                                );
                                                              }
                                                            )}
                                                          </>
                                                        ) : (
                                                          <option>Select</option>
                                                        )}
                                                      </select>
                                                    </div>

                                                    <div className="col-md-2 form-group">
                                                      <label className="form-label">
                                                        Item No
                                                      </label>
                                                      <select
                                                        className="form-control"
                                                        name="codeName"
                                                        // value={
                                                        //   this.state.selectedproduct.codeName
                                                        // }

                                                        onChange={
                                                          this
                                                            .handelDropDownCatogary
                                                        }
                                                      >
                                                        {this.state.itemCode
                                                          .length ? (
                                                          <>
                                                            <option>
                                                              {this.state
                                                                .selectedproduct
                                                                .codeName &&
                                                                this.state
                                                                  .selectedproduct
                                                                  ?.codeName !== ""
                                                                ? this.state
                                                                  .selectedproduct
                                                                  ?.codeName
                                                                : "Select"}
                                                            </option>
                                                            {this.state.itemCode.map(
                                                              (data) => {
                                                                return (
                                                                  <>
                                                                    <option
                                                                      onClick={
                                                                        this
                                                                          .handelDropDownCatogary
                                                                      }
                                                                      value={
                                                                        data.productCodeId +
                                                                        "+" +
                                                                        data.codeName
                                                                      }
                                                                    >
                                                                      {
                                                                        data.codeName
                                                                      }
                                                                    </option>
                                                                  </>
                                                                );
                                                              }
                                                            )}
                                                          </>
                                                        ) : (
                                                          <option>Select</option>
                                                        )}
                                                      </select>
                                                    </div>
                                                    <div className="col-md-2 form-group">
                                                      <button
                                                        className="button"
                                                        style={{
                                                          marginTop: "20px",
                                                          cursor: "pointer",
                                                        }}
                                                        onClick={
                                                          this.handelAddProduct
                                                        }
                                                      >
                                                        Add
                                                      </button>
                                                    </div>
                                                  </div>
                                                </div>

                                                {this.state.attchData.length >
                                                  0 && (
                                                    <div className="px-4">
                                                      <table>
                                                        <thead>
                                                          <th>Order Id</th>
                                                          <th>Super Category</th>
                                                          <th>Item Name</th>
                                                          <th>Item Code</th>
                                                          <th>Action</th>
                                                        </thead>
                                                        <tbody>
                                                          {this.state.attchData.map(
                                                            (datas, index) => {
                                                              return (
                                                                <tr key={index}>
                                                                  <td>
                                                                    {datas.invoiceNO
                                                                      ? datas.invoiceNO
                                                                      : datas.invoiceNumber}
                                                                  </td>
                                                                  <td>
                                                                    {
                                                                      datas.superCategory
                                                                    }
                                                                  </td>
                                                                  <td>
                                                                    {
                                                                      datas.productDetail
                                                                    }
                                                                  </td>
                                                                  <td>
                                                                    {datas.codeName}
                                                                  </td>
                                                                  <td>
                                                                    <img
                                                                      onClick={() =>
                                                                        this.handleDeleteItem(
                                                                          datas
                                                                        )
                                                                      }
                                                                      src={
                                                                        BlackDeleteIcon
                                                                      }
                                                                      alt="Pencile"
                                                                      className="pencilImg"
                                                                      title="Delete Product"
                                                                    />
                                                                  </td>
                                                                </tr>
                                                              );
                                                            }
                                                          )}
                                                        </tbody>
                                                      </table>
                                                    </div>
                                                  )}
                                                {this.state.attchData.length >
                                                  0 && (
                                                    <div className="attach d-flex justify-content-end mb-3 mr-3">
                                                      <button
                                                        className="button"
                                                        style={{
                                                          marginTop: "20px",
                                                          cursor: "pointer",
                                                        }}
                                                        onClick={() =>
                                                          this.handleSaveProductInOrder()
                                                        }
                                                      >
                                                        Attach
                                                      </button>
                                                    </div>
                                                  )}


                                              </>
                                            )}
                                          </div>

                                          <div
                                            className="reactstoreselect custom-react-table"
                                            id="orderitemtbl"
                                            style={{ display: "none" }}
                                          >
                                            <ReactTable
                                              data={this.state.orderDetailsData}
                                              expanded={this.state.expanded}
                                              onExpandedChange={(
                                                newExpanded,
                                                index,
                                                event
                                              ) => {
                                                if (
                                                  newExpanded[index[0]] === false
                                                ) {
                                                  newExpanded = {};
                                                  console.log(
                                                    "HI1",
                                                    newExpanded,
                                                    index,
                                                    event
                                                  );
                                                } else {
                                                  console.log(
                                                    "HI",
                                                    this.state.orderDetailsData,
                                                    newExpanded,
                                                    index,
                                                    event
                                                  );

                                                  if (
                                                    this.state.selectedInvoiceNo !==
                                                    ","
                                                  ) {
                                                    // this.handleGetOderItemData(
                                                    //   // this.state.orderDetailsData[index]
                                                    //   //   .invoiceNumber
                                                    //   "",
                                                    //   this.state.orderDetailsData[
                                                    //   index
                                                    //   ],
                                                    //   {
                                                    //     target: {
                                                    //       checked: true,
                                                    //     },
                                                    //   }
                                                    // );
                                                    this.newHandleGetOderItemData(
                                                      {
                                                        target: {
                                                          checked: true,
                                                          // checked: this.state.orderDetailsData[index]?.invoiceNumber === this.state.SelectedAllItem[0]?.invoiceNumber,
                                                        },
                                                      },
                                                      "",
                                                      this.state.orderDetailsData[
                                                      index
                                                      ]
                                                    );
                                                  }

                                                  Object.keys(newExpanded).map(
                                                    (k) => {
                                                      newExpanded[k] =
                                                        parseInt(k) === index[0]
                                                          ? {}
                                                          : false;
                                                    }
                                                  );
                                                }
                                                this.setState({
                                                  ...this.state,
                                                  expanded: newExpanded,
                                                });
                                              }}
                                              columns={[
                                                {
                                                  Header: <span></span>,
                                                  accessor: "invoiceNumber",
                                                  width: 20,
                                                  Cell: (row) => (
                                                    <div className="filter-checkbox">
                                                      <input
                                                        type="checkbox"
                                                        id={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                        style={{
                                                          display: "none",
                                                        }}
                                                        name="AllOrder"
                                                        // checked={this.state.selectedInvoiceNo.includes(
                                                        //   row.original.invoiceNumber
                                                        // )}
                                                        checked={
                                                          this.state
                                                            .SelectedAllItem[0]
                                                            ?.invoiceNumber ===
                                                            row.original
                                                              ?.invoiceNumber
                                                            ? true
                                                            : false
                                                        }
                                                        // onChange={this.handleGetOderItemData.bind(
                                                        //   this,
                                                        //   row.original.invoiceNumber,
                                                        //   row.original
                                                        // )}
                                                        onChange={(e) =>
                                                          this.newHandleGetOderItemData(
                                                            e,
                                                            row.original
                                                              .invoiceNumber,
                                                            row.original
                                                          )
                                                        }
                                                      />
                                                      <label
                                                        htmlFor={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                      ></label>
                                                    </div>
                                                  ),
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicenumber
                                                        : "Invoice Number"}
                                                    </span>
                                                  ),
                                                  accessor: "invoiceNumber",
                                                  minWidth: 150,
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicedate
                                                        : "Invoice Date"}
                                                    </span>
                                                  ),
                                                  accessor: "dateFormat",
                                                  Cell: (row) => {
                                                    return row.original
                                                      .invoiceDate !== null
                                                      ? moment(
                                                        row.original.invoiceDate
                                                      ).format("Do/MMM/YYYY")
                                                      : "Not Added";
                                                  },
                                                  minWidth: 120,
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemcount
                                                        : "Item Count"}
                                                    </span>
                                                  ),
                                                  accessor: "itemCount",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemprice
                                                        : "Item Price"}
                                                    </span>
                                                  ),
                                                  accessor: "ordeItemPrice",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .pricepaid
                                                        : "Price Paid"}
                                                    </span>
                                                  ),
                                                  accessor: "orderPricePaid",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storecode
                                                        : "Store Code"}
                                                    </span>
                                                  ),
                                                  accessor: "storeCode",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storeaddress
                                                        : "Store Address"}
                                                    </span>
                                                  ),
                                                  accessor: "storeAddress",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .discount
                                                        : "Discount"}
                                                    </span>
                                                  ),
                                                  accessor: "discount",
                                                },
                                              ]}
                                              resizable={false}
                                              minRows={2}
                                              defaultPageSize={5}
                                              showPagination={true}
                                              SubComponent={(row) => {
                                                return (
                                                  <div
                                                    className="inner-custom-react-table"
                                                    id="inner-custom-react-table"
                                                  >
                                                    {this.state
                                                      .masterConfigrationUnknown
                                                      .isUnknown ? (
                                                      <>
                                                        {this.state.attchData
                                                          .length > 0 && (
                                                            <div className="px-4">
                                                              <table>
                                                                <thead>
                                                                  <th>
                                                                    Super Category
                                                                  </th>
                                                                  <th>Item Name</th>
                                                                  <th>Item Code</th>
                                                                </thead>
                                                                <tbody>
                                                                  {this.state.attchData.map(
                                                                    (
                                                                      datas,
                                                                      index
                                                                    ) => {
                                                                      return (
                                                                        <tr
                                                                          key={index}
                                                                        >
                                                                          <td>
                                                                            {
                                                                              datas.superCategory
                                                                            }
                                                                          </td>
                                                                          <td>
                                                                            {
                                                                              datas.productDetail
                                                                            }
                                                                          </td>
                                                                          <td>
                                                                            {
                                                                              datas.codeName
                                                                            }
                                                                          </td>
                                                                        </tr>
                                                                      );
                                                                    }
                                                                  )}
                                                                </tbody>
                                                              </table>
                                                            </div>
                                                          )}
                                                      </>
                                                    ) : (
                                                      <ReactTable
                                                        // data={row.original.orderItems}
                                                        data={this.state.OrderSubItem.filter(
                                                          (x) =>
                                                            x.invoiceNumber ===
                                                            row.original
                                                              .invoiceNumber
                                                        )}
                                                        columns={[
                                                          {
                                                            Header: <span> </span>,
                                                            accessor: "invoiceNo",
                                                            width: 20,
                                                            Cell: (row) => {
                                                              return (
                                                                <div className="filter-checkbox">
                                                                  <input
                                                                    type="checkbox"
                                                                    // id={
                                                                    //   "item" +
                                                                    //   row.original
                                                                    //     .invoiceNumber
                                                                    // }
                                                                    id={
                                                                      "item" +
                                                                      row.original
                                                                        .orderItemID
                                                                    }
                                                                    style={{
                                                                      display:
                                                                        "none",
                                                                    }}
                                                                    name="AllItem"
                                                                    // checked={
                                                                    //   this.state
                                                                    //     .CheckBoxAllItem[
                                                                    //   row.original
                                                                    //     .articleNumber
                                                                    //   ] === true
                                                                    // }
                                                                    checked={
                                                                      this.state
                                                                        .CheckBoxAllItem[
                                                                      row.original
                                                                        .orderItemID
                                                                      ] === true
                                                                    }
                                                                    // onChange={this.checkIndividualItem.bind(
                                                                    //   this,
                                                                    //   row.original
                                                                    //     .articleNumber,
                                                                    //   row.original
                                                                    // )}
                                                                    onChange={() =>
                                                                      this.checkmultiIndividualItem(
                                                                        row
                                                                          ?.original
                                                                          .orderItemID,
                                                                        row?.original
                                                                      )
                                                                    }
                                                                  />
                                                                  <label
                                                                    htmlFor={
                                                                      "item" +
                                                                      row.original
                                                                        .orderItemID
                                                                    }
                                                                  ></label>
                                                                </div>
                                                              );
                                                            },
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .span
                                                                    .articlenumber
                                                                  : "Article Number"}
                                                              </span>
                                                            ),
                                                            accessor:
                                                              "articleNumber",
                                                            minWidth: 140,
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .span
                                                                    .articlename
                                                                  : "Article Name"}
                                                              </span>
                                                            ),
                                                            accessor: "articleName",
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .ticketingDashboard
                                                                    .articlemrp
                                                                  : "Article MRP"}
                                                              </span>
                                                            ),
                                                            accessor: "itemPrice",
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .span
                                                                    .pricepaid
                                                                  : "Price Paid"}
                                                              </span>
                                                            ),
                                                            accessor: "pricePaid",
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .span.discount
                                                                  : "Discount"}
                                                              </span>
                                                            ),
                                                            accessor: "discount",
                                                          },
                                                          {
                                                            Header: (
                                                              <span>
                                                                {TranslationContext !==
                                                                  undefined
                                                                  ? TranslationContext
                                                                    .ticketingDashboard
                                                                    .requiredsize
                                                                  : "Required Size"}
                                                              </span>
                                                            ),
                                                            accessor: "requireSize",
                                                            Cell: (row) => {
                                                              return (
                                                                <div
                                                                  ref={
                                                                    this
                                                                      .setWrapperRef
                                                                  }
                                                                >
                                                                  <input
                                                                    type="text"
                                                                    id={
                                                                      "requireSizeTxt" +
                                                                      row.original
                                                                        .articleNumber
                                                                    }
                                                                    value={
                                                                      row.original
                                                                        .requireSize ||
                                                                      ""
                                                                    }
                                                                    name="requiredSize"
                                                                    className="order-input"
                                                                    autoComplete="off"
                                                                    ref={(
                                                                      input
                                                                    ) => {
                                                                      this.searchInput = input;
                                                                    }}
                                                                    onChange={() => {
                                                                      this.handleRequireSize(
                                                                        this,
                                                                        row
                                                                      );
                                                                    }}
                                                                  />
                                                                </div>
                                                              );
                                                            },
                                                          },
                                                        ]}
                                                        resizable={false}
                                                        defaultPageSize={5}
                                                        minRows={2}
                                                        showPagination={true}
                                                      />
                                                    )}
                                                  </div>
                                                );
                                              }}
                                            />
                                          </div>
                                        </div>
                                      ) : (
                                        // ticket have selected order table to show order
                                        <div
                                          // className="tab-pane fade"
                                          id="selectedproduct-tab"
                                          // role="tabpanel"
                                          aria-labelledby="selectedproduct-tab"
                                        >
                                          <div
                                            className="reactstoreselect custom-react-table"
                                            id="ordertbls1"
                                            style={{ display: "block" }}
                                          >
                                            <ReactTable
                                              data={this.state.SelectedAllOrder}
                                              // expanded={this.state.expanded}
                                              // onExpandedChange={(
                                              //   newExpanded,
                                              //   index,
                                              //   event
                                              // ) => {
                                              //   if (newExpanded[index[0]] === false) {
                                              //     newExpanded = {};
                                              //   } else {
                                              //     Object.keys(newExpanded).map((k) => {
                                              //       newExpanded[k] =
                                              //         parseInt(k) === index[0]
                                              //           ? {}
                                              //           : false;
                                              //     });
                                              //   }
                                              //   this.setState({
                                              //     ...this.state,
                                              //     expanded: newExpanded,
                                              //   });
                                              // }}
                                              columns={[
                                                {
                                                  Header: <span></span>,
                                                  accessor: "invoiceNumber",
                                                  width: 20,
                                                  Cell: (row) => (
                                                    // <div className="filter-checkbox">
                                                    <div className="orders_radio_button">
                                                      <input
                                                        type="checkbox"
                                                        id={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                        // style={{
                                                        //   display: "none",
                                                        // }}
                                                        name="AllOrder"
                                                        checked={this.state.selectedInvoiceNo.includes(
                                                          row.original.invoiceNumber
                                                        )}
                                                        // onChange={this.handleGetOderItemData.bind(
                                                        //   this,
                                                        //   row.original.invoiceNumber,
                                                        //   row.original
                                                        // )}
                                                        onChange={(e) =>
                                                          this.newhandleDeleteSelectedItem(
                                                            e,
                                                            row.original
                                                              .invoiceNumber,
                                                            row.original
                                                          )
                                                        }
                                                      />
                                                      <label
                                                        htmlFor={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                      ></label>
                                                    </div>
                                                  ),
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicenumber
                                                        : "Invoice Number"}
                                                    </span>
                                                  ),
                                                  accessor: "invoiceNumber",
                                                  minWidth: 150,
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicedate
                                                        : "Invoice Date"}
                                                    </span>
                                                  ),
                                                  accessor: "dateFormat",
                                                  Cell: (row) => {
                                                    return row.original
                                                      .dateFormat !== null
                                                      ? moment(
                                                        row.original.invoiceDate
                                                      ).format("Do/MMM/YYYY")
                                                      : "Not Added";
                                                  },
                                                  minWidth: 120,
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemcount
                                                        : "Item Count"}
                                                    </span>
                                                  ),
                                                  accessor: "itemCount",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemprice
                                                        : "Item Price"}
                                                    </span>
                                                  ),
                                                  accessor: "ordeItemPrice",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .pricepaid
                                                        : "Price Paid"}
                                                    </span>
                                                  ),
                                                  accessor: "orderPricePaid",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storecode
                                                        : "Store Code"}
                                                    </span>
                                                  ),
                                                  accessor: "storeCode",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storeaddress
                                                        : "Store Address"}
                                                    </span>
                                                  ),
                                                  accessor: "storeAddress",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .discount
                                                        : "Discount"}
                                                    </span>
                                                  ),
                                                  accessor: "discount",
                                                },
                                              ]}
                                              resizable={false}
                                              minRows={2}
                                              defaultPageSize={5}
                                              showPagination={
                                                this.state.SelectedAllOrder
                                                  ?.length > 5
                                                  ? true
                                                  : false
                                              }
                                            />
                                          </div>
                                          <div
                                            className="reactstoreselect custom-react-table"
                                            id="orderitemtbl1"
                                            style={{ display: "none" }}
                                          >
                                            <ReactTable
                                              data={this.state.SelectedAllOrder}
                                              expanded={this.state.expanded}
                                              onExpandedChange={(
                                                newExpanded,
                                                index,
                                                event
                                              ) => {
                                                if (
                                                  newExpanded[index[0]] === false
                                                ) {
                                                  newExpanded = {};
                                                } else {
                                                  this.newOpenSelectedItemData(
                                                    {
                                                      target: {
                                                        checked: true,
                                                      },
                                                    },
                                                    this.state.SelectedAllOrder[
                                                      index
                                                    ]?.invoiceNumber,
                                                    this.state.SelectedAllOrder[
                                                    index
                                                    ]
                                                  );
                                                  Object.keys(newExpanded).map(
                                                    (k) => {
                                                      newExpanded[k] =
                                                        parseInt(k) === index[0]
                                                          ? {}
                                                          : false;
                                                    }
                                                  );
                                                }
                                                this.setState({
                                                  ...this.state,
                                                  expanded: newExpanded,
                                                });
                                              }}
                                              columns={[
                                                {
                                                  Header: <span></span>,
                                                  accessor: "invoiceNumber",
                                                  width: 20,
                                                  Cell: (row) => (
                                                    <div className="filter-checkbox">
                                                      <input
                                                        type="checkbox"
                                                        id={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                        style={{
                                                          display: "none",
                                                        }}
                                                        name="AllOrder"
                                                        checked={this.state.selectedInvoiceNo.includes(
                                                          row.original.invoiceNumber
                                                        )}
                                                        // onChange={this.handleGetOderItemData.bind(
                                                        //   this,
                                                        //   row.original.invoiceNumber,
                                                        //   row.original
                                                        // )}
                                                        onChange={(e) =>
                                                          this.newHandleGetOderItemData(
                                                            e,
                                                            row.original
                                                              .invoiceNumber,
                                                            row.original
                                                          )
                                                        }
                                                      />
                                                      <label
                                                        htmlFor={
                                                          "all" +
                                                          row.original.invoiceNumber
                                                        }
                                                      ></label>
                                                    </div>
                                                  ),
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicenumber
                                                        : "Invoice Number"}
                                                    </span>
                                                  ),
                                                  accessor: "invoiceNumber",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .invoicedate
                                                        : "Invoice Date"}
                                                    </span>
                                                  ),
                                                  accessor: "invoiceDate",
                                                  Cell: (row) => {
                                                    return row.original
                                                      .invoiceDate !== null
                                                      ? moment(
                                                        row.original.invoiceDate
                                                      ).format("Do/MMM/YYYY")
                                                      : "Not Added";
                                                  },
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemcount
                                                        : "Item Count"}
                                                    </span>
                                                  ),
                                                  accessor: "itemCount",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .itemprice
                                                        : "Item Price"}
                                                    </span>
                                                  ),
                                                  accessor: "ordeItemPrice",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .pricepaid
                                                        : "Price Paid"}
                                                    </span>
                                                  ),
                                                  accessor: "orderPricePaid",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storecode
                                                        : "Store Code"}
                                                    </span>
                                                  ),
                                                  accessor: "storeCode",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .storeaddress
                                                        : "Store Address"}
                                                    </span>
                                                  ),
                                                  accessor: "storeAddress",
                                                },
                                                {
                                                  Header: (
                                                    <span>
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.span
                                                          .discount
                                                        : "Discount"}
                                                    </span>
                                                  ),
                                                  accessor: "discount",
                                                },
                                              ]}
                                              minRows={2}
                                              defaultPageSize={5}
                                              showPagination={
                                                this.state.SelectedAllOrder
                                                  ?.length > 5
                                                  ? true
                                                  : false
                                              }
                                              SubComponent={(row) => {
                                                return (
                                                  <div
                                                    className="inner-custom-react-table"
                                                    id="inner-custom-react-table"
                                                  >
                                                    <ReactTable
                                                      data={
                                                        this.state.OrderSubItem
                                                        //   .filter(
                                                        //   (x) =>
                                                        //     x.invoiceNumber ===
                                                        //     row.original.invoiceNumber
                                                        // )
                                                      }
                                                      columns={[
                                                        // {
                                                        //   Header: <span></span>,
                                                        //   accessor: "size",
                                                        //   width: 20,
                                                        //   Cell: (row) => (
                                                        //     <div className="filter-checkbox">
                                                        //       <input
                                                        //         type="checkbox"
                                                        //         id={
                                                        //           "item" +
                                                        //           row.original
                                                        //             .articleNumber
                                                        //         }
                                                        //         style={{
                                                        //           display: "none",
                                                        //         }}
                                                        //         name="AllItem"
                                                        //         checked={
                                                        //           this.state
                                                        //             .CheckBoxAllItem[
                                                        //           row.original
                                                        //             .articleNumber
                                                        //           ] === true
                                                        //         }
                                                        //         onChange={this.checkIndividualItem.bind(
                                                        //           this,
                                                        //           row.original
                                                        //             .articleNumber,
                                                        //           row.original
                                                        //         )}
                                                        //       />
                                                        //       <label
                                                        //         htmlFor={
                                                        //           "item" +
                                                        //           row.original
                                                        //             .articleNumber
                                                        //         }
                                                        //       ></label>
                                                        //     </div>
                                                        //   ),
                                                        // },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .span
                                                                  .articlenumber
                                                                : "Article Number"}
                                                            </span>
                                                          ),
                                                          accessor: "articleNumber",
                                                        },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .span
                                                                  .articlename
                                                                : "Article Name"}
                                                            </span>
                                                          ),
                                                          accessor: "articleName",
                                                        },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .ticketingDashboard
                                                                  .articlemrp
                                                                : "Article MRP"}
                                                            </span>
                                                          ),
                                                          accessor: "itemPrice",
                                                        },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .span.pricepaid
                                                                : "Price Paid"}
                                                            </span>
                                                          ),
                                                          accessor: "pricePaid",
                                                        },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .span.discount
                                                                : "Discount"}
                                                            </span>
                                                          ),
                                                          accessor: "discount",
                                                          sortable: true,
                                                        },
                                                        {
                                                          Header: (
                                                            <span>
                                                              {TranslationContext !==
                                                                undefined
                                                                ? TranslationContext
                                                                  .ticketingDashboard
                                                                  .requiredsize
                                                                : "Required Size"}
                                                            </span>
                                                          ),
                                                          accessor: "requireSize",
                                                          Cell: (row) => {
                                                            return (
                                                              <div
                                                                ref={
                                                                  this.setWrapperRef
                                                                }
                                                              >
                                                                <input
                                                                  type="text"
                                                                  id={
                                                                    "requireSizeTxt" +
                                                                    row.original
                                                                      .articleNumber
                                                                  }
                                                                  className="order-input"
                                                                  value={
                                                                    row.original
                                                                      .requireSize ||
                                                                    ""
                                                                  }
                                                                  name="requiredSize"
                                                                  autoComplete="off"
                                                                  ref={(input) => {
                                                                    this.searchInput = input;
                                                                  }}
                                                                  onChange={() => {
                                                                    this.handleRequireSize(
                                                                      this,
                                                                      row
                                                                    );
                                                                  }}
                                                                />
                                                              </div>
                                                            );
                                                          },
                                                        },
                                                      ]}
                                                      defaultPageSize={5}
                                                      showPagination={
                                                        this.state.OrderSubItem
                                                          ?.length > 5
                                                          ? true
                                                          : false
                                                      }
                                                      minRows={2}
                                                    />
                                                  </div>
                                                );
                                              }}
                                            />
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                    {/* same outside the new unknwo flag paste it */}

                                  </div>

                                }



                              </Modal>
                            </div>
                            <div className="d-flex justify-content-between pr-5 mt-3">
                              {this.state.displayTicketFields[
                                "CollectaOffer"
                              ] && (
                                  <div>
                                    <label className="label-4">
                                      {/* {TranslationContext !== undefined
                                ? TranslationContext.label.collectaoffer
                                : "Collecta Offer"} */}
                                      {/* {this.state.ticketFields.length > 0
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "CollectaOffer".toLowerCase()
                                        ).length > 0
                                          ? this.state.ticketFields.filter(
                                            (x) =>
                                              x.fieldName.toLowerCase() ===
                                              "CollectaOffer".toLowerCase()
                                          )[0].detailsPage
                                            ? TranslationContext !== undefined
                                              ? this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "CollectaOffer".toLowerCase()
                                              )[0].displayHindiName ||
                                              TranslationContext.label
                                                .channelofpurchase
                                              : this.state.ticketFields.filter(
                                                (x) =>
                                                  x.fieldName.toLowerCase() ===
                                                  "CollectaOffer".toLowerCase()
                                              )[0].displayEnglishName ||
                                              "Collecta Offer"
                                            : "Collecta Offer"
                                          : "Collecta Offer"
                                        : "Collecta Offer"} */}
                                      {
                                        this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Collecta Offer".toLowerCase()
                                        )[0]?.displayEnglishName
                                      }
                                    </label>
                                    <label className="label-4 text-center">
                                      {ticketDetailsData.collectaOffer !== ""
                                        ? ticketDetailsData.collectaOffer
                                        : "No Collecta Offer"}
                                    </label>
                                  </div>
                                )}

                              {this.state.displayTicketFields["NpsRating"] && (
                                <div>
                                  <label className="label-4">
                                    {/* {TranslationContext !== undefined
                                ? TranslationContext.label.npsrating
                                : "NPS Rating"} */}
                                    {/* {this.state.ticketFields.length > 0
                                      ? this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "NpsRating".toLowerCase()
                                      ).length > 0
                                        ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "NpsRating".toLowerCase()
                                        )[0].detailsPage
                                          ? TranslationContext !== undefined
                                            ? this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "NpsRating".toLowerCase()
                                            )[0].displayHindiName ||
                                            TranslationContext.label
                                              .channelofpurchase
                                            : this.state.ticketFields.filter(
                                              (x) =>
                                                x.fieldName.toLowerCase() ===
                                                "NpsRating".toLowerCase()
                                            )[0].displayEnglishName ||
                                            "Nps Rating"
                                          : "Nps Rating"
                                        : "Nps Rating"
                                      : "Nps Rating"} */}
                                    {
                                      this.state.ticketFields.filter(
                                        (x) =>
                                          x.fieldName.toLowerCase() ===
                                          "Nps Rating".toLowerCase()
                                      )[0]?.displayEnglishName
                                    }
                                  </label>
                                  <label className="label-4 text-center">
                                    {ticketDetailsData.npsRating !== ""
                                      ? ticketDetailsData.npsRating
                                      : "No Nps Rating"}
                                  </label>
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                </div>
              </div>
            </div>

            {/* tab for bata dashboard */}
            {/* {window.localStorage.getItem("Programcode") === 'bataclub' && */}
            {flags?.isHorizontal && (
              <ul className="nav bata_club_ui" role="tablist">
                <li className="nav-item">
                  <a
                    className="nav-link active"
                    data-toggle="tab"
                    href="#ticket_page"
                    role="tab"
                    aria-controls="ticket_page"
                    aria-selected="false"
                  >
                    Ticket
                  </a>
                  {/* <a className="nav-link active" aria-controls="ticket_page" data-toggle="tab"
                  href="#ticket_page" aria-selected="true" role="tab">Ticket</a> */}
                </li>
                <li className="nav-item">
                  <a
                    className="nav-link"
                    data-toggle="tab"
                    href="#order_page"
                    role="tab"
                    aria-controls="order_page"
                    onClick={() => {
                      this.handleOrderCreditTab("orderId", "order_tab");
                    }}
                  >
                    {/* <span style={{ fontWeight: 600, fontSize: "16px" }}>+ </span> */}
                    Order (
                    {selectedWebsiteOrder.length > 0 ? "1" : orderList.length})
                  </a>
                </li>
                {flags?.isCreditNote && (
                  <li className="nav-item">
                    <a
                      className="nav-link"
                      href="#creditNote_page"
                      onClick={() => {
                        this.handleOrderCreditTab("credit_note", "credit_tab");
                      }}
                      data-toggle="tab"
                      aria-controls="creditNote_page"
                      role="tab"
                    >
                      Credit Note
                    </a>
                  </li>
                )}
                <li className="nav-item">
                  <a
                    className="nav-link"
                    href="#store_page"
                    data-toggle="tab"
                    aria-controls="store_page"
                  // onClick={() => {
                  //   this.hanldeGetSelectedStoreData(this.state.ticket_Id, true);
                  // }}
                  >
                    Store
                  </a>
                </li>
                {flags?.isCCAvenue && (
                  <li className="nav-item">
                    <a
                      className="nav-link"
                      href="#cc_avenue"
                      data-toggle="tab"
                      aria-controls="cc_avenue"
                    >
                      CC Avenue
                    </a>
                  </li>
                )}
                {/* <li className="nav-item" >
                  <a className="nav-link" href="#razor_pay" data-toggle="tab"
                    aria-controls="razor_pay" >Razor Pay</a>
                </li> */}
                {/* <li className="nav-item">
                <a className="nav-link" href="#" disabled={true}>Feedback</a>
              </li> */}
              </ul>
            )}
            <div className="tab-content p-0">
              {/* ////////////////////// */}
              <div
                className="tab-pane fade show active"
                id="ticket_page"
                role="tabpanel"
                aria-labelledby="ticket_page"
              >
                <div style={{ padding: "15px", background: "#fff" }}>
                  <div className="rectangle-3 text-editor">
                    {this.state.displayTicketFields["Ticket Title"] && (
                      <>
                        <div className="row mt-2">
                          <label className="ticket-title-where mb-0">
                            {this.state.ticketFields.length > 0
                              ? this.state.ticketFields.filter(
                                (x) =>
                                  x.fieldName.toLowerCase() ===
                                  "Ticket Title".toLowerCase()
                              ).length > 0
                                ? this.state.ticketFields.filter(
                                  (x) =>
                                    x.fieldName.toLowerCase() ===
                                    "Ticket Title".toLowerCase()
                                )[0].detailsPage
                                  ? TranslationContext !== undefined
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Ticket Title".toLowerCase()
                                    )[0].displayHindiName ||
                                    TranslationContext.label.tickettitle
                                    : this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Ticket Title".toLowerCase()
                                    )[0].displayEnglishName || "Ticket Title"
                                  : TranslationContext !== undefined
                                    ? TranslationContext.label.tickettitle
                                    : "Ticket Title"
                                : TranslationContext !== undefined
                                  ? TranslationContext.label.tickettitle
                                  : "Ticket Title"
                              : TranslationContext !== undefined
                                ? TranslationContext.label.tickettitle
                                : "Ticket Title"}
                            :
                          </label>
                        </div>
                        <div className="row" style={{ marginTop: "0" }}>
                          <label className="label-2 mb-0">
                            {ticketDetailsData.ticketTitle}
                          </label>
                        </div>
                      </>
                    )}
                    <div className="row mt-3">
                      <label className="ticket-title-where mb-1">
                        {this.state.ticketFields.length > 0
                          ? this.state.ticketFields.filter(
                            (x) =>
                              x.fieldName.toLowerCase() ===
                              "Ticket Details".toLowerCase()
                          ).length > 0
                            ? this.state.ticketFields.filter(
                              (x) =>
                                x.fieldName.toLowerCase() ===
                                "Ticket Details".toLowerCase()
                            )[0].detailsPage
                              ? TranslationContext !== undefined
                                ? this.state.ticketFields.filter(
                                  (x) =>
                                    x.fieldName.toLowerCase() ===
                                    "Ticket Details".toLowerCase()
                                )[0].displayHindiName ||
                                TranslationContext.label.ticketdetails
                                : this.state.ticketFields.filter(
                                  (x) =>
                                    x.fieldName.toLowerCase() ===
                                    "Ticket Details".toLowerCase()
                                )[0].displayEnglishName || "Ticket Details"
                              : TranslationContext !== undefined
                                ? TranslationContext.label.ticketdetails
                                : "Ticket Details"
                            : TranslationContext !== undefined
                              ? TranslationContext.label.ticketdetails
                              : "Ticket Details"
                          : TranslationContext !== undefined
                            ? TranslationContext.label.ticketdetails
                            : "Ticket Details"}
                        :
                      </label>
                    </div>
                    <p
                      className="label-5"
                      style={{ display: "inline-block", color: "#000" }}
                    >
                      {/<[a-z][\s\S]*>/i.test(
                        ticketDetailsData.ticketdescription
                      )
                        ? ReactHtmlParser(ticketDetailsData.ticketdescription)
                        : ReactHtmlParser(
                          ticketDetailsData.ticketdescription
                            ? ticketDetailsData.ticketdescription.replace(
                              /(?:\r\n|\r|\n)/g,
                              "<br>"
                            )
                            : ticketDetailsData.ticketdescription
                        )}
                    </p>

                    <div className="row my-2 mx-1 align-items-center">
                      {this.state.attachedFiles.map((item, i) =>
                        i < 5 ? (
                          <div style={{ position: "relative" }} key={i}>
                            {/* <div>
                            <img
                              src={CircleCancel}
                              alt="thumb"
                              className="circleCancle"
                              onClick={() => {
                                this.handleRemoveImage(i);
                              }}
                            />
                          </div> */}

                            {/* <a href={item.name} download> */}
                            <img
                              src={
                                item.Type === "docx"
                                  ? require("./../assets/Images/word.png")
                                  : item.Type === "doc"
                                    ? require("./../assets/Images/word.png")
                                    : item.Type === "xlsx"
                                      ? require("./../assets/Images/excel.png")
                                      : item.Type === "xls"
                                        ? require("./../assets/Images/excel.png")
                                        : item.Type === "csv"
                                          ? require("./../assets/Images/excel.png")
                                          : item.Type === "pdf"
                                            ? require("./../assets/Images/pdf.png")
                                            : item.Type === "txt"
                                              ? require("./../assets/Images/TxtIcon.png")
                                              : item.Type === "pptm"
                                                ? require("./../assets/Images/ppt.png")
                                                : item.Type === "ppt"
                                                  ? require("./../assets/Images/ppt.png")
                                                  : item.Type === "pptx"
                                                    ? require("./../assets/Images/ppt.png")
                                                    : item.Type === "zip"
                                                      ? require("./../assets/Images/zip.png")
                                                      : item.Type === "7z"
                                                        ? require("./../assets/Images/zip.png")
                                                        : item.Type === "js"
                                                          ? require("./../assets/Images/js.png")
                                                          : item.Type === "html"
                                                            ? require("./../assets/Images/html.png")
                                                            : item.Type === "avi"
                                                              ? require("./../assets/Images/video.png")
                                                              : item.Type === "mp4"
                                                                ? require("./../assets/Images/video.png")
                                                                : item.Type === "mpeg"
                                                                  ? require("./../assets/Images/video.png")
                                                                  : item.name
                              }
                              title={item.name}
                              alt={
                                item.name.length > 5
                                  ? item.name
                                    .split("/")
                                    .pop()
                                    .substring(0, 5) + "..."
                                  : item.name
                              }
                              className="thumbtick"
                              onClick={() => {
                                window.open(item.name);
                              }}
                            />
                            {/* </a> */}
                          </div>
                        ) : (
                          ""
                        )
                      )}

                      {this.state.attachedFiles.length > 4 ? (
                        <img
                          src={PlusImg}
                          alt="thumb"
                          className="thumbtick-plus"
                          onClick={this.handleAttachedFileOpen.bind(this)}
                        />
                      ) : (
                        <img
                          style={{ display: "none" }}
                          src={PlusImg}
                          alt="thumb"
                          className="thumbtick-plus"
                          onClick={this.handleThumbModalOpen.bind(this)}
                        />
                      )}
                      {this.state.attachedFiles.length > 0 && (
                        <div className="download_arrow">
                          <img
                            onClick={this.handleMultiDownload}
                            alt=""
                            src={DownArrowIcon}
                          />
                        </div>
                      )}
                    </div>

                    <Modal
                      open={this.state.Plus}
                      onClose={this.handleThumbModalClose.bind(this)}
                      modalId="thumb-modal-popup"
                      overlayId="logout-ovrlykb"
                    >
                      <div>
                        <div className="close">
                          <img
                            src={CrossIcon}
                            alt="cross-icon"
                            onClick={this.handleThumbModalClose.bind(this)}
                          />
                        </div>
                        <div className="row my-3 mx-1">
                          {this.state.file.map((item, i) => (
                            <div style={{ position: "relative" }} key={i}>
                              <div>
                                <img
                                  src={CircleCancel}
                                  alt="thumb"
                                  className="circleCancle"
                                  onClick={() => {
                                    this.handleRemoveImage(i);
                                  }}
                                />
                              </div>

                              <div>
                                <img
                                  src={
                                    item.Type === "docx"
                                      ? require("./../assets/Images/word.png")
                                      : item.Type === "doc"
                                        ? require("./../assets/Images/word.png")
                                        : item.Type === "xlsx"
                                          ? require("./../assets/Images/excel.png")
                                          : item.Type === "xls"
                                            ? require("./../assets/Images/excel.png")
                                            : item.Type === "csv"
                                              ? require("./../assets/Images/excel.png")
                                              : item.Type === "pdf"
                                                ? require("./../assets/Images/pdf.png")
                                                : item.Type === "txt"
                                                  ? require("./../assets/Images/TxtIcon.png")
                                                  : item.Type === "pptm"
                                                    ? require("./../assets/Images/ppt.png")
                                                    : item.Type === "ppt"
                                                      ? require("./../assets/Images/ppt.png")
                                                      : item.Type === "pptx"
                                                        ? require("./../assets/Images/ppt.png")
                                                        : item.Type === "zip"
                                                          ? require("./../assets/Images/zip.png")
                                                          : item.Type === "7z"
                                                            ? require("./../assets/Images/zip.png")
                                                            : item.Type === "js"
                                                              ? require("./../assets/Images/js.png")
                                                              : item.Type === "html"
                                                                ? require("./../assets/Images/html.png")
                                                                : item.Type === "avi"
                                                                  ? require("./../assets/Images/video.png")
                                                                  : item.Type === "mp4"
                                                                    ? require("./../assets/Images/video.png")
                                                                    : item.Type === "mpeg"
                                                                      ? require("./../assets/Images/video.png")
                                                                      : item.File
                                                                        ? URL.createObjectURL(item.File)
                                                                        : require("./../assets/Images/thumbticket.png")
                                  }
                                  title={item.name}
                                  alt={
                                    item.name.length > 5
                                      ? item.name
                                        .split("/")
                                        .pop()
                                        .substring(0, 5) + "..."
                                      : item.name
                                  }
                                  className="thumbtick"
                                />
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </Modal>
                    <Modal
                      open={this.state.replyAttachedFiles}
                      onClose={this.handleThumbModalCloseReply.bind(this)}
                      modalId="thumb-modal-popup"
                      overlayId="logout-ovrlykb"
                    >
                      <div>
                        <div className="close">
                          <img
                            src={CrossIcon}
                            alt="cross-icon"
                            onClick={this.handleThumbModalCloseReply.bind(this)}
                          />
                        </div>
                        <div className="row my-3 mx-1">
                          {this.state.Rplyfile.length > 0
                            ? this.state.Rplyfile.map((item, i) => (
                              <div style={{ position: "relative" }} key={i}>
                                <div>
                                  <img
                                    src={CircleCancel}
                                    alt="thumb"
                                    className="circleCancle"
                                    onClick={() => {
                                      this.handleRemoveImageReply(i);
                                    }}
                                  />
                                </div>

                                <div>
                                  <img
                                    src={
                                      item.Type === "docx"
                                        ? require("./../assets/Images/word.png")
                                        : item.Type === "doc"
                                          ? require("./../assets/Images/word.png")
                                          : item.Type === "xlsx"
                                            ? require("./../assets/Images/excel.png")
                                            : item.Type === "xls"
                                              ? require("./../assets/Images/excel.png")
                                              : item.Type === "csv"
                                                ? require("./../assets/Images/excel.png")
                                                : item.Type === "pdf"
                                                  ? require("./../assets/Images/pdf.png")
                                                  : item.Type === "txt"
                                                    ? require("./../assets/Images/TxtIcon.png")
                                                    : item.Type === "pptm"
                                                      ? require("./../assets/Images/ppt.png")
                                                      : item.Type === "ppt"
                                                        ? require("./../assets/Images/ppt.png")
                                                        : item.Type === "pptx"
                                                          ? require("./../assets/Images/ppt.png")
                                                          : item.Type === "zip"
                                                            ? require("./../assets/Images/zip.png")
                                                            : item.Type === "7z"
                                                              ? require("./../assets/Images/zip.png")
                                                              : item.Type === "js"
                                                                ? require("./../assets/Images/js.png")
                                                                : item.Type === "html"
                                                                  ? require("./../assets/Images/html.png")
                                                                  : item.Type === "avi"
                                                                    ? require("./../assets/Images/video.png")
                                                                    : item.Type === "mp4"
                                                                      ? require("./../assets/Images/video.png")
                                                                      : item.Type === "mpeg"
                                                                        ? require("./../assets/Images/video.png")
                                                                        : item.File
                                                                          ? URL.createObjectURL(item.File)
                                                                          : require("./../assets/Images/thumbticket.png")
                                    }
                                    title={item.name}
                                    alt={
                                      item.name.length > 5
                                        ? item.name
                                          .split("/")
                                          .pop()
                                          .substring(0, 5) + "..."
                                        : item.name
                                    }
                                    className="thumbtick"
                                  />
                                </div>
                              </div>
                            ))
                            : null}
                        </div>
                      </div>
                    </Modal>
                    <Modal
                      open={this.state.forwardAttachedFiles}
                      onClose={this.handleThumbModalCloseForward.bind(this)}
                      modalId="thumb-modal-popup"
                      overlayId="logout-ovrlykb"
                    >
                      <div>
                        <div className="close">
                          <img
                            src={CrossIcon}
                            alt="cross-icon"
                            onClick={this.handleThumbModalCloseForward.bind(
                              this
                            )}
                            style={{ marginTop: "1.5rem" }}
                          />
                        </div>
                        {this.state.forwardAttachmentFromMail.length > 0 && (
                          <>
                            <p style={{ fontWeight: "bold" }}>
                              Attachments From Mail
                            </p>
                          </>
                        )}
                        <div className="row my-3 mx-1">
                          {this.state.forwardAttachmentFromMail.map(
                            (item, i) => {
                              return (
                                <div style={{ position: "relative" }} key={i}>
                                  <div>
                                    <img
                                      src={CircleCancel}
                                      alt="thumb"
                                      className="circleCancle"
                                      onClick={() => {
                                        this.handleRemoveImageForward(
                                          i,
                                          "mail"
                                        );
                                      }}
                                    />
                                  </div>

                                  <div>
                                    <img
                                      src={item.attachmentName}
                                      title={item.attachmentName}
                                      alt={
                                        item.attachmentName.length > 5
                                          ? item.attachmentName
                                            .split("/")
                                            .pop()
                                            .substring(0, 5) + "..."
                                          : item.attachmentName
                                      }
                                      className="thumbtick"
                                    />
                                  </div>
                                </div>
                              );
                            }
                          )}
                        </div>

                        {this.state.forwardFile.length > 0 && (
                          <p style={{ fontWeight: "bold" }}>
                            Attachments Selected By You
                          </p>
                        )}

                        <div className="row my-3 mx-1">
                          {this.state.forwardFile.map((item, i) => (
                            <div style={{ position: "relative" }} key={i}>
                              <div>
                                <img
                                  src={CircleCancel}
                                  alt="thumb"
                                  className="circleCancle"
                                  onClick={() => {
                                    this.handleRemoveImageForward(i, "user");
                                  }}
                                />
                              </div>

                              <div>
                                <img
                                  src={
                                    item.Type === "docx"
                                      ? require("./../assets/Images/word.png")
                                      : item.Type === "doc"
                                        ? require("./../assets/Images/word.png")
                                        : item.Type === "xlsx"
                                          ? require("./../assets/Images/excel.png")
                                          : item.Type === "xls"
                                            ? require("./../assets/Images/excel.png")
                                            : item.Type === "csv"
                                              ? require("./../assets/Images/excel.png")
                                              : item.Type === "pdf"
                                                ? require("./../assets/Images/pdf.png")
                                                : item.Type === "txt"
                                                  ? require("./../assets/Images/TxtIcon.png")
                                                  : item.Type === "pptm"
                                                    ? require("./../assets/Images/ppt.png")
                                                    : item.Type === "ppt"
                                                      ? require("./../assets/Images/ppt.png")
                                                      : item.Type === "pptx"
                                                        ? require("./../assets/Images/ppt.png")
                                                        : item.Type === "zip"
                                                          ? require("./../assets/Images/zip.png")
                                                          : item.Type === "7z"
                                                            ? require("./../assets/Images/zip.png")
                                                            : item.Type === "js"
                                                              ? require("./../assets/Images/js.png")
                                                              : item.Type === "html"
                                                                ? require("./../assets/Images/html.png")
                                                                : item.Type === "avi"
                                                                  ? require("./../assets/Images/video.png")
                                                                  : item.Type === "mp4"
                                                                    ? require("./../assets/Images/video.png")
                                                                    : item.Type === "mpeg"
                                                                      ? require("./../assets/Images/video.png")
                                                                      : item.File
                                                                        ? URL.createObjectURL(item.File)
                                                                        : require("./../assets/Images/thumbticket.png")
                                  }
                                  title={item.name}
                                  alt={
                                    item.name.length > 5
                                      ? item.name
                                        .split("/")
                                        .pop()
                                        .substring(0, 5) + "..."
                                      : item.name
                                  }
                                  className="thumbtick"
                                />
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </Modal>
                    <Modal
                      open={this.state.isAttachedFileModal}
                      onClose={this.handleAttachedFileClose.bind(this)}
                      modalId="thumb-modal-popup"
                      overlayId="logout-ovrlykb"
                    >
                      <div>
                        <div className="close">
                          <img
                            src={CrossIcon}
                            alt="cross-icon"
                            onClick={this.handleAttachedFileClose.bind(this)}
                          />
                        </div>
                        <div className="row my-3 mx-1">
                          {this.state.attachedFiles.map((item, i) => (
                            <div style={{ position: "relative" }} key={i}>
                              {/* <div>
                              <img
                                src={CircleCancel}
                                alt="thumb"
                                className="circleCancle"
                                onClick={() => {
                                  this.handleRemoveImage(i);
                                }}
                              />
                            </div> */}

                              <div>
                                <img
                                  src={
                                    item.Type === "docx"
                                      ? require("./../assets/Images/word.png")
                                      : item.Type === "doc"
                                        ? require("./../assets/Images/word.png")
                                        : item.Type === "xlsx"
                                          ? require("./../assets/Images/excel.png")
                                          : item.Type === "xls"
                                            ? require("./../assets/Images/excel.png")
                                            : item.Type === "csv"
                                              ? require("./../assets/Images/excel.png")
                                              : item.Type === "pdf"
                                                ? require("./../assets/Images/pdf.png")
                                                : item.Type === "txt"
                                                  ? require("./../assets/Images/TxtIcon.png")
                                                  : item.Type === "pptm"
                                                    ? require("./../assets/Images/ppt.png")
                                                    : item.Type === "ppt"
                                                      ? require("./../assets/Images/ppt.png")
                                                      : item.Type === "pptx"
                                                        ? require("./../assets/Images/ppt.png")
                                                        : item.Type === "zip"
                                                          ? require("./../assets/Images/zip.png")
                                                          : item.Type === "7z"
                                                            ? require("./../assets/Images/zip.png")
                                                            : item.Type === "js"
                                                              ? require("./../assets/Images/js.png")
                                                              : item.Type === "html"
                                                                ? require("./../assets/Images/html.png")
                                                                : item.Type === "avi"
                                                                  ? require("./../assets/Images/video.png")
                                                                  : item.Type === "mp4"
                                                                    ? require("./../assets/Images/video.png")
                                                                    : item.Type === "mpeg"
                                                                      ? require("./../assets/Images/video.png")
                                                                      : item.name
                                  }
                                  title={item.name}
                                  alt={
                                    item.name.length > 5
                                      ? item.name
                                        .split("/")
                                        .pop()
                                        .substring(0, 5) + "..."
                                      : item.name
                                  }
                                  className="thumbtick"
                                  onClick={() => {
                                    window.open(item.name);
                                  }}
                                />
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    </Modal>
                    {this.state.displayTicketFields["Responses"] && (
                      <div className="row mt-2 ">
                        <div
                          className="d-flex align-items-center"
                          style={{ cursor: "pointer" }}
                          onClick={this.handleOpenResponseModal}
                        >
                          <label className="ticket-title-where mb-0">
                            {/* {TranslationContext !== undefined
                          ? TranslationContext.label.responses
                          : "Responses"} */}
                            {this.state.ticketFields.length > 0
                              ? this.state.ticketFields.filter(
                                (x) =>
                                  x.fieldName.toLowerCase() ===
                                  "Responses".toLowerCase()
                              ).length > 0
                                ? this.state.ticketFields.filter(
                                  (x) =>
                                    x.fieldName.toLowerCase() ===
                                    "Responses".toLowerCase()
                                )[0].detailsPage
                                  ? TranslationContext !== undefined
                                    ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Responses".toLowerCase()
                                    )[0].displayHindiName ||
                                    TranslationContext.label.channelofpurchase
                                    : this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Responses".toLowerCase()
                                    )[0].displayEnglishName || "Responses"
                                  : "Responses"
                                : "Responses"
                              : "Responses"}
                          </label>
                          <img
                            src={InfoIcon}
                            alt="info-icon"
                            height={10}
                            width={10}
                            className="ml-1"
                          />
                        </div>
                      </div>
                    )}

                    <Modal
                      open={this.state.isResponseModal}
                      onClose={this.handleCloseResponseModal}
                      modalId="response-modal"
                      center
                    >
                      <div
                        className="row"
                        style={{
                          marginLeft: "0px",
                          marginRight: "0px",
                        }}
                      >
                        <div
                          className="col-md-12 claim-status-card respone-modal-header"
                          style={{ height: "54px" }}
                        >
                          <label style={{ marginTop: "7px" }}>
                            <b>
                              {TranslationContext !== undefined
                                ? TranslationContext.label.responses
                                : "Responses"}
                            </b>
                          </label>
                          <div
                            className="claimplus"
                            onClick={this.handleCloseResponseModal.bind(this)}
                          >
                            <span className="plusline12"></span>
                            <span>
                              <img
                                src={MinusImg}
                                alt="Minus"
                                className="minus-imgorder"
                              />
                            </span>
                          </div>
                        </div>
                      </div>

                      <div
                        id="response-modal-content"
                        style={{ marginTop: "4rem" }}
                      >
                        {this.state.ticketResponseData !== null ? (
                          this.state.ticketResponseData.length > 0 ? (
                            this.state.ticketResponseData.map((qna) => {
                              return (
                                <div className="response-qna">
                                  <div>
                                    <label className="question">
                                      {" "}
                                      <span>Question: </span> {qna.question}
                                    </label>
                                  </div>
                                  <div>
                                    <label className="answer">
                                      {" "}
                                      <span>Answer: </span> {qna.answer}
                                    </label>
                                  </div>
                                </div>
                              );
                            })
                          ) : (
                            <h5 className="answer text-center">No Response</h5>
                          )
                        ) : (
                          <h5 className="answer text-center">No Response</h5>
                        )}
                      </div>
                    </Modal>
                    <div className="row">
                      <div className="mask1">
                        <div className="mail-mask">
                          <div
                            className="dropdown"
                            style={{ display: "inherit" }}
                          ></div>

                          <div
                            className={
                              this.state.isKB
                                ? "dropdown iskbticket"
                                : "dropdown"
                            }
                            style={{ display: "inherit" }}
                          >
                            <select
                              className="my-tic-email"
                              // value={this.state.ticketSourceId}
                              value={this.state.sourceName}
                              disabled
                            // onChange={this.handleTicketSourceChange}
                            >
                              {this.state.ticketSourceData.map((item) => {
                                return (
                                  <option value={item.ticketSourceName}>
                                    {item.ticketSourceName}
                                  </option>
                                );
                              })}
                            </select>
                            {
                              (this.state.sourceName === "Facebook" || this.state.sourceName === "Instagram") &&
                              <button className="tagbtn" onClick={() => this.handleTagFB()}>
                                Tag user</button>
                            }

                          </div>

                          {/* <div className="dropdown" style={{ display: "inherit" }}>
                        <button
                          className="dropdown-toggle my-tic-email"
                          type="button"
                          data-toggle="dropdown"
                        >
                          <img src={Email1} alt="email" className="EMFCImg" />
                          <span className="EMFCText">Email</span>
                        </button>
                        <ul className="dropdown-menu">
                          <li>
                            <a href="#!">
                              <img
                                src={Email1}
                                alt="email"
                                className="EMFCImg"
                              />
                              <span className="EMFCText">Email</span>
                            </a>
                          </li>
                          <li>
                            <a href="#!">
                              <img src={Sms1} alt="sma" className="EMFCImg" />
                              <span className="EMFCText">SMS</span>
                            </a>
                          </li>
                          <li>
                            <a href="#!">
                              <img
                                src={Facebook1}
                                alt="facebook"
                                className="EMFCImg"
                              />
                              <span className="EMFCText">Facebook</span>
                            </a>
                          </li>
                          <li>
                            <a href="#!">
                              <img src={Call1} alt="call" className="EMFCImg" />
                              <span className="EMFCText">Call</span>
                            </a>
                          </li>
                        </ul>
                      </div> */}

                          <div
                            className={
                              this.state.isKB
                                ? "mob-float iskbticket"
                                : "mob-float"
                            }
                            style={{ display: "flex", float: "right" }}
                          >
                            <div className="line-1"></div>
                            {EmailCollapseUpDown}
                          </div>
                        </div>
                      </div>
                    </div>
                    {this.state.isSMS ? (
                      <div className="myTicketSMS  mt-2">
                        <div className=" mail-mask d-flex justify-content-between ">
                          <h5>Choose SMS Template</h5>
                          <select
                            className="my-tic-email"
                            onChange={(e) => this.handelSMSTamplet(e)}
                          >
                            <option value="-5">Select Template</option>
                            {this.state.smsdata
                              .filter(
                                (e) => e.currentStatus.status === "Publish"
                              )
                              .map((e, i) => {
                                return (
                                  <option value={e.id}>{e.templateName}</option>
                                );
                              })}
                          </select>
                        </div>
                        <div>
                          <textarea
                            className="w-100 textarea-div"
                            rows={5}
                            value={this.state.textdescription}
                            readOnly
                          ></textarea>
                          <div className="allInput">
                            {/* <div className=""> */}
                            <ul>
                              <li>
                                <label>To Mobile:</label>&nbsp;
                                <input
                                  type="text"
                                  value={
                                    this.state.customerProfileInfo
                                      .customerPhoneNumber
                                  }
                                  readOnly
                                />
                              </li>
                            </ul>
                            {/* </div> */}
                            <button
                              onClick={() => this.handleSendSms()}
                              disabled={
                                this.state.textdescription?.length > 0
                                  ? false
                                  : true
                              }
                            >
                              Send
                            </button>
                          </div>
                        </div>
                      </div>
                    ) : this.state.isGoogleReview || this.state.sourceName === "GoogleReview" ? (
                      <div className="myTicketSMS mt-2">
                        <div className="mail-mask">
                          <h5>Write Your Review</h5>
                        </div>

                        <textarea
                          value={this.state.googlereviewbody}
                          onChange={(e) => {
                            this.handleGoogleevent(e);
                          }}
                          className="w-100"
                          rows={7}
                        ></textarea>
                        <div className="d-flex justify-content-end mt-2">
                          <button
                            onClick={() => this.handleSubmitGoogleReview()}
                            disabled={
                              this.state.googlereviewbody?.length > 0
                                ? false
                                : true
                            }
                          >
                            Submit
                          </button>
                        </div>
                      </div>
                    ) : this.state.isFromFB || this.state.sourceName === "Facebook" ? (
                      <div className="myTicketSMS mt-2">
                        <div className="mail-mask d-flex justify-content-between">
                          <h5>Reply On Facebook</h5>

                          <div>
                            <div
                              className="dropdown collapbtn"
                              style={{ display: "inherit", top: "5px" }}
                            >
                              <button
                                className="dropdown-toggle my-tic-email"
                                type="button"
                                data-toggle="dropdown"
                                onClick={this.handleTemplateBindByIssueType.bind(
                                  this
                                )}
                              >
                                <FontAwesomeIcon icon={faCalculator} />{" "}
                                {TranslationContext !== undefined
                                  ? TranslationContext.p.template
                                  : "Template"}
                              </button>
                              <ul className="dropdown-menu templatedropdown">
                                <input
                                  type="text"
                                  placeholder="Search Template"
                                  onChange={(e) => this.handleTemplateSearch(e)}
                                  className="inputsearchTemp"
                                />

                                {this.state.CkEditorTemplateData !== null &&
                                  this.state.filtertemplateArr.map((item, i) => (
                                    <li key={i} value={item.templateID}>
                                      <span
                                        onClick={this.handleCkEditorTemplateData.bind(
                                          this,
                                          item.templateID,
                                          item.templateName,
                                          2
                                        )}
                                      >
                                        {item.templateName}
                                      </span>
                                    </li>
                                  ))}
                              </ul>
                            </div>
                          </div>

                        </div>

                        <textarea
                          value={this.state.facebookreviewbody}
                          onChange={(e) => {
                            this.handleFacebookevent(e);
                          }}
                          className="w-100"
                          rows={7}
                        ></textarea>
                        {/* <div contentEditable={true} style={{
                          width: "100%", minHeight: "15vh",
                          maxHeight: "30vh", backgroundColor: "#ffffff", border: "1px solid #000000", overflowY: "auto",padding:"10px",
                          resize: "vertical"
                        }} onInput={(e) => {
                          this.handleFacebookevent(e);
                        }}>{ReactHtmlParser(this.state.facebookreviewbody)}</div> */}
                        <div className="d-flex justify-content-end mt-2">
                          <button
                            style={{ cursor: "pointer" }}
                            onClick={() => this.handleSubmitFacebookReview()}
                            disabled={
                              this.state.facebookreviewbody?.length > 0
                                ? false
                                : true
                            }
                          >{
                              this.state.reviewLoader ? <img src={loaderGif} style={{ width: "20px" }} /> : "Reply"
                            }

                          </button>
                        </div>
                      </div>
                    ) : this.state.isFromInsta || this.state.sourceName === "Instagram" ? (
                      <div className="myTicketSMS mt-2">
                        <div className="mail-mask  d-flex justify-content-between">
                          <h5>Reply On Instagram</h5>

                          <div>
                            <div
                              className="dropdown collapbtn"
                              style={{ display: "inherit", top: "5px" }}
                            >
                              <button
                                className="dropdown-toggle my-tic-email"
                                type="button"
                                data-toggle="dropdown"
                                onClick={this.handleTemplateBindByIssueType.bind(
                                  this
                                )}
                              >
                                <FontAwesomeIcon icon={faCalculator} />{" "}
                                {TranslationContext !== undefined
                                  ? TranslationContext.p.template
                                  : "Template"}
                              </button>
                              <ul className="dropdown-menu templatedropdown">
                                <input
                                  type="text"
                                  placeholder="Search Template"
                                  onChange={(e) => this.handleTemplateSearch(e)}
                                  className="inputsearchTemp"
                                />

                                {this.state.CkEditorTemplateData !== null &&
                                  this.state.filtertemplateArr.map((item, i) => (
                                    <li key={i} value={item.templateID}>
                                      <span
                                        onClick={this.handleCkEditorTemplateData.bind(
                                          this,
                                          item.templateID,
                                          item.templateName,
                                          2
                                        )}
                                      >
                                        {item.templateName}
                                      </span>
                                    </li>
                                  ))}
                              </ul>
                            </div>
                          </div>
                        </div>

                        <textarea
                          value={this.state.instareviewbody}
                          onChange={(e) => {
                            this.handleInstaevent(e);
                          }}
                          className="w-100"
                          rows={7}
                        ></textarea>
                        <div className="d-flex justify-content-end mt-2">
                          <button
                            style={{ cursor: "pointer" }}
                            onClick={() => this.handleSubmitInstaReview()}
                            disabled={
                              this.state.instareviewbody?.length > 0
                                ? false
                                : true
                            }
                          >
                            {
                              this.state.reviewLoader ? <img src={loaderGif} style={{ width: "20px" }} /> : "Reply"
                            }
                          </button>
                        </div>
                      </div>
                    )
                      : (
                        <div className="myTicketEmail">
                          <Collapse isOpen={this.state.EmailCollapse}>
                            <a
                              href="#!"
                              className="kblink"
                              style={{ top: "5px" }}
                              onClick={this.HandleKbLinkModalOpen.bind(this)}
                            >
                              <img
                                src={KnowledgeLogo}
                                alt="KnowledgeLogo"
                                className="knoim"
                              />
                              KB
                            </a>
                            <div
                              className="dropdown collapbtn"
                              style={{ display: "inherit", top: "5px" }}
                            >
                              <button
                                className="dropdown-toggle my-tic-email"
                                type="button"
                                data-toggle="dropdown"
                                onClick={this.handleTemplateBindByIssueType.bind(
                                  this
                                )}
                              >
                                <FontAwesomeIcon icon={faCalculator} />{" "}
                                {TranslationContext !== undefined
                                  ? TranslationContext.p.template
                                  : "Template"}
                              </button>
                              <ul className="dropdown-menu templatedropdown">
                                <input
                                  type="text"
                                  placeholder="Search Template"
                                  onChange={(e) => this.handleTemplateSearch(e)}
                                  className="inputsearchTemp"
                                />

                                {this.state.CkEditorTemplateData !== null &&
                                  this.state.filtertemplateArr.map((item, i) => (
                                    <li key={i} value={item.templateID}>
                                      <span
                                        onClick={this.handleCkEditorTemplateData.bind(
                                          this,
                                          item.templateID,
                                          item.templateName,
                                          2
                                        )}
                                      >
                                        {item.templateName}
                                      </span>
                                    </li>
                                  ))}
                              </ul>
                            </div>
                            <div
                              className="tic-det-ck-user myticlist-expand-sect"
                              style={{ width: "170px" }}
                            >
                              <select
                                className="add-select-category"
                                value="0"
                                onChange={this.setAssignedToValue.bind(
                                  this,
                                  "rplyCmd"
                                )}
                              >
                                <option value="0">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.link.users
                                    : "Users"}
                                </option>
                                {this.state.AssignToData !== null &&
                                  this.state.AssignToData.map((item, i) => (
                                    <option key={i} value={item.userID}>
                                      {item.fullName}
                                    </option>
                                  ))}
                              </select>
                            </div>
                            <div className="tic-det-ck-user myticlist-expand-sect placeholder-dropdown">
                              <select
                                className="add-select-category"
                                value="0"
                                onChange={this.setPlaceholderValue.bind(this)}
                              >
                                <option value="0">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.link.placeholders
                                    : "Placeholders"}
                                </option>
                                {this.state.placeholderData !== null &&
                                  this.state.placeholderData.map((item, i) => (
                                    <option key={i} value={item.mailParameterID}>
                                      {item.description}
                                    </option>
                                  ))}
                              </select>
                            </div>
                            {this.state.ticketSourceId != "ChatBot" ? (
                              <Card>
                                <CardBody>
                                  <div className="my-tic-ck-height">
                                    <CKEditor
                                      data={
                                        // this.state.ticketSourceId == 2
                                        //   ? this.state.tempName.length > 0
                                        //     ? this.state.mailBodyData
                                        //     : (this.state.mailBodyData,
                                        //       this.state.ticketMailerFooter)
                                        //   : this.state.mailBodyData
                                        this.state.mailBodyData
                                      }
                                      onChange={this.onAddCKEditorChange}
                                      onBlur={this.onCkBlur}
                                      config={{
                                        toolbar: [
                                          {
                                            name: "basicstyles",
                                            items: ["Bold", "Italic", "Strike"],
                                          },
                                          {
                                            name: "styles",
                                            items: ["Styles", "Format"],
                                          },
                                          {
                                            name: "paragraph",
                                            items: [
                                              "NumberedList",
                                              "BulletedList",
                                            ],
                                          },
                                          {
                                            name: "links",
                                            items: ["Link", "Unlink"],
                                          },
                                          {
                                            name: "insert",
                                            items: ["Image", "Table"],
                                          },
                                          {
                                            name: "tools",
                                            items: ["Maximize"],
                                          },
                                          {
                                            name: "editing",
                                            items: ["Scayt"],
                                          },
                                        ],
                                      }}
                                    />
                                  </div>
                                  {/* {this.state.ticketSourceId == 2 ? (
                            this.state.CkEditorTemplateDetails.length >
                            0 ? null : (
                              <div
                                className="ckeditor-mail-footer"
                                onClick={this.handleViewSignature}
                              >
                             
                                View Signature
                              </div>
                            )
                          ) : null}

                          <Modal
                            open={this.state.isViewSignature}
                            onClose={this.handleCloseViewSignature}
                            center
                          >
                            <span
                              style={{
                                float: "right",
                                fontSize: "18px",
                                fontWeight: "bold",
                                cursor: "pointer",
                              }}
                              onClick={this.handleCloseViewSignature}
                            >
                              {" "}
                              X
                            </span>
                            {this.state.emailSignature}
                          </Modal> */}
                                </CardBody>

                                <div className="row colladrowa">
                                  <div className="col-md-12 colladrow">
                                    <ul className="ck-edit-mar">
                                      {window.localStorage.getItem(
                                        "Programcode"
                                      ) === "bloombay" ||
                                        window.localStorage.getItem(
                                          "Programcode"
                                        ) === "belgianwaffles" ? (
                                        <li>
                                          <label className="">
                                            <div className="input-group">
                                              <span className="input-group-addon inputcc">
                                                To:
                                              </span>
                                              <input
                                                type="text"
                                                className="CCdi"
                                                name="toEmailId"
                                                value={this.state.toEmailId}
                                                onChange={this.handleMailOnChange.bind(
                                                  this,
                                                  "toEmailId"
                                                )}
                                              />
                                            </div>
                                          </label>
                                        </li>
                                      ) : (
                                        <li>
                                          <label className="email-to-label">
                                            To: &nbsp;
                                            {ticketDetailsData.customerEmailId}
                                          </label>
                                        </li>
                                      )}
                                      <li>
                                        <label className="">
                                          <div className="input-group">
                                            <span className="input-group-addon inputcc">
                                              CC:
                                            </span>
                                            <input
                                              type="text"
                                              className="CCdi1"
                                              name="userCC"
                                              autoComplete="off"
                                              value={
                                                this.state.mailFiled.userCC !=
                                                  null
                                                  ? this.state.mailFiled.userCC
                                                  : ""
                                              }
                                              onChange={this.handleMailOnChange.bind(
                                                this,
                                                "userCC"
                                              )}
                                            />
                                            <span className="input-group-addon inputcc-one">
                                              {this.state.userCcCount < 1
                                                ? "+" + this.state.userCcCount
                                                : "+" + this.state.userCcCount}
                                            </span>
                                          </div>
                                        </label>
                                      </li>
                                      <li>
                                        <label className="">
                                          <div className="input-group">
                                            <span className="input-group-addon inputcc">
                                              BCC:
                                            </span>
                                            <input
                                              type="text"
                                              className="CCdi1"
                                              name="userBCC"
                                              autoComplete="off"
                                              value={this.state.mailFiled.userBCC}
                                              onChange={this.handleMailOnChange.bind(
                                                this,
                                                "userBCC"
                                              )}
                                            />
                                            <span className="input-group-addon inputcc-one">
                                              {this.state.userBccCount < 1
                                                ? "+" + this.state.userBccCount
                                                : "+" + this.state.userBccCount}
                                            </span>
                                          </div>
                                        </label>
                                      </li>
                                      <li>
                                        {/* {window.localStorage.getItem("Programcode") === "bloombay"
                                      || window.localStorage.getItem("Programcode") === 'belgianwaffles'
                                      ?} */}
                                        {/* <select
                                          style={{ width: "100%" }}
                                          className="CCdi"
                                          value={
                                            this.state.ticketDetailsData.sendEmailID
                                          }
                                          onChange={this.handleMailsenderID.bind(
                                            this
                                          )}
                                        >
                                          <option>Select Sender Mail ID</option>
                                          {this.state.emailIDData.length > 0
                                            ? this.state.emailIDData.map((item) => {
                                              return (
                                                <option value={item.emailSenderID}>
                                                  {item.emailSenderID}
                                                </option>
                                              );
                                            })
                                            : null}
                                        </select> */}
                                        {this.state.ticketDetailsData
                                          .toEmailId !== null ? (
                                          this.state.ticketDetailsData
                                            .toEmailId !== "" ? (
                                            <Popover
                                              placement="bottom"
                                              content={
                                                this.state.ticketDetailsData
                                                  .toEmailId
                                              }
                                            >
                                              <input
                                                type="text"
                                                className="CCdi1"
                                                name="senderEmailId"
                                                autoComplete="off"
                                                value={
                                                  this.state.ticketDetailsData
                                                    .toEmailId
                                                }
                                                disabled
                                              />
                                            </Popover>
                                          ) : (
                                            <select
                                              style={{ width: "100%" }}
                                              className="CCdi"
                                              value={
                                                this.state.ticketDetailsData
                                                  .sendEmailID
                                              }
                                              onChange={this.handleMailsenderID.bind(
                                                this
                                              )}
                                            >
                                              <option>
                                                Select Sender Mail ID
                                              </option>
                                              {this.state.emailIDData.length > 0
                                                ? this.state.emailIDData.map(
                                                  (item) => {
                                                    return (
                                                      <option
                                                        value={
                                                          item.emailSenderID
                                                        }
                                                      >
                                                        {item.emailSenderID}
                                                      </option>
                                                    );
                                                  }
                                                )
                                                : null}
                                            </select>
                                          )
                                        ) : (
                                          <select
                                            style={{ width: "100%" }}
                                            className="CCdi"
                                            value={
                                              this.state.ticketDetailsData
                                                .sendEmailID
                                            }
                                            onChange={this.handleMailsenderID.bind(
                                              this
                                            )}
                                          >
                                            <option>Select Sender Mail ID</option>
                                            {this.state.emailIDData.length > 0
                                              ? this.state.emailIDData.map(
                                                (item) => {
                                                  return (
                                                    <option
                                                      value={item.emailSenderID}
                                                    >
                                                      {item.emailSenderID}
                                                    </option>
                                                  );
                                                }
                                              )
                                              : null}
                                          </select>
                                        )}
                                      </li>
                                      <li>
                                        <div className="filter-checkbox">
                                          <input
                                            type="checkbox"
                                            id="fil-open"
                                            name="filter-type"
                                            style={{ display: "none" }}
                                            onChange={() =>
                                              this.showInformStoreFuncation()
                                            }
                                          />
                                          <label
                                            htmlFor="fil-open"
                                            style={{ paddingLeft: "25px" }}
                                          >
                                            <span>
                                              {TranslationContext !== undefined
                                                ? TranslationContext.span
                                                  .informstore
                                                : "Inform Store"}
                                            </span>
                                          </label>
                                        </div>
                                      </li>
                                      <li>
                                        <span>
                                          <input
                                            id="file-upload"
                                            className="file-upload1 d-none"
                                            type="file"
                                            name="file"
                                            onChange={this.handleFileUpload.bind(
                                              this
                                            )}
                                            multiple
                                          />
                                          <label
                                            htmlFor="file-upload"
                                            onDrop={this.fileDrop}
                                            onDragOver={this.fileDragOver}
                                            onDragEnter={this.fileDragEnter}
                                            style={{ marginRight: "0" }}
                                          >
                                            <img
                                              src={FileUpload}
                                              alt="file-upload"
                                              className="fileup"
                                            />
                                          </label>
                                        </span>
                                        <label
                                          style={{
                                            color: "#2561a8",
                                            cursor: "pointer",
                                          }}
                                          onClick={
                                            this.state.file.length > 0 &&
                                            this.handleThumbModalOpen.bind(this)
                                          }
                                        >
                                          {this.state.fileText}{" "}
                                          {TranslationContext !== undefined
                                            ? TranslationContext
                                              .ticketingDashboard.files
                                            : "files"}
                                        </label>
                                      </li>
                                      <li style={{ float: "right" }}>
                                        <button
                                          className="send1"
                                          type="button"
                                          onClick={this.handleSendMailData.bind(
                                            this,
                                            "Mails"
                                          )}
                                          disabled={
                                            this.state.isSendingEmail
                                              ? true
                                              : false
                                          }
                                          style={{
                                            background: this.state.isSendingEmail
                                              ? "#cccbcc"
                                              : "#2561a8",
                                            border: this.state.isSendingEmail
                                              ? "none"
                                              : "1px solid #2561a8",
                                            cursor: this.state.isSendingEmail
                                              ? "not-allowed"
                                              : "pointer",
                                          }}
                                        >
                                          {TranslationContext !== undefined ? (
                                            TranslationContext.button.send
                                          ) : this.state.isSendingEmail ? (
                                            <img
                                              src={loaderGif}
                                              alt="loading"
                                              style={{ width: "20px" }}
                                            />
                                          ) : (
                                            "Send"
                                          )}
                                        </button>
                                      </li>
                                      <li
                                        style={{
                                          float: "right",
                                          marginRight: "3px",
                                        }}
                                      >
                                        {/* <button
                                  className="send1"
                                  type="button"
                                  // onClick={this.handleSendMailData.bind(
                                  //   this,
                                  //   2
                                  // )}




                                  // disabled={
                                  //   this.state.isSendingAllEmail ? true : false
                                  // }
                                  // style={{
                                  //   background: this.state.isSendingAllEmail
                                  //     ? "#cccbcc"
                                  //     : "#2561a8",
                                  //   border: this.state.isSendingAllEmail
                                  //     ? "none"
                                  //     : "1px solid #2561a8",
                                  //   cursor: this.state.isSendingAllEmail
                                  //     ? "not-allowed"
                                  //     : "pointer",
                                  // }}
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.button.send
                                    : //  this.state.isSendingAllEmail ? (
                                      //   <img
                                      //     src={loaderGif}
                                      //     alt="loading"
                                      //     style={{ width: "20px" }}
                                      //   />
                                      // ) :
                                      // this.state.isReplyAllClicked
                                      // ? "Remove CC"
                                      // :
                                      "Reply All"}
                                </button> */}
                                      </li>
                                    </ul>
                                  </div>
                                </div>
                              </Card>
                            ) : (
                              <div
                                style={{
                                  pointerEvents:
                                    this.state.IsTktWithinSession === false
                                      ? "none"
                                      : "all",
                                }}
                              >
                                <CKEditor
                                  data={this.state.mailBodyData}
                                  onChange={this.onAddCKEditorChange}
                                  config={{
                                    height: 170,
                                    resize_enabled: false,
                                    removePlugins: "elementspath",
                                    toolbar: [
                                      {
                                        name: "basicstyles",
                                        items: [
                                          "Bold",
                                          "-",
                                          "Italic",
                                          "-",
                                          "Strike",
                                          "-",
                                        ],
                                      },
                                      {
                                        name: "links",
                                        items: ["Link", "Unlink"],
                                      },
                                    ],
                                  }}
                                />
                              </div>
                            )}
                            {this.state.ticketSourceId == "ChatBot" ? (
                              <div
                                className="mobile-ck-attachment-tktPage"
                                title={"Attachment"}
                              // style={{top:"100px", right:"55px"}}
                              >
                                <span>
                                  <input
                                    id="file-upload"
                                    className="file-upload1 d-none"
                                    type="file"
                                    name="file"
                                    onChange={this.handleFileUpload.bind(this)}
                                    multiple
                                  />
                                  <label
                                    htmlFor="file-upload"
                                    onDrop={this.fileDrop}
                                    onDragOver={this.fileDragOver}
                                    onDragEnter={this.fileDragEnter}
                                  >
                                    <img
                                      src={FileUpload}
                                      alt="file-upload"
                                      className="fileup"
                                      style={{ height: "17px" }}
                                    />
                                  </label>
                                </span>
                              </div>
                            ) : null}
                            {this.state.ticketSourceId == "ChatBot" ? (
                              <div
                                className="mobile-ck-send-btn"
                                style={{ marginLeft: "1%" }}
                                onClick={this.handleSendMailData.bind(
                                  this,
                                  "ChatBot"
                                )}
                                title={"Send"}
                              >
                                <img src={Assign} alt="send img" />
                              </div>
                            ) : null}
                          </Collapse>
                        </div>
                      )}

                    <div>
                      <Modal
                        open={this.state.KbLink}
                        onClose={this.HandleKbLinkModalClose.bind(this)}
                        modalId="KbLink-popup"
                        overlayId="logout-ovrlykb"
                      >
                        <div className="row" style={{ margin: "0" }}>
                          <div className="col-md-7" style={{ padding: "0" }}>
                            <div className="knokb">
                              <h5>
                                <img
                                  src={KnowledgeLogo}
                                  alt="KnowledgeLogo"
                                  className="knoim1"
                                />
                                {TranslationContext !== undefined
                                  ? TranslationContext.ticketingDashboard
                                    .knowlegebase
                                  : "KNOWLEGE BASE"}
                              </h5>
                              <p>
                                {TranslationContext !== undefined
                                  ? TranslationContext.title.message
                                  : "Message"}
                              </p>

                              <div id="kb-accordion">
                                {this.state.KbPopupData !== null &&
                                  this.state.KbPopupData.map((item, i) => (
                                    <div key={i} className="kb-acc-cntr">
                                      <p
                                        className="table-details-data-modal"
                                        data-toggle="collapse"
                                        data-target={"#collapse" + i}
                                        aria-expanded={
                                          i === 0 ? "true" : "false"
                                        }
                                        aria-controls={"collapse" + i}
                                        onClick={() =>
                                          this.setState({ copied: false })
                                        }
                                      >
                                        {item.subject}
                                      </p>
                                      <div
                                        id={"collapse" + i}
                                        className={
                                          i === 0 ? "collapse show" : "collapse"
                                        }
                                        data-parent="#kb-accordion"
                                      >
                                        <p className="mb-0">
                                          {item.description}
                                        </p>
                                        <CopyToClipboard
                                          text={item.description}
                                          onCopy={() =>
                                            this.setState({ copied: true })
                                          }
                                        >
                                          <a
                                            href="#!"
                                            className="copyblue-kbtext"
                                          >
                                            <img
                                              src={CopyBlue}
                                              alt=""
                                              className="copyblue-kb"
                                            />
                                            {TranslationContext !== undefined
                                              ? TranslationContext.a.copy
                                              : "Copy"}
                                          </a>
                                        </CopyToClipboard>
                                        {this.state.copied ? (
                                          <span
                                            className="ml-2"
                                            style={{ color: "red" }}
                                          >
                                            {TranslationContext !== undefined
                                              ? TranslationContext.span.copied
                                              : "Copied."}
                                          </span>
                                        ) : null}
                                      </div>
                                    </div>
                                  ))}
                              </div>
                            </div>
                          </div>
                          <div className="col-md-5 kblinkright">
                            <div className="knokb-a">
                              <img
                                src={CancelImg}
                                alt="cancelImg"
                                className="cancalImg-kb"
                                onClick={this.HandleKbLinkModalClose.bind(this)}
                              />
                              <h5>
                                {TranslationContext !== undefined
                                  ? TranslationContext.h5.kbtemplate
                                  : "KB TEMPLATE"}
                              </h5>
                              <div className="form-group">
                                <select
                                  value={this.state.selectedCategoryKB}
                                  onChange={this.setCategoryValueKB}
                                  className="kblinkrectangle-9 select-category-placeholderkblink"
                                >
                                  <option>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.category
                                      : "Category"}
                                  </option>
                                  {this.state.CategoryData !== null &&
                                    this.state.CategoryData.map((item, i) => (
                                      <option key={i} value={item.categoryID}>
                                        {item.categoryName}
                                      </option>
                                    ))}
                                </select>
                              </div>
                              <div className="form-group">
                                <select
                                  value={this.state.selectedSubCategoryKB}
                                  onChange={this.setSubCategoryValueKB}
                                  className="kblinkrectangle-9 select-category-placeholderkblink"
                                >
                                  <option>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.subcategory
                                      : "Sub Category"}
                                  </option>
                                  {this.state.SubCategoryData !== null &&
                                    this.state.SubCategoryData.map(
                                      (item, i) => (
                                        <option
                                          key={i}
                                          value={item.subCategoryID}
                                        >
                                          {item.subCategoryName}
                                        </option>
                                      )
                                    )}
                                </select>
                              </div>
                              <div className="form-group">
                                <select
                                  value={this.state.selectedIssueTypeKB}
                                  onChange={this.setIssueTypeValueKB}
                                  className="kblinkrectangle-9 select-category-placeholderkblink"
                                >
                                  <option>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.span.type
                                      : "Type"}
                                  </option>
                                  {this.state.IssueTypeData !== null &&
                                    this.state.IssueTypeData.map((item, i) => (
                                      <option key={i} value={item.issueTypeID}>
                                        {item.issueTypeName}
                                      </option>
                                    ))}
                                </select>
                              </div>
                              <div>
                                <button
                                  onClick={this.handleKbLinkPopupSearch}
                                  className="kblink-search"
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.small.search
                                    : "SEARCH"}
                                </button>
                              </div>
                              <div style={{ marginTop: "275px" }}>
                                <a
                                  href="#!"
                                  className="copyblue-kbtext d-inline-block"
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.button.viewpolicy
                                    : "VIEW POLICY"}
                                  <img
                                    src={ViewBlue}
                                    alt="viewpolicy"
                                    className="viewpolicy-kb"
                                  />
                                </a>
                              </div>
                            </div>
                          </div>
                        </div>
                      </Modal>
                    </div>

                    <Modal
                      open={this.state.hasAttachmentModal}
                      onClose={this.handleHasAttachmetModalClose.bind(this)}
                      modalId="thumb-modal-popup"
                      overlayId="logout-ovrlykb"
                    >
                      <div>
                        <div className="close">
                          <img
                            src={CrossIcon}
                            alt="cross-icon"
                            onClick={this.handleHasAttachmetModalClose.bind(
                              this
                            )}
                          />
                        </div>
                        <div className="row my-3 mx-1">
                          {this.state.FinalAttachmentData !== null &&
                            this.state.FinalAttachmentData.map((item, k) => {
                              return (
                                <div style={{ position: "relative" }} key={k}>
                                  {/* <div>
                                  <img
                                    src={CircleCancel}
                                    alt="thumb"
                                    className="circleCancle"
                                    onClick={() => {
                                      this.handleRemoveImage(k);
                                    }}
                                  />
                                </div> */}

                                  <div>
                                    <img
                                      src={
                                        item.Type === "docx"
                                          ? require("./../assets/Images/word.png")
                                          : item.Type === "doc"
                                            ? require("./../assets/Images/word.png")
                                            : item.Type === "xlsx"
                                              ? require("./../assets/Images/excel.png")
                                              : item.Type === "xls"
                                                ? require("./../assets/Images/excel.png")
                                                : item.Type === "csv"
                                                  ? require("./../assets/Images/excel.png")
                                                  : item.Type === "pdf"
                                                    ? require("./../assets/Images/pdf.png")
                                                    : item.Type === "txt"
                                                      ? require("./../assets/Images/TxtIcon.png")
                                                      : item.Type === "pptm"
                                                        ? require("./../assets/Images/ppt.png")
                                                        : item.Type === "ppt"
                                                          ? require("./../assets/Images/ppt.png")
                                                          : item.Type === "pptx"
                                                            ? require("./../assets/Images/ppt.png")
                                                            : item.Type === "zip"
                                                              ? require("./../assets/Images/zip.png")
                                                              : item.Type === "7z"
                                                                ? require("./../assets/Images/zip.png")
                                                                : item.Type === "js"
                                                                  ? require("./../assets/Images/js.png")
                                                                  : item.Type === "html"
                                                                    ? require("./../assets/Images/html.png")
                                                                    : item.Type === "avi"
                                                                      ? require("./../assets/Images/video.png")
                                                                      : item.Type === "mp4"
                                                                        ? require("./../assets/Images/video.png")
                                                                        : item.Type === "mpeg"
                                                                          ? require("./../assets/Images/video.png")
                                                                          : item.name
                                      }
                                      title={item.name}
                                      alt={
                                        item.name.length > 5
                                          ? item.name
                                            .split("/")
                                            .pop()
                                            .substring(0, 5) + "..."
                                          : item.name
                                      }
                                      className="thumbtick"
                                      onClick={() => {
                                        window.open(item.name);
                                      }}
                                    />
                                  </div>
                                </div>
                              );
                            })}
                        </div>
                      </div>
                    </Modal>
                    <div className="edit-storeTask-header newtab">
                      <div className="tab-content">
                        <div className="store-header-task">
                          <ul className="nav alert-nav-tabs3" role="tablist">
                            <li className="nav-item fo">
                              <a
                                className="nav-link active"
                                data-toggle="tab"
                                href="#Message-tab"
                                role="tab"
                                aria-controls="Message-tab"
                                aria-selected="true"
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.title.message
                                  : "Message"}{" "}
                                :{" "}
                                {this.state.tabCounts.messages < 9
                                  ? "0" + this.state.tabCounts.messages
                                  : this.state.tabCounts.messages}
                                {/* {this.state.ticketFields.length > 0
                                ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Message".toLowerCase()
                                  ).length > 0
                                  ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Message".toLowerCase()
                                    )[0].createPage
                                    ? TranslationContext !== undefined
                                      ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Message".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                      : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Message".toLowerCase()
                                        )[0].displayEnglishName || "Message"
                                    : "Message"
                                  : "Message"
                                : "Message"} */}
                              </a>
                            </li>
                            <li className="nav-item fo">
                              <a
                                className="nav-link"
                                data-toggle="tab"
                                href="#Notes-tab"
                                role="tab"
                                aria-controls="Notes-tab"
                                aria-selected="false"
                                name="Notes"
                                onClick={this.handleGetTabsName}
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.a.notes
                                  : "Notes"}{" "}
                                :{" "}
                                {this.state.Notesdetails.length < 9
                                  ? "0" + this.state.Notesdetails.length
                                  : this.state.Notesdetails.length}
                                {/* {this.state.ticketFields.length > 0
                                ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Notes".toLowerCase()
                                  ).length > 0
                                  ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Notes".toLowerCase()
                                    )[0].createPage
                                    ? TranslationContext !== undefined
                                      ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Notes".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                      : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Notes".toLowerCase()
                                        )[0].displayEnglishName || "Notes"
                                    : "Notes"
                                  : "Notes"
                                : "Notes"} */}
                              </a>
                            </li>
                            <li className="nav-item fo">
                              <a
                                className="nav-link"
                                data-toggle="tab"
                                href="#Task-tab"
                                role="tab"
                                aria-controls="Task-tab"
                                aria-selected="false"
                                name="Task"
                                onClick={this.handleGetTabsName}
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.span.task
                                  : "Task"}{" "}
                                :{" "}
                                {this.state.tabCounts.task < 9
                                  ? "0" + this.state.tabCounts.task
                                  : this.state.tabCounts.task}
                                {/* {this.state.ticketFields.length > 0
                                ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Task".toLowerCase()
                                  ).length > 0
                                  ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Task".toLowerCase()
                                    )[0].createPage
                                    ? TranslationContext !== undefined
                                      ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Task".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                      : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Task".toLowerCase()
                                        )[0].displayEnglishName || "Task"
                                    : "Task"
                                  : "Task"
                                : "Task"} */}
                              </a>
                            </li>
                            <li className="nav-item fo">
                              <a
                                className="nav-link"
                                data-toggle="tab"
                                href="#Claim-tab"
                                role="tab"
                                aria-controls="Claim-tab"
                                aria-selected="false"
                                name="Claim"
                                onClick={this.handleGetTabsName}
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.claim
                                  : "Claim"}{" "}
                                :{" "}
                                {this.state.tabCounts.claim < 9
                                  ? "0" + this.state.tabCounts.claim
                                  : this.state.tabCounts.claim}
                                {/* {this.state.ticketFields.length > 0
                                ? this.state.ticketFields.filter(
                                    (x) =>
                                      x.fieldName.toLowerCase() ===
                                      "Claim".toLowerCase()
                                  ).length > 0
                                  ? this.state.ticketFields.filter(
                                      (x) =>
                                        x.fieldName.toLowerCase() ===
                                        "Claim".toLowerCase()
                                    )[0].createPage
                                    ? TranslationContext !== undefined
                                      ? this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Claim".toLowerCase()
                                        )[0].displayHindiName ||
                                        TranslationContext.label
                                          .channelofpurchase
                                      : this.state.ticketFields.filter(
                                          (x) =>
                                            x.fieldName.toLowerCase() ===
                                            "Claim".toLowerCase()
                                        )[0].displayEnglishName || "Claim"
                                    : "Claim"
                                  : "Claim"
                                : "Claim"} */}
                              </a>
                            </li>
                            {this.state.displayTicketFields["Appointment"] && (
                              <li className="nav-item fo">
                                <a
                                  className="nav-link"
                                  data-toggle="tab"
                                  href="#Appointment-tab"
                                  role="tab"
                                  aria-controls="Appointment-tab"
                                  aria-selected="false"
                                  name="Appointment"
                                  onClick={this.handleGetTabsName}
                                >
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.appointment
                                    : "Appointment"}{" "}
                                  :{" "}
                                  {this.state.tabCounts.appointment < 9
                                    ? "0" + this.state.tabCounts.appointment
                                    : this.state.tabCounts.appointment}
                                </a>
                              </li>
                            )}
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="tab-content p-0">
                      <div
                        className="tab-pane fade"
                        id="Claim-tab"
                        role="tabpanel"
                        aria-labelledby="Claim-tab"
                      >
                        {this.state.ticket_Id > 0 ? (
                          <MyTicketClaim
                            claimData={{
                              claimDeatils: {
                                ticketId: this.state.ticket_Id,
                                claimTabId: this.state.ClaimTab,
                              },
                            }}
                          />
                        ) : (
                          ""
                        )}
                      </div>
                      <div
                        className="tab-pane fade"
                        id="Appointment-tab"
                        role="tabpanel"
                        aria-labelledby="Appointment-tab"
                      >
                        <div className="table-cntr mt-3 MyTicketClaimReact">
                          <ReactTable
                            columns={[
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.id
                                      : "ID"}
                                  </span>
                                ),
                                accessor: "appointment_ID",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.name
                                      : "Name"}
                                  </span>
                                ),
                                accessor: "appointment_Name",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.ticketingDashboard
                                        .emailid
                                      : "Email ID"}
                                  </span>
                                ),
                                accessor: "appointment_Email",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.span.mobileno
                                      : "Mobile No"}
                                  </span>
                                ),
                                accessor: "appointment_MobileNo",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.span.state
                                      : "State"}
                                  </span>
                                ),
                                accessor: "appointment_State_Id",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.span.city
                                      : "City"}
                                  </span>
                                ),
                                accessor: "appointment_City_Id",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label
                                        .branchlocationsitestore
                                      : "Branch / Location / Site / Store"}
                                  </span>
                                ),
                                accessor: "appointment_Location_Id",
                                minWidth: 250,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label
                                        .specialityservice
                                      : "Speciality / Service"}
                                  </span>
                                ),
                                accessor: "appointment_Service_Id",
                                minWidth: 200,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.assignedto
                                      : "Assigned To"}
                                  </span>
                                ),
                                accessor: "appointment_Assigned_To",
                                minWidth: 120,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.appointmenttype
                                      : "Appointment Type"}
                                  </span>
                                ),
                                accessor: "appointment_Type",
                                minWidth: 150,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.date
                                      : "Date"}
                                  </span>
                                ),
                                accessor: "appointment_Date",
                                minWidth: 120,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.time
                                      : "Time"}
                                  </span>
                                ),
                                accessor: "appointment_time",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.time
                                      : "Paid Flag"}
                                  </span>
                                ),
                                accessor: "appointment_Paid_Flag",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.time
                                      : "Fee"}
                                  </span>
                                ),
                                accessor: "appointment_Fee",
                              },

                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.slot
                                      : "Slot"}
                                  </span>
                                ),
                                accessor: "appointment_Slot",
                                Cell: (row) => {
                                  return (
                                    <span>
                                      {moment(
                                        row.original.appointment_Slot
                                      ).format("YYYY-MM-DD")}
                                    </span>
                                  );
                                },
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.Remark
                                      : "Remarks"}
                                  </span>
                                ),
                                accessor: "appointment_Remark",
                              },
                            ]}
                            // resizable={false}
                            minRows={2}
                            defaultPageSize={5}
                            showPagination={true}
                            data={appointmentList}
                          />
                        </div>
                      </div>

                      <div
                        className="tab-pane fade show active"
                        id="Message-tab"
                        role="tabpanel"
                        aria-labelledby="Message-tab"
                        style={{ margin: "10px 0 30px" }}
                      >
                        <div className="row message-header">
                          <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-2 col-xs-22 col-sm-2" : "col-3 col-xs-22 col-sm-3"}>
                            <label className="user-label">
                              {TranslationContext !== undefined
                                ? TranslationContext.label.user
                                : "User"}
                            </label>
                          </div>
                          {this.state.displayTicketFields["Sentiment"] &&
                            <div className="col-2 col-xs-22 col-sm-2">
                              <label className="user-label">
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.user
                                  : "Sentiment"}
                              </label>
                            </div>
                          }
                          {this.state.displayTicketFields["Emotion"] &&
                            <div className="col-2 col-xs-2 col-sm-2">
                              <label className="user-label">
                                {TranslationContext !== undefined
                                  ? TranslationContext.label.user
                                  : "Emotion"}
                              </label>
                            </div>
                          }
                          <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-4 col-xs-4 col-sm-4" : "col-6 col-xs-4 col-sm-6"}>
                            <label className="message-label">
                              {TranslationContext !== undefined
                                ? TranslationContext.title.message
                                : "Message"}
                            </label>
                          </div>
                          <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-2 col-xs-2 col-sm-2" : "col-3 col-xs-2 col-sm-3"}>
                            <label className="action-label">
                              {TranslationContext !== undefined
                                ? TranslationContext.p.action
                                : "Action"}
                            </label>
                          </div>
                        </div>
                        <div className="col-12 col-xs-12 col-sm-2 col-md-12 mob-flex">
                          <div
                            className={
                              this.state.isKB
                                ? "inlineGridTicket iskbticket"
                                : "inlineGridTicket"
                            }
                          >
                            <a
                              href="#!"
                              className="comment-text"
                              onClick={this.handleFreeTextCommentOpen.bind(
                                this
                              )}
                            >
                              {TranslationContext !== undefined
                                ? TranslationContext.p.comment
                                : "Comment"}
                            </a>
                          </div>
                        </div>
                        {this.state.messageDetails !== null &&
                          this.state.messageDetails.map((item, i) => {
                            return (
                              <div key={i}>
                                <div className="row top-margin">
                                  <div className="col-md-5">
                                    <div className="v3"></div>
                                  </div>
                                  <div className="col-md-2">
                                    <label className="today-02">
                                      {item.dayOfCreation}
                                      &nbsp; (
                                      {item.messageCount < 9
                                        ? "0" + item.messageCount
                                        : item.messageCount}
                                      )
                                    </label>
                                  </div>
                                  <div className="col-md-5">
                                    <div className="v4"></div>
                                  </div>
                                </div>
                                {item.msgDetails !== null &&
                                  item.msgDetails.map((details, j) => {
                                    return (
                                      <div key={j}>
                                        <div>
                                          <div className="row top-margin">
                                            <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-12 col-xs-12 col-sm-4 col-md-2" : "col-12 col-xs-12 col-sm-4 col-md-3"}>
                                              <div
                                                className="d-flex"
                                                style={{ marginTop: "0" }}
                                              >
                                                {details.latestMessageDetails
                                                  .isSystemGenerated ===
                                                  true ? (
                                                  <img
                                                    src={BlackUserIcon}
                                                    alt="Avatar"
                                                    className="oval-7"
                                                  />
                                                ) : (
                                                  <>
                                                    {details
                                                      .latestMessageDetails
                                                      .isMailMessage ? (
                                                      details
                                                        .latestMessageDetails
                                                        .isCustomerComment ===
                                                        1 ? (
                                                        <img
                                                          src={BlackUserIcon}
                                                          alt="Avatar"
                                                          className="oval-6"
                                                        />
                                                      ) : (
                                                        <img
                                                          src={Headphone2Img}
                                                          alt="headphone"
                                                          className="oval-55"
                                                        />
                                                      )
                                                    ) : details
                                                      .latestMessageDetails
                                                      .commentAddedBy == 1 ? (
                                                      <img
                                                        src={BlackUserIcon}
                                                        alt="Avatar"
                                                        className="oval-6"
                                                      />
                                                    ) : (
                                                      <img
                                                        src={Headphone2Img}
                                                        alt="headphone"
                                                        className="oval-55"
                                                      />
                                                    )}
                                                  </>
                                                )}

                                                <div>
                                                  <label
                                                    className="solved-by-naman-r mt-0"
                                                    style={{
                                                      marginLeft: "7px",
                                                    }}
                                                  >
                                                    {details
                                                      .latestMessageDetails
                                                      .isMailMessage
                                                      ? details
                                                        .latestMessageDetails
                                                        .commentBy
                                                      : details
                                                        .latestMessageDetails
                                                        .commentAddedBy == "0"
                                                        ? details
                                                          .latestMessageDetails
                                                          .commentBy
                                                        : "Customer"}
                                                  </label>
                                                  {details.latestMessageDetails
                                                    .isReAssign === true ? (
                                                    <label
                                                      style={{
                                                        display: "block",
                                                        marginLeft: "7px",
                                                      }}
                                                    >
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext
                                                          .label.reassignto
                                                        : "Reassign to"}
                                                      &nbsp;
                                                      <span className="solved-by-naman-r">
                                                        {
                                                          details
                                                            .latestMessageDetails
                                                            .newAgentName
                                                        }
                                                      </span>
                                                    </label>
                                                  ) : null}
                                                </div>
                                                {details.latestMessageDetails
                                                  .isMailMessage ? (
                                                  <>
                                                    {details
                                                      .latestMessageDetails
                                                      .IsInternalComment ===
                                                      true ? null : (
                                                      <img
                                                        src={
                                                          details
                                                            .latestMessageDetails
                                                            .ticketSourceName ===
                                                            "Calls"
                                                            ? require("./../assets/Images/headphone3.png")
                                                            : details
                                                              .latestMessageDetails
                                                              .ticketSourceName ===
                                                              "Facebook"
                                                              ? require("./../assets/Images/facebook.png")
                                                              : details
                                                                .latestMessageDetails
                                                                .ticketSourceName ===
                                                                "Mails"
                                                                ? require("./../assets/Images/SecuredLetter2.png")
                                                                : details
                                                                  .latestMessageDetails
                                                                  .ticketSourceName ===
                                                                  "ChatBot"
                                                                  ? require("./../assets/Images/WhatsappImg.png")
                                                                  : details
                                                                    .latestMessageDetails
                                                                    .ticketSourceName ===
                                                                    "Twitter"
                                                                    ? require("./../assets/Images/twitter.png")
                                                                    : require("./../assets/Images/twitter.png")
                                                        }
                                                        alt="sourceIMG"
                                                        className="smg-Img1 headPhone3 black-twitter"
                                                      />
                                                    )}
                                                    {details
                                                      .latestMessageDetails
                                                      .isSystemGenerated ===
                                                      true ? (
                                                      <img
                                                        src={
                                                          details
                                                            .latestMessageDetails
                                                            .ticketSourceName ===
                                                            "Calls"
                                                            ? require("./../assets/Images/headphone3.png")
                                                            : details
                                                              .latestMessageDetails
                                                              .ticketSourceName ===
                                                              "Facebook"
                                                              ? require("./../assets/Images/facebook.png")
                                                              : details
                                                                .latestMessageDetails
                                                                .ticketSourceName ===
                                                                "Mails"
                                                                ? require("./../assets/Images/SecuredLetter2.png")
                                                                : details
                                                                  .latestMessageDetails
                                                                  .ticketSourceName ===
                                                                  "ChatBot"
                                                                  ? require("./../assets/Images/WhatsappImg.png")
                                                                  : details
                                                                    .latestMessageDetails
                                                                    .ticketSourceName ===
                                                                    "Twitter"
                                                                    ? require("./../assets/Images/twitter.png")
                                                                    : require("./../assets/Images/twitter.png")
                                                        }
                                                        alt="sourceIMG"
                                                        className="smg-Img1 headPhone3 black-twitter"
                                                      />
                                                    ) : null}
                                                  </>
                                                ) : (
                                                  <img
                                                    src={require("./../assets/Images/chat.png")}
                                                    alt="sourceIMG"
                                                    className="smg-Img1 headPhone3 black-twitter"
                                                  />
                                                )}
                                              </div>
                                            </div>
                                            {this.state.displayTicketFields["Sentiment"] &&

                                              <div className="col-12 col-xs-12 col-sm-4 col-md-2">
                                                <b>
                                                  {
                                                    details.latestMessageDetails.sentimentName
                                                  }
                                                </b>

                                              </div>
                                            }
                                            {this.state.displayTicketFields["Emotion"] &&
                                              <div className="col-12 col-xs-12 col-sm-4 col-md-2">
                                                <b>
                                                  {
                                                    details.latestMessageDetails.emotionName
                                                  }
                                                </b>


                                              </div>
                                            }
                                            <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-12 col-xs-12 col-sm-6 col-md-4" : "col-12 col-xs-12 col-sm-6 col-md-6"}>
                                              {details.latestMessageDetails
                                                .isSystemGenerated ===
                                                true ? null : (
                                                <>
                                                  {details.latestMessageDetails
                                                    .IsInternalComment ===
                                                    true ? (
                                                    <img
                                                      src={commentImg}
                                                      alt="comment"
                                                      className="commentImg"
                                                      style={{
                                                        display: "inline-block",
                                                      }}
                                                    />
                                                  ) : null}
                                                </>
                                              )}

                                              {/* --------------Show Attchement Icone on condition--------------- */}
                                              {details.latestMessageDetails
                                                .messageAttachments.length >
                                                0 ? (
                                                <img
                                                  src={ClipImg}
                                                  alt="attechment"
                                                  className="fileAttchImg"
                                                  onClick={this.handleHasAttachmetModalOpen.bind(
                                                    this,
                                                    details.latestMessageDetails
                                                      .mailID
                                                  )}
                                                />
                                              ) : null}
                                              {/* ----------------------------- */}
                                              {details.latestMessageDetails
                                                .isMailMessage ? (
                                                !details.latestMessageDetails
                                                  .IsInternalComment && (
                                                  <>
                                                    {" "}
                                                    <p
                                                      className={
                                                        details
                                                          .latestMessageDetails
                                                          .ticketSourceID !=
                                                          "ChatBot"
                                                          ? "mail-trail-info-heading"
                                                          : "mail-trail-info-headingN"
                                                      }
                                                    >
                                                      From:{" "}
                                                      <span>
                                                        {
                                                          details
                                                            .latestMessageDetails
                                                            .fromEmailID
                                                        }
                                                      </span>
                                                    </p>
                                                    <p
                                                      className={
                                                        details
                                                          .latestMessageDetails
                                                          .ticketSourceID !=
                                                          "ChatBot"
                                                          ? "mail-trail-info-heading"
                                                          : "mail-trail-info-headingN"
                                                      }
                                                    >
                                                      To:{" "}
                                                      <span>
                                                        {" "}
                                                        {
                                                          details
                                                            .latestMessageDetails
                                                            .toEmail
                                                        }
                                                      </span>
                                                    </p>
                                                    <p
                                                      className={
                                                        details
                                                          .latestMessageDetails
                                                          .ticketSourceID !=
                                                          "ChatBot"
                                                          ? "mail-trail-info-heading"
                                                          : "mail-trail-info-headingN"
                                                      }
                                                    >
                                                      Subject:{" "}
                                                      <span>
                                                        {
                                                          details
                                                            .latestMessageDetails
                                                            .ticketMailSubject
                                                        }
                                                      </span>
                                                    </p>
                                                    <p className="mail-trail-info-heading">
                                                      <span>
                                                        {
                                                          details
                                                            .latestMessageDetails
                                                            .createdDate
                                                        }
                                                      </span>
                                                    </p>
                                                    {details
                                                      .latestMessageDetails
                                                      .userCC !== "" ? (
                                                      <p
                                                        className={
                                                          details
                                                            .latestMessageDetails
                                                            .ticketSourceID !=
                                                            "ChatBot"
                                                            ? "mail-trail-info-heading"
                                                            : "mail-trail-info-headingN"
                                                        }
                                                      >
                                                        CC:{" "}
                                                        <span>
                                                          {
                                                            details
                                                              .latestMessageDetails
                                                              .userCC
                                                          }
                                                        </span>
                                                      </p>
                                                    ) : null}
                                                    {details
                                                      .latestMessageDetails
                                                      .userBCC !== "" ? (
                                                      <p
                                                        className={
                                                          details
                                                            .latestMessageDetails
                                                            .ticketSourceID !=
                                                            "ChatBot"
                                                            ? "mail-trail-info-heading"
                                                            : "mail-trail-info-headingN"
                                                        }
                                                      >
                                                        BCC:{" "}
                                                        <span>
                                                          {
                                                            details
                                                              .latestMessageDetails
                                                              .userBCC
                                                          }
                                                        </span>
                                                      </p>
                                                    ) : null}
                                                    {/* <p>BCC:</p> */}
                                                  </>
                                                )
                                              ) : (
                                                <p className="mail-trail-info-heading">
                                                  Comment Date and Time:{" "}
                                                  <span>
                                                    {
                                                      details
                                                        .latestMessageDetails
                                                        .commentDatetime
                                                    }
                                                  </span>
                                                </p>
                                              )}

                                              <p
                                                className="label-5"
                                                style={{
                                                  display: "inline-block",
                                                  color: "#000",
                                                }}
                                              >
                                                {details.latestMessageDetails
                                                  .isMailMessage
                                                  ? ReactHtmlParser(
                                                    details.latestMessageDetails.ticketMailBody.replace(
                                                      /(?:\r\n)/g,
                                                      "<br>"
                                                    )
                                                  )
                                                  : details.latestMessageDetails
                                                    .comment}
                                              </p>
                                            </div>

                                            <div className={this.state.displayTicketFields["Sentiment"] && this.state.displayTicketFields["Emotion"] ? "col-12 col-xs-12 col-sm-2 col-md-2 mob-flex" : "col-12 col-xs-12 col-sm-2 col-md-3 mob-flex"}>
                                              {details.trailMessageDetails
                                                .length === 0 ? null : (
                                                <div>
                                                  {this.state.collapseUp &&
                                                    "i" +
                                                    details.latestMessageDetails
                                                      .mailID ===
                                                    this.state.collapseId ? (
                                                    <img
                                                      src={Up1Img}
                                                      alt="up"
                                                      className="up-1"
                                                      onClick={this.handleUpClose.bind(
                                                        this,
                                                        "i" +
                                                        details
                                                          .latestMessageDetails
                                                          .mailID
                                                      )}
                                                      id={
                                                        "i" +
                                                        details
                                                          .latestMessageDetails
                                                          .mailID
                                                      }
                                                    />
                                                  ) : (
                                                    <img
                                                      src={Down1Img}
                                                      alt="up"
                                                      className="up-1"
                                                      onClick={this.handleUpOpen.bind(
                                                        this,
                                                        "i" +
                                                        details
                                                          .latestMessageDetails
                                                          .mailID
                                                      )}
                                                      id={
                                                        "i" +
                                                        details
                                                          .latestMessageDetails
                                                          .mailID
                                                      }
                                                    />
                                                  )}
                                                </div>
                                              )}

                                              <div
                                                className={
                                                  this.state.isKB
                                                    ? "inlineGridTicket iskbticket"
                                                    : "inlineGridTicket"
                                                }
                                              >
                                                {/* {details.latestMessageDetails
                                                .isCustomerComment === 1 ? ( */}

                                                {details.latestMessageDetails
                                                  .isMailMessage && (
                                                    <a
                                                      href="#!"
                                                      className="reply-comment"
                                                      // onClick={this.hanldeCommentOpen2.bind(
                                                      //   this,
                                                      //   details.latestMessageDetails
                                                      //     .mailID
                                                      // )}
                                                      onClick={this.hanldeCommentOpen3.bind(
                                                        this,
                                                        details.latestMessageDetails,
                                                        "reply"
                                                      )}
                                                    >
                                                      {TranslationContext !==
                                                        undefined
                                                        ? TranslationContext.a
                                                          .reply
                                                        : "Reply"}
                                                    </a>
                                                  )}

                                                {/* ) : null} */}

                                                <a
                                                  href="#!"
                                                  className="comment-text"
                                                  onClick={this.handleCommentCollapseOpen.bind(
                                                    this,
                                                    details.latestMessageDetails
                                                      .mailID
                                                  )}
                                                >
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.p
                                                      .comment
                                                    : "Comment"}
                                                </a>
                                                <a
                                                  href="#!"
                                                  className="comment-text"
                                                  onClick={this.hanldeCommentOpen3.bind(
                                                    this,
                                                    details.latestMessageDetails,
                                                    "forward"
                                                  )}
                                                >
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.f
                                                      .forward
                                                    : "Forward"}
                                                </a>
                                              </div>
                                              <div
                                                className="row"
                                                style={{ width: "100%" }}
                                              >
                                                <div className="col-12 col-xs-12 col-sm-4 col-md-3"></div>
                                                <div className="col-12 col-xs-12 col-sm-8 col-md-9">
                                                  <div className="commentcollapseTicket"></div>
                                                </div>
                                              </div>
                                            </div>
                                          </div>
                                          {details.trailMessageDetails
                                            .length === 0 ? null : (
                                            <div className="row card-op-out">
                                              <div className="col-12 col-xs-12 col-sm-4 col-md-3"></div>
                                              <div className="col-12 col-xs-12 col-sm-6 col-md-7">
                                                <UncontrolledCollapse
                                                  toggler={
                                                    "#i" +
                                                    details.latestMessageDetails
                                                      .mailID
                                                  }
                                                >
                                                  <Card>
                                                    <CardBody>
                                                      {details.trailMessageDetails !==
                                                        null &&
                                                        details.trailMessageDetails.map(
                                                          function (MsgData, s) {
                                                            return (
                                                              <div
                                                                className="card-details"
                                                                key={s}
                                                              >
                                                                <div className="card-details-1">
                                                                  <label
                                                                    className="label-5"
                                                                    style={{
                                                                      display:
                                                                        "block",
                                                                    }}
                                                                  >
                                                                    {ReactHtmlParser(
                                                                      MsgData.ticketMailBody
                                                                    )}
                                                                  </label>
                                                                </div>
                                                              </div>
                                                            );
                                                          }
                                                        )}

                                                      {details
                                                        .trailMessageDetails
                                                        .length === 0 && (
                                                          <div className="card-details">
                                                            <div className="card-details-1">
                                                              <label className="i-have-solved-this-i">
                                                                {
                                                                  details
                                                                    .trailMessageDetails
                                                                    .ticketMailSubject
                                                                }
                                                              </label>
                                                              <label
                                                                className="label-5"
                                                                style={{
                                                                  display:
                                                                    "block",
                                                                }}
                                                              >
                                                                {ReactHtmlParser(
                                                                  details
                                                                    .trailMessageDetails
                                                                    .ticketMailBody
                                                                )}
                                                              </label>
                                                            </div>
                                                          </div>
                                                        )}
                                                    </CardBody>
                                                  </Card>
                                                </UncontrolledCollapse>
                                              </div>
                                              <div className="col-12 col-xs-12 col-sm-2"></div>
                                            </div>
                                          )}
                                        </div>
                                      </div>
                                    );
                                  })}
                              </div>
                            );
                          })}
                        <Modal
                          open={this.state.CommentCollapse}
                          onClose={this.handleCommentCollapseOpen.bind(this)}
                          closeIconId="sdsg"
                          modalId="Historical-popup"
                          overlayId="logout-ovrly"
                          classNames={{
                            modal: "historical-popup",
                          }}
                        >
                          <div className="commenttextborder">
                            <div className="comment-disp">
                              <div className="Commentlabel">
                                <label className="Commentlabel1">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.p.comment
                                    : "Comment"}
                                </label>
                              </div>
                              <div className="tic-det-ck-user tic-det-Freecmd myticlist-expand-sect">
                                <select
                                  className="add-select-category"
                                  value="0"
                                  onChange={this.setAssignedToValue.bind(
                                    this,
                                    "comment"
                                  )}
                                >
                                  <option value="0">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.link.users
                                      : "Users"}
                                  </option>
                                  {this.state.AssignToData !== null &&
                                    this.state.AssignToData.map((item, i) => (
                                      <option key={i} value={item.userID}>
                                        {item.fullName}
                                      </option>
                                    ))}
                                </select>
                              </div>
                              <div>
                                <img
                                  src={CrossIcon}
                                  alt="Minus"
                                  className="pro-cross-icn m-0"
                                  onClick={this.handleCommentCollapseClose.bind(
                                    this
                                  )}
                                />
                              </div>
                            </div>
                            <div className="commenttextmessage">
                              <textarea
                                cols="31"
                                rows="3"
                                className="ticketMSGCmt-textarea"
                                name="ticketcommentMSG"
                                maxLength={300}
                                value={this.state.ticketcommentMSG}
                                onChange={this.handleNoteOnChange}
                                onClick={this.setNotiCurPosiCmnt}
                              ></textarea>
                            </div>
                            {this.state.ticketcommentMSG.length === 0 && (
                              <p
                                style={{
                                  color: "red",
                                  marginBottom: "0px",
                                }}
                              >
                                {this.state.tckcmtMSGCompulsory}
                              </p>
                            )}
                            <div className="SendCommentBtn">
                              <button
                                className="SendCommentBtn1"
                                onClick={this.handleSendMailData.bind(
                                  this,
                                  "Facebook"
                                )}
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.button.send
                                  : "SEND"}
                              </button>
                            </div>
                          </div>
                        </Modal>
                        <Modal
                          open={this.state.CommentCollapse2}
                          onClose={this.hanldeCommentClose2.bind(this)}
                          closeIconId="sdsg"
                          modalId="Historical-popup"
                          overlayId="logout-ovrly"
                          classNames={{ modal: "historical-popup" }}
                        >
                          <div className="col-12" style={{ marginTop: "5px" }}>
                            <div className="mask1">
                              <div className="mail-mask">
                                <div
                                  className="dropdown"
                                  style={{ display: "inherit" }}
                                >
                                  <select
                                    className="my-tic-email"
                                    value={this.state.ReplySourceId}
                                    onChange={this.handleReplyTcktSourceChange}
                                  >
                                    {this.state.ticketSourceData.map((item) => {
                                      return (
                                        <option value={item.ticketSourceName}>
                                          {item.ticketSourceName}
                                        </option>
                                      );
                                    })}
                                  </select>
                                </div>
                                {/* <div
                              className="dropdown"
                              style={{ display: "inherit" }}
                            >
                              <button
                                className="dropdown-toggle my-tic-email"
                                type="button"
                                data-toggle="dropdown"
                              >
                                <img
                                  src={Email1}
                                  alt="email"
                                  className="EMFCImg"
                                />
                                <span className="EMFCText">Email</span>
                              </button>
                              <ul className="dropdown-menu">
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Email1}
                                      alt="email"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Email</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Sms1}
                                      alt="sms"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">SMS</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Facebook1}
                                      alt="facebook"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Facebook</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Call1}
                                      alt="call"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Call</span>
                                  </a>
                                </li>
                              </ul>
                            </div> */}
                                <div className="tic-det-ck-user tic-det-ck-user-rply myticlist-expand-sect">
                                  <select
                                    className="add-select-category"
                                    value="0"
                                    onChange={this.setAssignedToValue.bind(
                                      this,
                                      "rply"
                                    )}
                                  >
                                    <option value="0">
                                      {TranslationContext !== undefined
                                        ? TranslationContext.link.users
                                        : "Users"}
                                    </option>
                                    {this.state.AssignToData !== null &&
                                      this.state.AssignToData.map((item, i) => (
                                        <option key={i} value={item.userID}>
                                          {item.fullName}
                                        </option>
                                      ))}
                                  </select>
                                </div>
                                <div className="my-ticket-temp">
                                  <a
                                    href="#!"
                                    className="kblink"
                                    onClick={this.HandleKbLinkModalOpen.bind(
                                      this
                                    )}
                                  >
                                    <img
                                      src={KnowledgeLogo}
                                      alt="KnowledgeLogo"
                                      className="knoim"
                                    />
                                    KB
                                  </a>
                                  <div
                                    className="dropdown collapbtn"
                                    style={{ display: "inherit" }}
                                  >
                                    <button
                                      className="dropdown-toggle my-tic-email"
                                      type="button"
                                      data-toggle="dropdown"
                                      onClick={this.handleTemplateBindByIssueType.bind(
                                        this,
                                        1
                                      )}
                                    >
                                      <FontAwesomeIcon icon={faCalculator} />
                                      {TranslationContext !== undefined
                                        ? TranslationContext.p.template
                                        : "Template"}
                                    </button>
                                    <ul className="dropdown-menu">
                                      {/* <input className="inputsearchTemp" placeholder="Search template" type="text"/> */}
                                      {this.state.ReplyCKEditoertemplat !==
                                        null &&
                                        this.state.ReplyCKEditoertemplat.map(
                                          (item, i) => (
                                            <li key={i} value={item.templateID}>
                                              <span
                                                onClick={this.handleCkEditorTemplateData.bind(
                                                  this,
                                                  item.templateID,
                                                  item.templateName,
                                                  1
                                                )}
                                              >
                                                {item.templateName}
                                              </span>
                                            </li>
                                          )
                                        )}
                                    </ul>
                                  </div>
                                </div>
                                <div className="mob-float my-tic-mob-float">
                                  <div
                                    style={{ cursor: "pointer" }}
                                    onClick={this.hanldeCommentClose2.bind(
                                      this
                                    )}
                                  >
                                    <img
                                      src={CrossIcon}
                                      alt="Minus"
                                      className="pro-cross-img"
                                    />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          {this.state.ReplySourceId != "ChatBot" ? (
                            <div className="col-md-12 my-tic-ckeditor">
                              <CKEditor
                                onChange={this.onreplyCKEditorChange}
                                onBlur={this.onCkBlurReply}
                                id="ckeditor1"
                                data={
                                  // this.state.ReplySourceId == 2
                                  //   ? this.state.tempName.length > 0
                                  //     ? this.state.replymailBodyData
                                  //     : (this.state.replymailBodyData,
                                  //       this.state.ticketMailerFooter)
                                  //   : this.state.replymailBodyData
                                  this.state.replymailBodyData
                                }
                                config={{
                                  toolbar: [
                                    {
                                      name: "basicstyles",
                                      items: ["Bold", "Italic", "Strike"],
                                    },
                                    {
                                      name: "styles",
                                      items: ["Styles", "Format"],
                                    },
                                    {
                                      name: "paragraph",
                                      items: ["NumberedList", "BulletedList"],
                                    },
                                    {
                                      name: "links",
                                      items: ["Link", "Unlink"],
                                    },
                                    {
                                      name: "insert",
                                      items: ["Image", "Table"],
                                    },
                                    {
                                      name: "tools",
                                      items: ["Maximize"],
                                    },
                                    {
                                      name: "editing",
                                      items: ["Scayt"],
                                    },
                                  ],
                                }}
                              />
                              <div className="row colladrowa">
                                <div className="col-md-12 colladrow mail-conent">
                                  <ul style={{ padding: "0 15px" }}>
                                    <li>
                                      <label>
                                        To: &nbsp;
                                        {ticketDetailsData.customerEmailId}
                                      </label>
                                    </li>
                                    <li>
                                      <div className="filter-checkbox">
                                        <input
                                          type="checkbox"
                                          id="custRply"
                                          name="filter-type"
                                          style={{ display: "none" }}
                                          onChange={() =>
                                            this.showInformStoreReply()
                                          }
                                        />
                                        <label
                                          htmlFor="custRply"
                                          style={{ paddingLeft: "25px" }}
                                        >
                                          <span>
                                            {TranslationContext !== undefined
                                              ? TranslationContext.span
                                                .informstore
                                              : "Inform Store"}
                                          </span>
                                        </label>
                                      </div>
                                    </li>
                                    <li>
                                      <span>
                                        <input
                                          id="Rplyfile"
                                          className="file-upload1 d-none"
                                          type="file"
                                          name="Rplyfile"
                                          onChange={this.handleReplyFileUpload.bind(
                                            this
                                          )}
                                          multiple
                                        />
                                        <label
                                          htmlFor="Rplyfile"
                                          onDrop={this.fileDrop}
                                          onDragOver={this.fileDragOver}
                                          onDragEnter={this.fileDragEnter}
                                        >
                                          <img
                                            src={FileUpload}
                                            alt="file-upload"
                                            className="fileup"
                                          />
                                        </label>
                                      </span>
                                      <label
                                        style={{
                                          color: "#2561a8",
                                          cursor: "pointer",
                                        }}
                                        onClick={
                                          this.state.Rplyfile.length > 0 &&
                                          this.handleThumbModalOpenReply.bind(
                                            this
                                          )
                                        }
                                      >
                                        {this.state.ReplyfileText}{" "}
                                        {TranslationContext !== undefined
                                          ? TranslationContext
                                            .ticketingDashboard.files
                                          : "files"}
                                      </label>
                                    </li>
                                    <li className="w-100"></li>
                                    <li>
                                      <label className="">
                                        <div className="input-group">
                                          <span className="input-group-addon inputcc">
                                            CC:
                                          </span>
                                          <input
                                            type="text"
                                            className="CCdi1"
                                            name="userCC"
                                            autoComplete="off"
                                            value={
                                              this.state.mailFiled.userCC !=
                                                null
                                                ? this.state.mailFiled.userCC
                                                : ""
                                            }
                                            onChange={this.handleMailOnChange.bind(
                                              this,
                                              "userCC"
                                            )}
                                          />
                                          <span className="input-group-addon inputcc-one">
                                            {this.state.userCcCount < 1
                                              ? "+" + this.state.userCcCount
                                              : "+" + this.state.userCcCount}
                                          </span>
                                        </div>
                                      </label>
                                    </li>
                                    <li>
                                      <label className="">
                                        <div className="input-group">
                                          <span className="input-group-addon inputcc">
                                            BCC:
                                          </span>
                                          <input
                                            type="text"
                                            className="CCdi"
                                            name="userBCC"
                                            value={this.state.mailFiled.userBCC}
                                            onChange={this.handleMailOnChange.bind(
                                              this,
                                              "userBCC"
                                            )}
                                          />
                                          <span className="input-group-addon inputcc-one">
                                            {this.state.userBccCount < 1
                                              ? "+" + this.state.userBccCount
                                              : "+" + this.state.userBccCount}
                                          </span>
                                        </div>
                                      </label>
                                    </li>
                                    <li style={{ width: "240px" }}>
                                      <label>
                                        <div className="input-group">
                                          {this.state.ticketDetailsData
                                            .toEmailId !== null ? (
                                            this.state.ticketDetailsData
                                              .toEmailId !== "" ? (
                                              <input
                                                type="text"
                                                className="CCdi"
                                                name="senderMailID"
                                                value={
                                                  this.state.ticketDetailsData
                                                    .toEmailId
                                                }
                                                disabled
                                              />
                                            ) : (
                                              <select
                                                style={{ width: "100%" }}
                                                className="CCdi"
                                                value={
                                                  this.state.ticketDetailsData
                                                    .sendEmailID
                                                }
                                                onChange={this.handleMailsenderID.bind(
                                                  this
                                                )}
                                              >
                                                <option>
                                                  Select Sender Mail ID
                                                </option>
                                                {this.state.emailIDData.length >
                                                  0
                                                  ? this.state.emailIDData.map(
                                                    (item) => {
                                                      return (
                                                        <option
                                                          value={
                                                            item.emailSenderID
                                                          }
                                                        >
                                                          {item.emailSenderID}
                                                        </option>
                                                      );
                                                    }
                                                  )
                                                  : null}
                                              </select>
                                            )
                                          ) : (
                                            <select
                                              style={{ width: "100%" }}
                                              className="CCdi"
                                              value={
                                                this.state.ticketDetailsData
                                                  .sendEmailID
                                              }
                                              onChange={this.handleMailsenderID.bind(
                                                this
                                              )}
                                            >
                                              <option>
                                                Select Sender Mail ID
                                              </option>
                                              {this.state.emailIDData.length > 0
                                                ? this.state.emailIDData.map(
                                                  (item) => {
                                                    return (
                                                      <option
                                                        value={
                                                          item.emailSenderID
                                                        }
                                                      >
                                                        {item.emailSenderID}
                                                      </option>
                                                    );
                                                  }
                                                )
                                                : null}
                                            </select>
                                          )}
                                        </div>
                                      </label>
                                    </li>
                                  </ul>
                                </div>
                              </div>
                            </div>
                          ) : (
                            <div
                              className="col-md-12 my-tic-ckeditor"
                              style={{
                                pointerEvents:
                                  this.state.IsTktWithinSession === false
                                    ? "none"
                                    : "all",
                              }}
                            >
                              {/* <CKEditor
                       id="ckeditor1"
                        data={this.state.mailBodyData}
                        onChange={this.onAddCKEditorChange}
                        config={{
                          height: 170,
                          resize_enabled: false,
                          removePlugins: "elementspath",
                          toolbar: [
                            {
                              name: "basicstyles",
                              items: [
                                "Bold",
                                "-",
                                "Italic",
                                "-",
                                "Strike",
                                "-",
                              ],
                            },
                            {
                              name: "links",
                              items: ["Link", "Unlink"],
                            },
                          ],
                        }}
                      /> */}
                              <CKEditor
                                onChange={this.onreplyCKEditorChange}
                                onBlur={this.onCkBlurReply}
                                id="ckeditor1"
                                data={
                                  // this.state.ReplySourceId == 2
                                  //   ? this.state.tempName.length > 0
                                  //     ? this.state.replymailBodyData
                                  //     : (this.state.replymailBodyData,
                                  //       this.state.ticketMailerFooter)
                                  //   : this.state.replymailBodyData
                                  this.state.replymailBodyData
                                }
                                config={{
                                  toolbar: [
                                    {
                                      name: "basicstyles",
                                      items: [
                                        "Bold",
                                        "-",
                                        "Italic",
                                        "-",
                                        "Strike",
                                        "-",
                                      ],
                                    },
                                    {
                                      name: "links",
                                      items: ["Link", "Unlink"],
                                    },
                                  ],
                                }}
                              />
                            </div>
                          )}
                          {this.state.ReplySourceId != "ChatBot" ? (
                            <button
                              className="send my-tic-send"
                              type="button"
                              onClick={this.handleSendMailData.bind(
                                this,
                                "Calls"
                              )}
                              disabled={
                                this.state.isSendingReplyEmail ? true : false
                              }
                              style={{
                                background: this.state.isSendingReplyEmail
                                  ? "#cccbcc"
                                  : "#2561a8",
                                border: this.state.isSendingReplyEmail
                                  ? "none"
                                  : "1px solid #2561a8",
                                cursor: this.state.isSendingReplyEmail
                                  ? "not-allowed"
                                  : "pointer",
                              }}
                            >
                              {TranslationContext !== undefined ? (
                                TranslationContext.button.send
                              ) : this.state.isSendingReplyEmail ? (
                                <img
                                  src={loaderGif}
                                  alt="loading"
                                  style={{ width: "20px" }}
                                />
                              ) : (
                                "Send"
                              )}
                            </button>
                          ) : null}
                          {this.state.ReplySourceId != "ChatBot" ? (
                            <button
                              className="send my-tic-send"
                              type="button"
                              onClick={this.handleSendMailData.bind(
                                this,
                                "TicketFromStore"
                              )}
                            // disabled={
                            //   this.state.isSendingReplyAllEmail ? true : false
                            // }
                            // style={{
                            //   background: this.state.isSendingReplyAllEmail
                            //     ? "#cccbcc"
                            //     : "#2561a8",
                            //   border: this.state.isSendingReplyAllEmail
                            //     ? "none"
                            //     : "1px solid #2561a8",
                            //   cursor: this.state.isSendingReplyAllEmail
                            //     ? "not-allowed"
                            //     : "pointer",
                            // }}
                            >
                              {TranslationContext !== undefined
                                ? TranslationContext.button.send
                                : // this.state.isSendingReplyAllEmail ? (
                                //   <img
                                //     src={loaderGif}
                                //     alt="loading"
                                //     style={{ width: "20px" }}
                                //   />
                                // ) :
                                // this.state.isReplyAllClicked
                                // ? "Remove CC"
                                // :
                                "Reply All"}
                            </button>
                          ) : null}
                          {this.state.ReplySourceId == "ChatBot" ? (
                            <div
                              className="sendreply-ck-attachment"
                              title={"Attachment"}
                            // style={{top:"100px", right:"55px"}}
                            >
                              <span>
                                <input
                                  id="file-upload"
                                  className="file-upload1 d-none"
                                  type="file"
                                  name="file"
                                  onChange={this.handleFileUpload.bind(this)}
                                  multiple
                                />
                                <label
                                  htmlFor="file-upload"
                                  onDrop={this.fileDrop}
                                  onDragOver={this.fileDragOver}
                                  onDragEnter={this.fileDragEnter}
                                >
                                  <img
                                    src={FileUpload}
                                    alt="file-upload"
                                    className="fileup"
                                    style={{ height: "17px" }}
                                  />
                                </label>
                              </span>
                            </div>
                          ) : null}
                          {this.state.ReplySourceId == "ChatBot" ? (
                            <div
                              className="reply-sendbtn"
                              onClick={this.handleSendMailData.bind(
                                this,
                                "ChatBot"
                              )}
                              title={"Send"}
                            >
                              <img src={Assign} alt="send img" />
                            </div>
                          ) : null}
                        </Modal>

                        <Modal
                          open={this.state.CommentCollapse3}
                          onClose={this.hanldeCommentClose3.bind(this)}
                          closeIconId="sdsg"
                          modalId="Historical-popup"
                          overlayId="logout-ovrly"
                          classNames={{ modal: "historical-popup" }}
                        >
                          <div className="col-12" style={{ marginTop: "5px" }}>
                            <div className="mask1">
                              <div className="mail-mask">
                                <div
                                  className="dropdown"
                                  style={{ display: "inherit" }}
                                >
                                  <select
                                    className="my-tic-email"
                                    value={this.state.forwardSourceId}
                                    onChange={
                                      this.handleForwardTcktSourceChange
                                    }
                                  >
                                    {this.state.ticketSourceData.map((item) => {
                                      return (
                                        <option value={item.ticketSourceName}>
                                          {item.ticketSourceName}
                                        </option>
                                      );
                                    })}
                                  </select>
                                </div>
                                {/* <div
                              className="dropdown"
                              style={{ display: "inherit" }}
                            >
                              <button
                                className="dropdown-toggle my-tic-email"
                                type="button"
                                data-toggle="dropdown"
                              >
                                <img
                                  src={Email1}
                                  alt="email"
                                  className="EMFCImg"
                                />
                                <span className="EMFCText">Email</span>
                              </button>
                              <ul className="dropdown-menu">
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Email1}
                                      alt="email"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Email</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Sms1}
                                      alt="sms"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">SMS</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Facebook1}
                                      alt="facebook"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Facebook</span>
                                  </a>
                                </li>
                                <li>
                                  <a href="#!">
                                    <img
                                      src={Call1}
                                      alt="call"
                                      className="EMFCImg"
                                    />
                                    <span className="EMFCText">Call</span>
                                  </a>
                                </li>
                              </ul>
                            </div> */}
                                <div className="tic-det-ck-user tic-det-ck-user-rply myticlist-expand-sect">
                                  <select
                                    className="add-select-category temPadding"
                                    value="0"
                                    onChange={this.setAssignedToValue.bind(
                                      this,
                                      "forward"
                                    )}
                                  >
                                    <option value="0">
                                      {TranslationContext !== undefined
                                        ? TranslationContext.link.users
                                        : "Users"}
                                    </option>
                                    {this.state.AssignToData !== null &&
                                      this.state.AssignToData.map((item, i) => (
                                        <option key={i} value={item.userID}>
                                          {item.fullName}
                                        </option>
                                      ))}
                                  </select>
                                </div>
                                <div className="my-ticket-temp">
                                  <a
                                    href="#!"
                                    className="kblink"
                                    onClick={this.HandleKbLinkModalOpen.bind(
                                      this
                                    )}
                                  >
                                    <img
                                      src={KnowledgeLogo}
                                      alt="KnowledgeLogo"
                                      className="knoim"
                                    />
                                    KB
                                  </a>
                                  <div
                                    className="dropdown collapbtn"
                                    style={{ display: "inherit" }}
                                  >
                                    <button
                                      className="dropdown-toggle my-tic-email"
                                      type="button"
                                      data-toggle="dropdown"
                                      onClick={this.handleTemplateBindByIssueType.bind(
                                        this,
                                        1
                                      )}
                                    >
                                      <FontAwesomeIcon icon={faCalculator} />
                                      {TranslationContext !== undefined
                                        ? TranslationContext.p.template
                                        : "Template"}
                                    </button>
                                    <ul className="dropdown-menu">
                                      <input
                                        className="inputsearchTemp"
                                        placeholder="Search template"
                                        type="text"
                                        onChange={(e) =>
                                          this.handleTemplateSearchReply(e)
                                        }
                                      />
                                      {this.state.ReplyCKEditoertemplat !==
                                        null &&
                                        this.state.filterTemplateArrReply.map(
                                          (item, i) => (
                                            <li key={i} value={item.templateID}>
                                              <span
                                                onClick={this.handleCkEditorTemplateData.bind(
                                                  this,
                                                  item.templateID,
                                                  item.templateName,
                                                  1
                                                )}
                                              >
                                                {item.templateName}
                                              </span>
                                            </li>
                                          )
                                        )}
                                    </ul>
                                  </div>
                                </div>
                                <div className="mob-float my-tic-mob-float">
                                  <div
                                    style={{ cursor: "pointer" }}
                                    onClick={this.hanldeCommentClose3.bind(
                                      this
                                    )}
                                  >
                                    <img
                                      src={CrossIcon}
                                      alt="Minus"
                                      className="pro-cross-img"
                                    />
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          <div className="col-md-12 my-tic-ckeditor">
                            <CKEditor
                              id="ckeditor1"
                              data={
                                // this.state.ReplySourceId == 2
                                //   ? this.state.tempName.length > 0
                                //     ? this.state.replymailBodyData
                                //     : (this.state.replymailBodyData,
                                //       this.state.ticketMailerFooter)
                                //   : this.state.replymailBodyData
                                //this.state.replymailBodyData
                                this.state.isForward
                                  ? this.state.ForWardMailBodyData
                                  : this.state.replymailBodyData
                              }
                              onChange={this.onForWardCKEditorChange}
                              onBlur={this.onCkBlurForward}
                              // config={{
                              //   toolbar: [
                              //     {
                              //       name: "basicstyles",
                              //       items: ["Bold", "Italic", "Strike"],
                              //     },
                              //     {
                              //       name: "styles",
                              //       items: ["Styles", "Format"],
                              //     },
                              //     {
                              //       name: "paragraph",
                              //       items: ["NumberedList", "BulletedList"],
                              //     },
                              //     {
                              //       name: "links",
                              //       items: ["Link", "Unlink"],
                              //     },
                              //     {
                              //       name: "insert",
                              //       items: ["Image", "Table"],
                              //     },
                              //     {
                              //       name: "tools",
                              //       items: ["Maximize"],
                              //     },
                              //     {
                              //       name: "editing",
                              //       items: ["Scayt"],
                              //     },
                              //   ],
                              // }}
                              config={{
                                // height: 170,
                                // resize_enabled: false,
                                // removePlugins: "elementspath",
                                toolbar: [
                                  {
                                    name: "basicstyles",
                                    items: ["Bold", "Italic", "Strike"],
                                  },
                                  // {
                                  //   name: "styles",
                                  //   items: ["Styles", "Format"],
                                  // },
                                  {
                                    name: "links",
                                    items: ["Link", "Unlink"],
                                  },
                                  // {
                                  //   name: "editing",
                                  //   items: ["Scayt"],
                                  // },
                                  // {
                                  //   name: "styles",
                                  //   items: ["Styles", "Format"],
                                  // },
                                ],
                              }}
                            />
                            <div className="row colladrowa">
                              <div className="col-md-12 colladrow mail-conent">
                                <ul style={{ padding: "0 15px" }}>
                                  <li>
                                    <label className="">
                                      <div className="input-group">
                                        <span className="input-group-addon inputcc">
                                          To:
                                        </span>
                                        <input
                                          type="text"
                                          className="CCdi"
                                          name="toEmailId"
                                          value={
                                            this.state.isForward
                                              ? this.state.forwardTo
                                              : this.state.toEmailId
                                          }
                                          onChange={this.handleMailOnChange.bind(
                                            this,
                                            "toEmailId"
                                          )}
                                        />
                                        {/* <span className="input-group-addon inputcc-one">
                                        {this.state.userToCount < 1
                                          ? "+" + this.state.userToCount
                                          : "+" + this.state.userToCount}
                                      </span> */}
                                      </div>
                                    </label>
                                  </li>
                                  <li>
                                    <div className="filter-checkbox">
                                      <input
                                        type="checkbox"
                                        id="custForward"
                                        name="filter-type"
                                        style={{ display: "none" }}
                                        onChange={() =>
                                          this.showInformStoreForward()
                                        }
                                      />
                                      <label
                                        htmlFor="custForward"
                                        style={{ paddingLeft: "25px" }}
                                      >
                                        <span>
                                          {TranslationContext !== undefined
                                            ? TranslationContext.span
                                              .informstore
                                            : "Inform Store"}
                                        </span>
                                      </label>
                                    </div>
                                  </li>
                                  <li>
                                    <span>
                                      <input
                                        id="forwardFile"
                                        className="file-upload1 d-none"
                                        type="file"
                                        name="forwardFile"
                                        onChange={this.handleForwardFileUpload.bind(
                                          this
                                        )}
                                        multiple
                                      />
                                      <label
                                        htmlFor="forwardFile"
                                        onDrop={this.fileDrop}
                                        onDragOver={this.fileDragOver}
                                        onDragEnter={this.fileDragEnter}
                                      >
                                        <img
                                          src={FileUpload}
                                          alt="file-upload"
                                          className="fileup"
                                        />
                                      </label>
                                    </span>
                                    <label
                                      style={{
                                        color: "#2561a8",
                                        cursor: "pointer",
                                      }}
                                      onClick={
                                        this.state.forwardFileText > 0
                                          ? this.handleThumbModalOpenForward.bind(
                                            this
                                          )
                                          : undefined
                                      }
                                    >
                                      {this.state.forwardFileText}{" "}
                                      {TranslationContext !== undefined
                                        ? TranslationContext.ticketingDashboard
                                          .files
                                        : "files"}
                                    </label>
                                  </li>
                                  <li className="w-100"></li>
                                  <li>
                                    <label className="">
                                      <div className="input-group">
                                        <span className="input-group-addon inputcc">
                                          CC:
                                        </span>
                                        <input
                                          type="text"
                                          className="CCdi1"
                                          name="userCC"
                                          autoComplete="off"
                                          value={
                                            this.state.mailFiled.userCC != null
                                              ? this.state.mailFiled.userCC
                                              : ""
                                          }
                                          onChange={this.handleMailOnChange.bind(
                                            this,
                                            "userCC"
                                          )}
                                        />
                                        <span className="input-group-addon inputcc-one">
                                          {this.state.userCcCount < 1
                                            ? "+" + this.state.userCcCount
                                            : "+" + this.state.userCcCount}
                                        </span>
                                      </div>
                                    </label>
                                  </li>
                                  <li>
                                    <label className="">
                                      <div className="input-group">
                                        <span className="input-group-addon inputcc">
                                          BCC:
                                        </span>
                                        <input
                                          type="text"
                                          className="CCdi"
                                          name="userBCC"
                                          value={this.state.mailFiled.userBCC}
                                          onChange={this.handleMailOnChange.bind(
                                            this,
                                            "userBCC"
                                          )}
                                        />
                                        <span className="input-group-addon inputcc-one">
                                          {this.state.userBccCount < 1
                                            ? "+" + this.state.userBccCount
                                            : "+" + this.state.userBccCount}
                                        </span>
                                      </div>
                                    </label>
                                  </li>
                                  <li style={{ width: "240px" }}>
                                    <label>
                                      <div className="input-group">
                                        {this.state.ticketDetailsData
                                          .toEmailId !== null ? (
                                          this.state.ticketDetailsData
                                            .toEmailId !== "" ? (
                                            <input
                                              type="text"
                                              className="CCdi"
                                              name="senderEmailId"
                                              value={
                                                this.state.ticketDetailsData
                                                  .toEmailId
                                              }
                                              disabled
                                            />
                                          ) : (
                                            <select
                                              style={{ width: "100%" }}
                                              className="CCdi"
                                              value={
                                                this.state.ticketDetailsData
                                                  .sendEmailID
                                              }
                                              onChange={this.handleMailsenderID.bind(
                                                this
                                              )}
                                            >
                                              <option>
                                                Select Sender Mail ID
                                              </option>
                                              {this.state.emailIDData.length > 0
                                                ? this.state.emailIDData.map(
                                                  (item) => {
                                                    return (
                                                      <option
                                                        value={
                                                          item.emailSenderID
                                                        }
                                                      >
                                                        {item.emailSenderID}
                                                      </option>
                                                    );
                                                  }
                                                )
                                                : null}
                                            </select>
                                          )
                                        ) : (
                                          <select
                                            style={{ width: "100%" }}
                                            className="CCdi"
                                            value={
                                              this.state.ticketDetailsData
                                                .sendEmailID
                                            }
                                            onChange={this.handleMailsenderID.bind(
                                              this
                                            )}
                                          >
                                            <option>
                                              Select Sender Mail ID
                                            </option>
                                            {this.state.emailIDData.length > 0
                                              ? this.state.emailIDData.map(
                                                (item) => {
                                                  return (
                                                    <option
                                                      value={
                                                        item.emailSenderID
                                                      }
                                                    >
                                                      {item.emailSenderID}
                                                    </option>
                                                  );
                                                }
                                              )
                                              : null}
                                          </select>
                                        )}
                                      </div>
                                    </label>
                                  </li>
                                </ul>
                              </div>
                            </div>
                          </div>
                          <button
                            className="send my-tic-send"
                            type="button"
                            onClick={this.handleSendMailData.bind(
                              this,
                              "ExternalAPI"
                            )}
                            disabled={
                              this.state.isSendingForwardEmail ? true : false
                            }
                            style={{
                              background: this.state.isSendingForwardEmail
                                ? "#cccbcc"
                                : "#2561a8",
                              border: this.state.isSendingForwardEmail
                                ? "none"
                                : "1px solid #2561a8",
                              cursor: this.state.isSendingForwardEmail
                                ? "not-allowed"
                                : "pointer",
                            }}
                          >
                            {TranslationContext !== undefined ? (
                              TranslationContext.button.send
                            ) : this.state.isSendingForwardEmail ? (
                              <img
                                src={loaderGif}
                                alt="loading"
                                style={{ width: "20px" }}
                              />
                            ) : (
                              "Send"
                            )}
                          </button>
                          <button
                            className="send my-tic-send"
                            type="button"
                            onClick={this.handleSendMailData.bind(
                              this,
                              "WhatsApp"
                            )}
                          // disabled={
                          //   this.state.isSendingReplyAllEmail ? true : false
                          // }
                          // style={{
                          //   background: this.state.isSendingReplyAllEmail
                          //     ? "#cccbcc"
                          //     : "#2561a8",
                          //   border: this.state.isSendingReplyAllEmail
                          //     ? "none"
                          //     : "1px solid #2561a8",
                          //   cursor: this.state.isSendingReplyAllEmail
                          //     ? "not-allowed"
                          //     : "pointer",
                          // }}
                          >
                            {TranslationContext !== undefined
                              ? TranslationContext.button.send
                              : // this.state.isSendingReplyAllEmail ? (
                              //   <img
                              //     src={loaderGif}
                              //     alt="loading"
                              //     style={{ width: "20px" }}
                              //   />
                              // ) :
                              // this.state.isReplyAllClicked
                              // ? "Remove CC"
                              // :
                              "Reply All"}
                          </button>
                        </Modal>

                        <Modal
                          open={this.state.FreeTextComment}
                          onClose={this.handleFreeTextCommentOpen.bind(this)}
                          closeIconId="sdsg"
                          modalId="Historical-popup"
                          overlayId="logout-ovrly"
                          classNames={{
                            modal: "historical-popup",
                          }}
                        >
                          <div className="commenttextborder">
                            <div className="comment-disp">
                              <div className="Commentlabel">
                                <label className="Commentlabel1">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.p.comment
                                    : "Comment"}
                                </label>
                              </div>
                              <div className="tic-det-ck-user tic-det-Freecmd myticlist-expand-sect">
                                <select
                                  className="add-select-category"
                                  value="0"
                                  onChange={this.setAssignedToValue.bind(
                                    this,
                                    "freeCmd"
                                  )}
                                >
                                  <option value="0">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.link.users
                                      : "Users"}
                                  </option>
                                  {this.state.AssignToData !== null &&
                                    this.state.AssignToData.map((item, i) => (
                                      <option key={i} value={item.userID}>
                                        {item.fullName}
                                      </option>
                                    ))}
                                </select>
                              </div>
                              <div>
                                <img
                                  src={CrossIcon}
                                  alt="Minus"
                                  className="pro-cross-icn m-0"
                                  onClick={this.handleFreeTextCommentOpen.bind(
                                    this,
                                    "close"
                                  )}
                                />
                              </div>
                            </div>
                            <div className="commenttextmessage">
                              <textarea
                                cols="31"
                                rows="3"
                                className="ticketMSGCmt-textarea"
                                name="ticketFreeTextcomment"
                                maxLength={300}
                                value={this.state.ticketFreeTextcomment}
                                onChange={this.handleNoteOnChange}
                                onClick={this.setNotiCurPosiFreeCmnt}
                              ></textarea>
                            </div>
                            {this.state.ticketFreeTextcomment.length === 0 && (
                              <p
                                style={{
                                  color: "red",
                                  marginBottom: "0px",
                                }}
                              >
                                {this.state.freetextCommentCompulsory}
                              </p>
                            )}
                            <div className="SendCommentBtn">
                              <button
                                className="SendCommentBtn1"
                                onClick={this.handleSendMailData.bind(this)}
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.button.send
                                  : "SEND"}
                              </button>
                            </div>
                          </div>
                        </Modal>
                      </div>

                      <div
                        className="tab-pane fade"
                        id="Task-tab"
                        role="tabpanel"
                        aria-labelledby="Task-tab"
                      >
                        {this.state.ticket_Id > 0 ? (
                          <div className={this.props.isKB ? "iskbticket" : ""}>
                            <MyTicketTask
                              callbackToParent={this.callbackToParent}
                              isKB={this.state.isKB}
                              taskData={{
                                TicketData: {
                                  TicketId: this.state.ticket_Id,

                                  TabActiveId: this.state.TaskTab,
                                },
                              }}
                            />
                          </div>
                        ) : (
                          ""
                        )}
                      </div>
                      <div
                        className="tab-pane fade"
                        id="Notes-tab"
                        role="tabpanel"
                        aria-labelledby="Notes-tab"
                      >
                        <div
                          className="row removemarg"
                          style={{ marginTop: "20px" }}
                        >
                          <div
                            className={
                              this.props.isKB
                                ? "col-12 col-xs-12 col-sm-4 iskbticket"
                                : "col-12 col-xs-12 col-sm-4"
                            }
                          >
                            <textarea
                              className={
                                this.state.isKB
                                  ? "Add-Notes-textarea iskbticket"
                                  : "Add-Notes-textarea"
                              }
                              placeholder={
                                TranslationContext !== undefined
                                  ? TranslationContext.placeholder.addnotes
                                  : "Add Notes"
                              }
                              name="NoteAddComment"
                              value={this.state.NoteAddComment}
                              onChange={this.handleNoteOnChange}
                            ></textarea>
                            {this.state.NoteAddComment.length === 0 && (
                              <p
                                style={{
                                  color: "red",
                                  marginBottom: "0px",
                                }}
                              >
                                {this.state.notesCommentCompulsion}
                              </p>
                            )}
                            <button
                              type="button"
                              className={
                                this.state.isKB
                                  ? "notesbtn notesbtn-text iskbticket"
                                  : "notesbtn notesbtn-text"
                              }
                              onClick={this.handleNoteAddComments.bind(this)}
                              style={{ marginTop: "5px" }}
                            >
                              {TranslationContext !== undefined
                                ? TranslationContext.a.addcomments
                                : "ADD COMMENT"}
                            </button>
                          </div>

                          <div className="col-12 col-xs-12 col-sm-8 my-ticket-notes">
                            {this.state.Notesdetails !== null &&
                              this.state.Notesdetails.map((item, i) => (
                                <div
                                  className="row my-ticket-notes-row"
                                  key={i}
                                >
                                  <div className="col-md-1">
                                    <div className="oval-5-1-new">
                                      <img
                                        src={StoreIcon}
                                        style={{ padding: "5px" }}
                                        alt="store-icon"
                                      />
                                    </div>
                                  </div>
                                  <div className="col-md-11">
                                    <div className="row my-ticket-notes-created">
                                      <label className="varun-nagpal">
                                        {item.isCollectaNote
                                          ? item.collectaAddedBy == 0
                                            ? "Store Staff"
                                            : "Customer"
                                          : item.createdByName}
                                      </label>
                                    </div>
                                    {item.isCollectaNote && (
                                      <div className="row my-ticket-notes-created">
                                        <label className="varun-nagpal">
                                          {`Note Date and Time : ${item.collectaDateTime}`}
                                        </label>
                                      </div>
                                    )
                                      // : (
                                      //   <div className="row my-ticket-notes-created">
                                      //     <label className="varun-nagpal">
                                      //       {`Note Date and Time : ${moment(
                                      //         item.createdDate
                                      //       ).format("YYYY-MM-DD HH:mm:ss")}`}
                                      //     </label>
                                      //   </div>
                                      // )
                                    }
                                    <div className="row my-ticket-notes-created">
                                      <label className="hi-diwakar-i-really tab " >
                                        {item.note.includes("Ticket ID #") ? (
                                          item.note.split(/(Ticket ID #\d+)/).map((part, index) => (
                                            part.includes("Ticket ID #") ? (
                                              <span className="hoverme" key={index} style={{ backgroundColor: "yellow", textDecoration: "underline" }} onClick={() => { this.handleNotesClick(part) }}>
                                                {part}
                                              </span>
                                            ) : (
                                              <span key={index}>{part}</span>
                                            )
                                          ))
                                        ) : (
                                          ReactHtmlParser(item.note)
                                        )}



                                      </label>
                                    </div>
                                  </div>
                                </div>
                              ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              {/* New Implementation for BATA */}
              {flags?.isHorizontal && (
                <div
                  className="tab-pane fade"
                  id="order_page"
                  role="tabpanel"
                  aria-labelledby="order_page"
                >
                  <div className="order_div">
                    <div className="row m-0">
                      <div className="col-3">
                        <div className="search_div">
                          <div className="search_header">
                            <h3>Search By</h3>
                            <div className="order_type">
                              <span>Website Order</span>
                              <label className="switch">
                                <input
                                  type="checkbox"
                                  checked={isorderFromShop}
                                  onChange={this.handleOrderSearchType}
                                />
                                <span className="slider round"></span>
                              </label>
                              <span>Shop Order</span>
                            </div>
                          </div>
                          <div className="d-flex justify-content-between">
                            <div className="serch_by_div">
                              <input
                                id="orderId"
                                defaultChecked
                                type="radio"
                                name="search_type"
                                onChange={this.handleSearchOrderType}
                              />
                              <label htmlFor="orderId">Order Id</label>
                            </div>
                            <div className="serch_by_div">
                              <input
                                id="mobId"
                                type="radio"
                                name="search_type"
                                onChange={this.handleSearchOrderType}
                              />
                              <label htmlFor="mobId">Mobile</label>
                            </div>
                          </div>
                          {searchType === "orderId" ? (
                            <div className="order_input">
                              <label>Order Id</label>
                              <input
                                className="w-100"
                                placeholder="Enter Order Id"
                                type="text"
                                value={orderIdTobeSearched}
                                onChange={this.handleSetOrderId}
                              />
                            </div>
                          ) : searchType === "mobId" ? (
                            <div className="order_input">
                              <label>Mobile</label>
                              <input
                                maxLength={10}
                                className="w-100"
                                placeholder="Enter Mobile Number"
                                type="number"
                                onChange={this.getOrderMobileNo}
                                value={
                                  isorderFromShop
                                    ? this.state.ticketDetailsData
                                      ?.customerPhoneNumber?.length > 10
                                      ? this.state.ticketDetailsData?.customerPhoneNumber.split(
                                        /91(.*)/s
                                      )[1]
                                      : this.state.ticketDetailsData
                                        ?.customerPhoneNumber
                                    : mobileNOtoSearch
                                }
                                readOnly
                              />
                              <p className="mobile_remark">
                                *Enter 10 digit mobile number
                              </p>
                            </div>
                          ) : null}
                          <div className="seach_button">
                            <button
                              disabled={isOrderSearchLoading}
                              onClick={
                                searchType === "orderId"
                                  ? () => this.handleGetOrderList("")
                                  : this.getListOfOrdersMobile
                              }
                            >
                              {isOrderSearchLoading ? (
                                <img
                                  src={loaderGif}
                                  alt="loading"
                                  style={{ width: "20px" }}
                                />
                              ) : (
                                "Search"
                              )}
                            </button>
                          </div>
                        </div>
                      </div>
                      <div className="col-9">
                        {isorderFromShop ? (
                          <div>
                            {/* order attachment new flow implementation */}
                            <div
                              className="row"
                              style={{
                                marginLeft: "0px",
                                marginRight: "0px",
                              }}
                            >
                              <div
                                className="col-md-12 claim-status-card"
                                style={{ height: "54px" }}
                              >
                                <label style={{ marginTop: "7px" }}>
                                  <b>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label
                                        .customerwanttoattachorder
                                      : "Customer Want to attach order"}
                                  </b>
                                </label>
                              </div>
                            </div>
                            <div
                              className="row m-t-10 m-b-10"
                              style={{
                                marginLeft: "0",
                                marginRight: "0",
                              }}
                            >
                              <div className="col-md-6">
                                <label className="orderdetailpopup">
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label.orderdetails
                                    : "Order Details"}
                                </label>
                              </div>
                              <div className="col-md-3">
                                <div
                                  style={{
                                    float: "right",
                                    display: "flex",
                                  }}
                                >
                                  <label className="orderdetailpopup">
                                    Source
                                  </label>
                                  <div
                                    className={"orderswitch orderswitchitem"}
                                  >
                                    <div className="switch switch-primary d-inline">
                                      <input
                                        type="checkbox"
                                        id="editTasks-p-10"
                                        checked={
                                          this.state.masterConfigrationUnknown
                                            .isUnknown
                                        }
                                        disabled
                                      />
                                      <label
                                        htmlFor="editTasks-p-10"
                                        className="cr ord"
                                      ></label>
                                    </div>
                                  </div>
                                  <label className="orderdetailpopup">
                                    Unknown
                                  </label>
                                </div>
                              </div>
                              <div className="col-md-3">
                                <div
                                  style={{
                                    float: "right",
                                    display: "flex",
                                  }}
                                >
                                  <label className="orderdetailpopup">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.order
                                      : "Order"}
                                  </label>
                                  <div
                                    className={
                                      this.state.isKB
                                        ? "orderswitch orderswitchitem iskbticket"
                                        : "orderswitch orderswitchitem"
                                    }
                                  >
                                    <div className="switch switch-primary d-inline">
                                      <input
                                        type="checkbox"
                                        id="editTasks-p-2"
                                        checked={this.state.OrdItmBtnStatus}
                                        onChange={this.handleChangeOrderItem}
                                      // disabled={this.state.isAttachProduct}
                                      // disabled={
                                      //   this.state.masterConfigrationUnknown
                                      //     .isUnknown
                                      // }
                                      />
                                      <label
                                        htmlFor="editTasks-p-2"
                                        className="cr ord"
                                      ></label>
                                    </div>
                                  </div>
                                  <label className="orderdetailpopup">
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.item
                                      : "Item"}
                                  </label>
                                </div>
                              </div>
                            </div>

                            <span className="linestore1"></span>
                            <div className="newtabstore">
                              <div className="tab-content tabcontentstore">
                                <div className="row align-items-center mr-0  myticket-order-header-div">
                                  {!this.state.isAttachProduct && (
                                    <ul
                                      className="nav alert-nav-tabs3 store-nav-tabs col-md-4"
                                      role="tablist"
                                    >
                                      {// this.state.SelectedAllOrder.length <= 0 &&
                                        !isDataAttached ? (
                                          <li className="nav-item fo">
                                            <a
                                              className="nav-link active"
                                              data-toggle="tab"
                                              href="#new_productdetail-tab"
                                              role="tab"
                                              aria-controls="new_productdetail-tab"
                                              aria-selected="true"
                                              onClick={this.handleSetDataTab}
                                            >
                                              {TranslationContext !== undefined
                                                ? TranslationContext.a
                                                  .productdetails
                                                : // : "Product Details"}
                                                "Order List"}
                                            </a>
                                          </li>
                                        ) : (
                                          //    : null}
                                          // {
                                          // this.state.SelectedAllOrder.length >
                                          //   0
                                          // this.state.selectedInvoiceNo !== "" && isDataAttached
                                          //   ?
                                          //   (
                                          <li className="nav-item fo">
                                            <a
                                              className="nav-link pt-2 pb-3"
                                              data-toggle="tab"
                                              href="#new_selectedproduct-tab"
                                              role="tab"
                                              aria-controls="new_selectedproduct-tab"
                                              aria-selected="false"
                                              onClick={this.handleSetDataTab}
                                            >
                                              {TranslationContext !== undefined
                                                ? TranslationContext.a
                                                  .selectedproduct
                                                : "Selected Order"}
                                            </a>
                                          </li>
                                        )
                                        // ) : null
                                      }
                                    </ul>
                                  )}
                                  {!this.state.orderDetailsData.length && (
                                    <div className="col-md-4">
                                      <button
                                        className="myticket-submit-solve-button"
                                        style={{
                                          marginLeft: "0px",
                                          width: "auto",
                                          minWidth: "190px",
                                        }}
                                        onClick={this.openAddOrder}
                                      >
                                        Add Manually
                                      </button>
                                    </div>
                                  )}
                                  {// !this.state.isAttachProduct &&
                                    !isDataAttached && (
                                      <div className="col-md-4 m-b-10 m-t-10 text-right">
                                        <button
                                          type="button"
                                          className={
                                            this.state.isKB
                                              ? "myticket-submit-solve-button m-0 iskbticket"
                                              : "myticket-submit-solve-button m-0"
                                          }
                                          onClick={this.handleAttacheProduct.bind(
                                            this
                                          )}
                                        >
                                          {TranslationContext !== undefined
                                            ? TranslationContext.button
                                              .attachproduct
                                            : "Attach Order"}
                                        </button>
                                      </div>
                                    )}
                                </div>
                              </div>
                            </div>
                            <span className="linestore2"></span>
                            <div className="tab-content p-0">
                              {/* {console.log(this.state.selectedInvoiceNo, "this.state.selectedInvoiceNo", this.state.CheckBoxAllItem, "this.state.CheckBoxAllItem", Object.keys(this.state.CheckBoxAllItem).length)} */}
                              {// this.state.SelectedAllOrder.length <=0
                                // this.state.selectedInvoiceNo === "" ||
                                !isDataAttached ? (
                                  // && (Object.keys(this.state.CheckBoxAllItem).length !== 0 ? Object.values(this.state.CheckBoxAllItem).every(item => item === false) : true)
                                  <div
                                    // className="tab-pane fade show active"
                                    id="new_productdetail-tab"
                                    // role="tabpanel"
                                    aria-labelledby="new_productdetail-tab"
                                  >
                                    <div
                                      className="reactstoreselect mystyle custom-react-table"
                                      id="ordertbls"
                                      style={{ display: "block" }}
                                    >
                                      {
                                        // !this.state.isAttachProduct ?
                                        <ReactTable
                                          data={this.state.orderDetailsData}
                                          columns={[
                                            {
                                              Header: <span></span>,
                                              accessor: "invoiceNumber",
                                              width: 20,
                                              Cell: (row) => (
                                                // <div className="filter-checkbox ">
                                                <div className="orders_radio_button">
                                                  <input
                                                    type="radio"
                                                    id={
                                                      "all" +
                                                      row.original.invoiceNumber
                                                    }
                                                    // style={{
                                                    //   display: "none",
                                                    // }}
                                                    name="AllOrder"
                                                    checked={this.state.selectedInvoiceNo.includes(
                                                      row.original.invoiceNumber
                                                    )}
                                                    onChange={(e) =>
                                                      this.newHandleGetOderItemData(
                                                        e,
                                                        row.original
                                                          .invoiceNumber,
                                                        row.original
                                                      )
                                                    }
                                                  // onChange={this.handleGetOderItemData.bind(
                                                  //   this,
                                                  //   row.original.invoiceNumber,
                                                  //   row.original
                                                  // )}
                                                  />
                                                  <label
                                                    htmlFor={
                                                      "all" +
                                                      row.original.invoiceNumber
                                                    }
                                                  ></label>
                                                </div>
                                              ),
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .invoicenumber
                                                    : "Invoice Number"}
                                                </span>
                                              ),
                                              accessor: "invoiceNumber",
                                              minWidth: 150,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .invoicedate
                                                    : "Invoice Date"}
                                                </span>
                                              ),
                                              accessor: "invoiceDate",
                                              minWidth: 120,
                                              Cell: (row) => {
                                                return row.original
                                                  .invoiceDate !== null
                                                  ? moment(
                                                    row.original.invoiceDate
                                                  ).format("Do/MMM/YYYY")
                                                  : "Not Added";
                                              },
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Sub Order ID"}
                                                </span>
                                              ),
                                              accessor: "subOrderID",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Batch No"}
                                                </span>
                                              ),
                                              accessor: "batchNo",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Product Bar Code"}
                                                </span>
                                              ),
                                              accessor: "productBarCode",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Product Name"}
                                                </span>
                                              ),
                                              accessor: "productName",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Category Name"}
                                                </span>
                                              ),
                                              accessor: "categoryName",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Manufacturing Date"}
                                                </span>
                                              ),
                                              accessor: "manufacturingDate",
                                              Cell: (row) =>
                                                row.original.manufacturingDate !==
                                                  null
                                                  ? moment(
                                                    row.original
                                                      .manufacturingDate
                                                  ).format("DD/MM/YYYY")
                                                  : "Not Added",

                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Expiry/Best Before Date"}
                                                </span>
                                              ),
                                              accessor: "expiryBestBeforeDate",
                                              Cell: (row) =>
                                                row.original
                                                  .expiryBestBeforeDate !== null
                                                  ? moment(
                                                    row.original
                                                      .expiryBestBeforeDate
                                                  ).format("DD/MM/YYYY")
                                                  : "Not Added",
                                              minWidth: 150,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {window.localStorage.getItem(
                                                    "Programcode"
                                                  ) === "campusshoes"
                                                    ? this.state.ticketFields.filter(
                                                      (x) =>
                                                        x.fieldName.toLowerCase() ===
                                                        "Channel Of Purchase".toLowerCase()
                                                    )[0]?.displayEnglishName
                                                    : TranslationContext !==
                                                      undefined
                                                      ? TranslationContext.span
                                                        .itemcount
                                                      : "Channel Of Purchase"}
                                                </span>
                                              ),
                                              accessor: "channelOfPurchaseID",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Mode Of Payment"}
                                                </span>
                                              ),
                                              accessor: "paymentModename",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Size"}
                                                </span>
                                              ),
                                              accessor: "size",
                                              minWidth: 90,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Resize"}
                                                </span>
                                              ),
                                              accessor: "requireSize",
                                              minWidth: 120,
                                            },

                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemcount
                                                    : "Item Count"}
                                                </span>
                                              ),
                                              accessor: "itemCount",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .itemprice
                                                    : "Item Price"}
                                                </span>
                                              ),
                                              accessor: "ordeItemPrice",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .pricepaid
                                                    : "Price Paid"}
                                                </span>
                                              ),
                                              accessor: "orderPricePaid",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .storecode
                                                    : "Store Code"}
                                                </span>
                                              ),
                                              accessor: "storeCode",
                                              minWidth: 120,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .storeaddress
                                                    : "Store Address"}
                                                </span>
                                              ),
                                              accessor: "storeAddress",
                                              minWidth: 300,
                                            },
                                            {
                                              Header: (
                                                <span>
                                                  {TranslationContext !==
                                                    undefined
                                                    ? TranslationContext.span
                                                      .discount
                                                    : "Discount"}
                                                </span>
                                              ),
                                              accessor: "discount",
                                              minWidth: 120,
                                            },
                                          ]}
                                          resizable={true}
                                          minRows={2}
                                          defaultPageSize={5}
                                          showPagination={
                                            data?.length > 5 ? true : false
                                          }
                                        />
                                        // :
                                        // <>
                                        //   <div>
                                        //     <a href="#" style={{ marginLeft: "10px" }} onClick={this.handleAttacheProduct.bind(
                                        //       this
                                        //     )}>Back</a>
                                        //     <div className="row" style={{
                                        //       width: "100%",
                                        //       margin: "10px",
                                        //       alignItems: "center"
                                        //     }}>
                                        //       <div className="col-md-2 form-group">
                                        //         <label className="form-label">Order Id</label>
                                        //         <h4>{this.state.selectedInvoiceNo}</h4>
                                        //       </div>
                                        //       <div className="col-md-3 form-group">
                                        //         <label className="form-label">Super Category</label>
                                        //         <select className="form-control"
                                        //           // value={
                                        //           //   this.state.selectedproduct.superCategory
                                        //           // }
                                        //           onChange={this.handelDropDownCatogary}
                                        //           name="superCategory"
                                        //         >
                                        //           <option>Select</option>
                                        //           {
                                        //             this.state.productCategory.map((data) => {
                                        //               return (
                                        //                 <option value={data.productCategoryID + "+" + data.productCategoryName}>
                                        //                   {data.productCategoryName}
                                        //                 </option>
                                        //               );
                                        //             })
                                        //           }
                                        //         </select>
                                        //         {/* <div className=""></div> */}
                                        //       </div>

                                        //       <div className="col-md-3 form-group" >
                                        //         <label className="form-label">Item Name</label>
                                        //         <select className="form-control"
                                        //           name="productDetail"
                                        //           // value={
                                        //           //   this.state.selectedproduct.productDetail
                                        //           // }
                                        //           onChange={this.handelDropDownCatogary}
                                        //         >
                                        //           {this.state.productDetail.length ?
                                        //             <>
                                        //               <option>{this.state.selectedproduct.productDetail && this.state.selectedproduct?.productDetail !== '' ? this.state.selectedproduct?.productDetail : 'Select'}</option>
                                        //               {this.state.productDetail.map((data) => {
                                        //                 return (
                                        //                   <>
                                        //                     <option value={data.productCategoryMappingId + "+" + data.productName + "+" + data.productNameId}>
                                        //                       {data.productName}
                                        //                     </option>
                                        //                   </>
                                        //                 );
                                        //               })}
                                        //             </> : <option>Select</option>}
                                        //         </select>
                                        //       </div>

                                        //       <div className="col-md-2 form-group" >
                                        //         <label className="form-label">Item No</label>
                                        //         <select className="form-control"
                                        //           name="codeName"
                                        //           // value={
                                        //           //   this.state.selectedproduct.codeName
                                        //           // }

                                        //           onChange={this.handelDropDownCatogary}

                                        //         >
                                        //           {this.state.itemCode.length ?
                                        //             <>
                                        //               <option>{this.state.selectedproduct.codeName && this.state.selectedproduct?.codeName !== '' ? this.state.selectedproduct?.codeName : 'Select'}</option>
                                        //               {this.state.itemCode.map((data) => {
                                        //                 return (
                                        //                   <>
                                        //                     <option onClick={this.handelDropDownCatogary} value={data.productCodeId + "+" + data.codeName}>
                                        //                       {data.codeName}
                                        //                     </option>
                                        //                   </>
                                        //                 );
                                        //               })}
                                        //             </>
                                        //             :
                                        //             <option>Select</option>
                                        //           }
                                        //         </select>
                                        //       </div>
                                        //       <div className="col-md-2 form-group">
                                        //         <button className="button" style={{ marginTop: "20px", cursor: "pointer" }} onClick={this.handelAddProduct}>Add</button>
                                        //       </div>
                                        //     </div>
                                        //   </div>

                                        //   {this.state.attchData.length > 0 &&
                                        //     <div className="px-4">
                                        //       <table>
                                        //         <thead>
                                        //           <th>Order Id</th>
                                        //           <th>Super Category</th>
                                        //           <th>Item Name</th>
                                        //           <th>Item Code</th>
                                        //           <th>Action</th>
                                        //         </thead>
                                        //         <tbody>

                                        //           {this.state.attchData.map((datas, index) => {
                                        //             return (
                                        //               <tr key={index}>
                                        //                 <td>{datas.invoiceNO ? datas.invoiceNO : datas.invoiceNumber}</td>
                                        //                 <td>{datas.superCategory}</td>
                                        //                 <td>{datas.productDetail}</td>
                                        //                 <td>{datas.codeName}</td>
                                        //                 <td>
                                        //                   <img onClick={() => this.handleDeleteItem(datas)}
                                        //                     src={BlackDeleteIcon}
                                        //                     alt="Pencile"
                                        //                     className="pencilImg"
                                        //                     title="Delete Product"
                                        //                   />
                                        //                 </td>
                                        //               </tr>
                                        //             );
                                        //           })}
                                        //         </tbody>
                                        //       </table>
                                        //     </div>
                                        //   }
                                        //   {this.state.attchData.length > 0 &&
                                        //     <div className="attach d-flex justify-content-end mb-3 mr-3">
                                        //       <button onClick={() => this.handleSaveProductInOrder()}>Attach</button>
                                        //     </div>
                                        //   }

                                        // </>
                                      }
                                    </div>

                                    <div
                                      className="reactstoreselect custom-react-table"
                                      id="orderitemtbl"
                                      style={{ display: "none" }}
                                    >
                                      <ReactTable
                                        data={this.state.orderDetailsData}
                                        expanded={this.state.expanded}
                                        // expanded={this.state.orderDetailsData[0]?.invoiceNumber === expandVal?"0":"1"}
                                        onExpandedChange={(
                                          newExpanded,
                                          index,
                                          event
                                        ) => {
                                          if (newExpanded[index[0]] === false) {
                                            newExpanded = {};
                                            console.log(
                                              "HI1",
                                              newExpanded,
                                              index,
                                              event
                                            );
                                          } else {
                                            console.log(
                                              "HI",
                                              this.state.orderDetailsData,
                                              newExpanded,
                                              index,
                                              event
                                            );

                                            if (
                                              this.state.selectedInvoiceNo !== ","
                                            ) {
                                              // this.handleGetOderItemData(
                                              //   // this.state.orderDetailsData[index]
                                              //   //   .invoiceNumber
                                              //   "",
                                              //   this.state.orderDetailsData[
                                              //   index
                                              //   ],
                                              //   {
                                              //     target: {
                                              //       checked: true,
                                              //     },
                                              //   }
                                              // );
                                              this.newHandleGetOderItemData(
                                                {
                                                  target: {
                                                    checked: true,
                                                    // checked: this.state.orderDetailsData[index]?.invoiceNumber === this.state.SelectedAllItem[0]?.invoiceNumber,
                                                  },
                                                },
                                                "",
                                                this.state.orderDetailsData[index]
                                              );
                                              // onChange={this.handleGetOderItemData.bind(
                                              //   this,
                                              //   row.original.invoiceNumber,
                                              //   row.original
                                              // )}
                                              // onChange={(e) => this.newHandleGetOderItemData(e, row.original.invoiceNumber, row.original)}
                                            }

                                            Object.keys(newExpanded).map((k) => {
                                              newExpanded[k] =
                                                parseInt(k) === index[0]
                                                  ? {}
                                                  : false;
                                            });
                                          }
                                          this.setState({
                                            ...this.state,
                                            expanded: newExpanded,
                                          });
                                        }}
                                        columns={[
                                          {
                                            Header: <span></span>,
                                            accessor: "invoiceNumber",
                                            width: 20,
                                            Cell: (row) => (
                                              <div className="filter-checkbox">
                                                {console.log(
                                                  this.state.SelectedAllItem[0]
                                                    ?.invoiceNumber,
                                                  "isItem"
                                                )}
                                                <input
                                                  type="checkbox"
                                                  id={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                  style={{
                                                    display: "none",
                                                  }}
                                                  name="AllOrderData"
                                                  checked={
                                                    this.state.SelectedAllItem[0]
                                                      ?.invoiceNumber ===
                                                      row.original?.invoiceNumber
                                                      ? true
                                                      : false
                                                  }
                                                  // checked={this.state.selectedInvoiceNo.includes(
                                                  //   row.original.invoiceNumber
                                                  // )}
                                                  // onChange={this.handleGetOderItemData.bind(
                                                  //   this,
                                                  //   row.original.invoiceNumber,
                                                  //   row.original
                                                  // )}
                                                  onChange={(e) =>
                                                    this.newHandleGetOderItemData(
                                                      e,
                                                      row.original.invoiceNumber,
                                                      row.original
                                                    )
                                                  }
                                                />
                                                <label
                                                  htmlFor={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                ></label>
                                              </div>
                                            ),
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicenumber
                                                  : "Invoice Number"}
                                              </span>
                                            ),
                                            accessor: "invoiceNumber",
                                            minWidth: 150,
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicedate
                                                  : "Invoice Date"}
                                              </span>
                                            ),
                                            accessor: "dateFormat",
                                            Cell: (row) => {
                                              return row.original.invoiceDate !==
                                                null
                                                ? moment(
                                                  row.original.invoiceDate
                                                ).format("Do/MMM/YYYY")
                                                : "Not Added";
                                            },
                                            minWidth: 120,
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemcount
                                                  : "Item Count"}
                                              </span>
                                            ),
                                            accessor: "itemCount",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemprice
                                                  : "Item Price"}
                                              </span>
                                            ),
                                            accessor: "ordeItemPrice",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .pricepaid
                                                  : "Price Paid"}
                                              </span>
                                            ),
                                            accessor: "orderPricePaid",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storecode
                                                  : "Store Code"}
                                              </span>
                                            ),
                                            accessor: "storeCode",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storeaddress
                                                  : "Store Address"}
                                              </span>
                                            ),
                                            accessor: "storeAddress",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .discount
                                                  : "Discount"}
                                              </span>
                                            ),
                                            accessor: "discount",
                                          },
                                        ]}
                                        resizable={false}
                                        minRows={2}
                                        defaultPageSize={5}
                                        showPagination={true}
                                        SubComponent={(row) => {
                                          return (
                                            <div
                                              className="inner-custom-react-table"
                                              id="inner-custom-react-table"
                                            >
                                              {
                                                // masterConfigrationUnknown is implemented in old design as it is for bloombay only for now
                                                // this.state.masterConfigrationUnknown.isUnknown ?
                                                //   <>
                                                //     {this.state.attchData.length > 0 &&
                                                //       <div className="px-4">
                                                //         <table>
                                                //           <thead>

                                                //             <th>Super Category</th>
                                                //             <th>Item Name</th>
                                                //             <th>Item Code</th>

                                                //           </thead>
                                                //           <tbody>

                                                //             {this.state.attchData.map((datas, index) => {
                                                //               return (
                                                //                 <tr key={index}>
                                                //                   <td>{datas.superCategory}</td>
                                                //                   <td>{datas.productDetail}</td>
                                                //                   <td>{datas.codeName}</td>
                                                //                 </tr>
                                                //               );
                                                //             })}
                                                //           </tbody>
                                                //         </table>
                                                //       </div>
                                                //     }
                                                //   </>
                                                //   :
                                                <ReactTable
                                                  // data={row.original.orderItems}
                                                  // data={this.state.OrderSubItem}
                                                  data={this.state.OrderSubItem.filter(
                                                    (x) =>
                                                      x.invoiceNumber ===
                                                      row.original.invoiceNumber
                                                  )}
                                                  columns={[
                                                    {
                                                      Header: <span> </span>,
                                                      accessor: "",
                                                      width: 20,
                                                      Cell: (rowData) => {
                                                        return (
                                                          <div className="filter-checkbox">
                                                            <input
                                                              type="checkbox"
                                                              id={
                                                                "item" +
                                                                rowData.original
                                                                  .orderItemID
                                                              }
                                                              style={{
                                                                display: "none",
                                                              }}
                                                              name="AllItem"
                                                              checked={
                                                                this.state
                                                                  .CheckBoxAllItem[
                                                                rowData.original
                                                                  .orderItemID
                                                                ] === true
                                                              }
                                                              onChange={() =>
                                                                this.checkmultiIndividualItem(
                                                                  rowData
                                                                    ?.original
                                                                    .orderItemID,
                                                                  rowData?.original
                                                                )
                                                              }
                                                            // onChange={this.checkmultiIndividualItem.bind(
                                                            //   this,
                                                            //   rowData?.original
                                                            //     .orderItemID,
                                                            //   rowData?.original
                                                            // )}
                                                            />
                                                            {/* {console.log(rowData?.original, "rowData?.original")} */}
                                                            <label
                                                              htmlFor={
                                                                "item" +
                                                                rowData.original
                                                                  .orderItemID
                                                              }
                                                            ></label>
                                                          </div>
                                                        );
                                                      },
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .span
                                                              .articlenumber
                                                            : "Article Number"}
                                                        </span>
                                                      ),
                                                      accessor: "articleNumber",
                                                      minWidth: 140,
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .span.articlename
                                                            : "Article Name"}
                                                        </span>
                                                      ),
                                                      accessor: "articleName",
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .ticketingDashboard
                                                              .articlemrp
                                                            : "Article MRP"}
                                                        </span>
                                                      ),
                                                      accessor: "itemPrice",
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .span.pricepaid
                                                            : "Price Paid"}
                                                        </span>
                                                      ),
                                                      accessor: "pricePaid",
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .span.discount
                                                            : "Discount"}
                                                        </span>
                                                      ),
                                                      accessor: "discount",
                                                    },
                                                    {
                                                      Header: (
                                                        <span>
                                                          {TranslationContext !==
                                                            undefined
                                                            ? TranslationContext
                                                              .ticketingDashboard
                                                              .requiredsize
                                                            : "Required Size"}
                                                        </span>
                                                      ),
                                                      accessor: "requireSize",
                                                      Cell: (rowData) => {
                                                        return (
                                                          <div
                                                            ref={
                                                              this.setWrapperRef
                                                            }
                                                          >
                                                            <input
                                                              type="text"
                                                              id={
                                                                "requireSizeTxt" +
                                                                rowData.original
                                                                  .articleNumber
                                                              }
                                                              value={
                                                                rowData.original
                                                                  .requireSize ||
                                                                ""
                                                              }
                                                              name="requiredSize"
                                                              className="order-input"
                                                              autoComplete="off"
                                                              ref={(input) => {
                                                                this.searchInput = input;
                                                              }}
                                                              onChange={() => {
                                                                this.handleRequireSize(
                                                                  this,
                                                                  rowData
                                                                );
                                                              }}
                                                            />
                                                          </div>
                                                        );
                                                      },
                                                    },
                                                  ]}
                                                  resizable={false}
                                                  defaultPageSize={5}
                                                  minRows={2}
                                                  showPagination={
                                                    this.state.OrderSubItem.filter(
                                                      (x) =>
                                                        x.invoiceNumber ===
                                                        row.original.invoiceNumber
                                                    )?.length > 5
                                                      ? true
                                                      : false
                                                  }
                                                />
                                              }
                                            </div>
                                          );
                                        }}
                                      />
                                    </div>
                                  </div>
                                ) : (
                                  <div
                                    // className="tab-pane fade"
                                    id="new_selectedproduct-tab"
                                    // role="tabpanel"
                                    aria-labelledby="new_selectedproduct-tab"
                                  >
                                    <div
                                      className="reactstoreselect custom-react-table"
                                      id="ordertbls1"
                                      style={{ display: "block" }}
                                    >
                                      <ReactTable
                                        data={this.state.SelectedAllOrder}
                                        // expanded={this.state.expanded}
                                        // onExpandedChange={(
                                        //   newExpanded,
                                        //   index,
                                        //   event
                                        // ) => {
                                        //   if (newExpanded[index[0]] === false) {
                                        //     newExpanded = {};
                                        //   } else {
                                        //     Object.keys(newExpanded).map((k) => {
                                        //       newExpanded[k] =
                                        //         parseInt(k) === index[0]
                                        //           ? {}
                                        //           : false;
                                        //     });
                                        //   }
                                        //   this.setState({
                                        //     ...this.state,
                                        //     expanded: newExpanded,
                                        //   });
                                        // }}
                                        columns={[
                                          // {
                                          //   Header: <span></span>,
                                          //   accessor: "",
                                          //   width: 10,
                                          //   Cell: (row) => (
                                          //     <label onClick={this.handleDeleteOrder.bind(this)}>X</label>
                                          //   )
                                          // },
                                          {
                                            Header: <span></span>,
                                            accessor: "invoiceNumber",
                                            width: 20,
                                            Cell: (row) => (
                                              // <div className="filter-checkbox">
                                              <div className="orders_radio_button">
                                                <input
                                                  type="checkbox"
                                                  id={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                  // style={{
                                                  //   display: "none",
                                                  // }}
                                                  name="AllOrder"
                                                  checked={this.state.selectedInvoiceNo.includes(
                                                    row.original.invoiceNumber
                                                  )}
                                                  // onChange={this.handleGetOderItemData.bind(
                                                  //   this,
                                                  //   row.original.invoiceNumber,
                                                  //   row.original
                                                  // )}
                                                  onChange={(e) =>
                                                    this.newhandleDeleteSelectedItem(
                                                      e,
                                                      row.original.invoiceNumber,
                                                      row.original
                                                    )
                                                  }
                                                />
                                                <label
                                                  htmlFor={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                ></label>
                                              </div>
                                            ),
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicenumber
                                                  : "Invoice Number"}
                                              </span>
                                            ),
                                            accessor: "invoiceNumber",
                                            minWidth: 150,
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicedate
                                                  : "Invoice Date"}
                                              </span>
                                            ),
                                            accessor: "dateFormat",
                                            Cell: (row) => {
                                              return row.original.dateFormat !==
                                                null
                                                ? moment(
                                                  row.original.invoiceDate
                                                ).format("Do/MMM/YYYY")
                                                : "Not Added";
                                            },
                                            minWidth: 120,
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemcount
                                                  : "Item Count"}
                                              </span>
                                            ),
                                            accessor: "itemCount",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemprice
                                                  : "Item Price"}
                                              </span>
                                            ),
                                            accessor: "ordeItemPrice",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .pricepaid
                                                  : "Price Paid"}
                                              </span>
                                            ),
                                            accessor: "orderPricePaid",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storecode
                                                  : "Store Code"}
                                              </span>
                                            ),
                                            accessor: "storeCode",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storeaddress
                                                  : "Store Address"}
                                              </span>
                                            ),
                                            accessor: "storeAddress",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .discount
                                                  : "Discount"}
                                              </span>
                                            ),
                                            accessor: "discount",
                                          },
                                        ]}
                                        resizable={false}
                                        minRows={2}
                                        defaultPageSize={5}
                                        showPagination={
                                          this.state.SelectedAllOrder?.length > 5
                                            ? true
                                            : false
                                        }
                                      />
                                    </div>
                                    <div
                                      className="reactstoreselect custom-react-table"
                                      id="new_Orderitemtbl1"
                                      style={{ display: "none" }}
                                    >
                                      <ReactTable
                                        data={this.state.SelectedAllOrder}
                                        expanded={this.state.expanded}
                                        onExpandedChange={(
                                          newExpanded,
                                          index,
                                          event
                                        ) => {
                                          if (newExpanded[index[0]] === false) {
                                            newExpanded = {};
                                          } else {
                                            this.newOpenSelectedItemData(
                                              {
                                                target: {
                                                  checked: true,
                                                },
                                              },
                                              this.state.SelectedAllOrder[index]
                                                ?.invoiceNumber,
                                              this.state.SelectedAllOrder[index]
                                            );
                                            Object.keys(newExpanded).map((k) => {
                                              newExpanded[k] =
                                                parseInt(k) === index[0]
                                                  ? {}
                                                  : false;
                                            });
                                          }
                                          this.setState({
                                            ...this.state,
                                            expanded: newExpanded,
                                          });
                                        }}
                                        columns={[
                                          {
                                            Header: <span></span>,
                                            accessor: "invoiceNumber",
                                            width: 20,
                                            Cell: (row) => (
                                              <div className="filter-checkbox">
                                                <input
                                                  type="checkbox"
                                                  id={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                  style={{
                                                    display: "none",
                                                  }}
                                                  name="AllOrder"
                                                  checked={this.state.selectedInvoiceNo.includes(
                                                    row.original.invoiceNumber
                                                  )}
                                                  // onChange={this.handleGetOderItemData.bind(
                                                  //   this,
                                                  //   row.original.invoiceNumber,
                                                  //   row.original
                                                  // )}

                                                  // new order change handler for
                                                  onChange={(e) =>
                                                    this.newHandleGetOderItemData(
                                                      e,
                                                      row.original.invoiceNumber,
                                                      row.original
                                                    )
                                                  }
                                                />
                                                <label
                                                  htmlFor={
                                                    "all" +
                                                    row.original.invoiceNumber
                                                  }
                                                ></label>
                                              </div>
                                            ),
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicenumber
                                                  : "Invoice Number"}
                                              </span>
                                            ),
                                            accessor: "invoiceNumber",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .invoicedate
                                                  : "Invoice Date"}
                                              </span>
                                            ),
                                            accessor: "invoiceDate",
                                            Cell: (row) => {
                                              return row.original.invoiceDate !==
                                                null
                                                ? moment(
                                                  row.original.invoiceDate
                                                ).format("Do/MMM/YYYY")
                                                : "Not Added";
                                            },
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemcount
                                                  : "Item Count"}
                                              </span>
                                            ),
                                            accessor: "itemCount",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .itemprice
                                                  : "Item Price"}
                                              </span>
                                            ),
                                            accessor: "ordeItemPrice",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .pricepaid
                                                  : "Price Paid"}
                                              </span>
                                            ),
                                            accessor: "orderPricePaid",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storecode
                                                  : "Store Code"}
                                              </span>
                                            ),
                                            accessor: "storeCode",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .storeaddress
                                                  : "Store Address"}
                                              </span>
                                            ),
                                            accessor: "storeAddress",
                                          },
                                          {
                                            Header: (
                                              <span>
                                                {TranslationContext !== undefined
                                                  ? TranslationContext.span
                                                    .discount
                                                  : "Discount"}
                                              </span>
                                            ),
                                            accessor: "discount",
                                          },
                                        ]}
                                        minRows={2}
                                        defaultPageSize={5}
                                        showPagination={
                                          this.state.SelectedAllOrder?.length > 5
                                            ? true
                                            : false
                                        }
                                        SubComponent={(row) => {
                                          return (
                                            <div
                                              className="inner-custom-react-table"
                                              id="inner-custom-react-table"
                                            >
                                              <ReactTable
                                                data={
                                                  this.state.OrderSubItem
                                                  //   .filter(
                                                  //   (x) =>
                                                  //     x.invoiceNumber ===
                                                  //     row.original.invoiceNumber
                                                  // )
                                                }
                                                columns={[
                                                  // {
                                                  //   Header: <span></span>,
                                                  //   accessor: "size",
                                                  //   width: 20,
                                                  //   Cell: (rowData) => (
                                                  //     <div className="filter-checkbox">
                                                  //       <input
                                                  //         type="checkbox"
                                                  //         id={
                                                  //           "item" +
                                                  //           rowData.original
                                                  //             .orderItemID
                                                  //         }
                                                  //         style={{
                                                  //           display: "none",
                                                  //         }}
                                                  //         name="AllItem"
                                                  //         checked={
                                                  //           this.state
                                                  //             .CheckBoxAllItem[
                                                  //           rowData.original
                                                  //             .orderItemID
                                                  //           ] === true
                                                  //         }
                                                  //         onChange={() => this.checkmultiIndividualItem(rowData?.original.orderItemID, rowData?.original)}
                                                  //       // onChange={this.checkIndividualItem.bind(
                                                  //       //   this,
                                                  //       //   rowData.original
                                                  //       //     .articleNumber,
                                                  //       //   rowData.original
                                                  //       // )}
                                                  //       />
                                                  //       <label
                                                  //         htmlFor={
                                                  //           "item" +
                                                  //           rowData.original
                                                  //             .orderItemID
                                                  //         }
                                                  //       ></label>
                                                  //     </div>
                                                  //   ),
                                                  // },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .span.articlenumber
                                                          : "Article Number"}
                                                      </span>
                                                    ),
                                                    accessor: "articleNumber",
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .span.articlename
                                                          : "Article Name"}
                                                      </span>
                                                    ),
                                                    accessor: "articleName",
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .ticketingDashboard
                                                            .articlemrp
                                                          : "Article MRP"}
                                                      </span>
                                                    ),
                                                    accessor: "itemPrice",
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .span.pricepaid
                                                          : "Price Paid"}
                                                      </span>
                                                    ),
                                                    accessor: "pricePaid",
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .span.discount
                                                          : "Discount"}
                                                      </span>
                                                    ),
                                                    accessor: "discount",
                                                    sortable: true,
                                                  },
                                                  {
                                                    Header: (
                                                      <span>
                                                        {TranslationContext !==
                                                          undefined
                                                          ? TranslationContext
                                                            .ticketingDashboard
                                                            .requiredsize
                                                          : "Required Size"}
                                                      </span>
                                                    ),
                                                    accessor: "requireSize",
                                                    Cell: (row) => {
                                                      return (
                                                        <div
                                                          ref={this.setWrapperRef}
                                                        >
                                                          <input
                                                            type="text"
                                                            id={
                                                              "requireSizeTxt" +
                                                              row.original
                                                                .articleNumber
                                                            }
                                                            className="order-input"
                                                            value={
                                                              row.original
                                                                .requireSize || ""
                                                            }
                                                            name="requiredSize"
                                                            autoComplete="off"
                                                            ref={(input) => {
                                                              this.searchInput = input;
                                                            }}
                                                            onChange={() => {
                                                              this.handleRequireSize(
                                                                this,
                                                                row
                                                              );
                                                            }}
                                                          />
                                                        </div>
                                                      );
                                                    },
                                                  },
                                                ]}
                                                defaultPageSize={5}
                                                showPagination={
                                                  this.state.OrderSubItem
                                                    ?.length > 5
                                                    ? true
                                                    : false
                                                }
                                                minRows={2}
                                              />
                                            </div>
                                          );
                                        }}
                                      />
                                    </div>
                                  </div>
                                )}
                            </div>
                          </div>
                        ) : (
                          <>
                            {selectedWebsiteOrder.length ? (
                              <div>
                                <label
                                  style={{
                                    fontWeight: 600,
                                    marginBottom: "10px",
                                  }}
                                >
                                  Selected Order
                                </label>
                                <div
                                  className="order_summary"
                                  id="attachedData_accordion_order"
                                >
                                  {/* {console.log(orderList, orderList.length)} */}
                                  {attachedWebData.length ? (
                                    attachedWebData.map((ele, i) => {
                                      return (
                                        <div
                                          className="single_order_data"
                                          key={i}
                                        >
                                          <div className="card-link d-flex">
                                            <input
                                              className="deselect_attachment"
                                              type="checkBox"
                                              defaultChecked
                                              onChange={
                                                this.handleDeleteOminiOrder
                                              }
                                            />
                                            <img
                                              className="px-2 order_expand right_icon"
                                              data-toggle="collapse"
                                              href={"#" + ele.orderId}
                                              src={tringleRight}
                                              alt=""
                                            />
                                            <div className="row">
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Order Id:
                                                </label>
                                                {ele.orderId}
                                              </div>
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Date:
                                                </label>
                                                {this.formatDate(ele.orderDate)}
                                              </div>
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Mobile No:
                                                </label>
                                                {
                                                  ele.customerDetails
                                                    ?.mobileNumber
                                                }
                                              </div>
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Delivery Address:
                                                </label>
                                                {
                                                  ele.metadata
                                                    ?.billing_address_address_line1
                                                }
                                              </div>
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Order Type:
                                                </label>
                                                {ele.metadata?.shipmentName !==
                                                  null
                                                  ? ele.metadata?.shipmentName
                                                  : "---"}
                                              </div>
                                              <div className="col-2">
                                                <label className="order_label">
                                                  Email:{" "}
                                                </label>
                                                {ele.customerDetails?.emailId}
                                              </div>
                                            </div>
                                          </div>
                                          {/* </div> */}
                                          <div
                                            id={ele.orderId}
                                            className="collapse"
                                            data-parent="#attachedData_accordion_order"
                                          >
                                            <div className="order_details">
                                              <ul
                                                className="nav"
                                                role="tablist"
                                              >
                                                <li className="nav-item">
                                                  <a
                                                    className="nav-link active"
                                                    data-toggle="tab"
                                                    href="#order_deatil_selected"
                                                    role="tab"
                                                    aria-controls="order_deatil_selected"
                                                    aria-selected="false"
                                                  >
                                                    Order Details
                                                  </a>
                                                </li>
                                                <li className="nav-item">
                                                  <a
                                                    className="nav-link"
                                                    data-toggle="tab"
                                                    href="#subOrder_detail_selected"
                                                    role="tab"
                                                    aria-controls="subOrder_detail_selected"
                                                  >
                                                    Sub Order Details
                                                  </a>
                                                </li>
                                                {/* <li className="nav-item">
                                                    <a className="nav-link" data-toggle="tab"
                                                      href="#shiprocket-tab"
                                                      role="tab"
                                                      aria-controls="shiprocket-tab">Shiprocket Tab</a>
                                                  </li> */}
                                              </ul>
                                              <div className="tab-content ">
                                                <div
                                                  className="tab-pane fade show active"
                                                  id="order_deatil_selected"
                                                  role="tabpanel"
                                                  aria-labelledby="order_deatil_selected"
                                                >
                                                  <div
                                                    className="order_des"
                                                    id="accordion_orderDes"
                                                  >
                                                    <div className="single_order_data">
                                                      <div
                                                        className="gen_info_head"
                                                        data-toggle="collapse"
                                                        href="#gen_info_desc"
                                                      >
                                                        <label>
                                                          GENERAL INFO
                                                        </label>
                                                        <img
                                                          className="right_icon"
                                                          src={tringleRight}
                                                          alt=""
                                                        />
                                                      </div>
                                                      <div
                                                        id="gen_info_desc"
                                                        className="all_detail_div collapse"
                                                        data-parent="#accordion_orderDes"
                                                      >
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              Oredr Id:
                                                            </label>
                                                            <span>
                                                              {ele.orderId}
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Order Date:
                                                            </label>
                                                            <span>
                                                              {this.formatDate(
                                                                ele.orderDate
                                                              )}
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Order Channel:
                                                            </label>
                                                            <span>
                                                              {ele.orderChannel}
                                                            </span>
                                                          </div>
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>
                                                            Customer Details
                                                          </h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                Name:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .customerDetails
                                                                    .customerName
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Mobile Number:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .customerDetails
                                                                    .mobileNumber
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Email Id:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .customerDetails
                                                                    .emailId
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>Order Status</h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>Id:</label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .id
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Order Status:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .orderStatus
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Status Type:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .orderStatusType
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Status To
                                                                Customer:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .orderStatusToCustomer
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Status To Oms:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .orderStatusToOms
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Color Code:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .orderStatus
                                                                    .colorCode
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>

                                                        <div className="customer_detail">
                                                          <h3>Metadata</h3>
                                                          {ele.metadata !==
                                                            undefined &&
                                                            ele.metadata !==
                                                            null ? (
                                                            <div className="row">
                                                              {Object.entries(
                                                                ele.metadata
                                                              ).map(
                                                                ([
                                                                  key,
                                                                  value,
                                                                ]) => {
                                                                  return (
                                                                    <div className="col-4">
                                                                      <label>
                                                                        {this.handleSpaces(
                                                                          key
                                                                        )}
                                                                        :
                                                                      </label>
                                                                      {(typeof value !==
                                                                        "object" ||
                                                                        value ===
                                                                        null) && (
                                                                          <span>
                                                                            {value ===
                                                                              true
                                                                              ? "true"
                                                                              : value ===
                                                                                false
                                                                                ? "false"
                                                                                : value}
                                                                          </span>
                                                                        )}
                                                                    </div>
                                                                  );
                                                                }
                                                              )}
                                                            </div>
                                                          ) : (
                                                            <p className="noData_div p-1">
                                                              {" "}
                                                              {
                                                                "No Data Available"
                                                              }{" "}
                                                            </p>
                                                          )}
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>
                                                            Payment Split Ratio
                                                            J S O N
                                                          </h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                POINTES:
                                                              </label>
                                                              <span>
                                                                {"Data"}
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                CARD:
                                                              </label>
                                                              <span>
                                                                {"Data"}
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                VOUCHER:
                                                              </label>
                                                              <span>
                                                                {"Data"}
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                COD:
                                                              </label>
                                                              <span>
                                                                {"Data"}
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                    <div className="single_order_data">
                                                      <div
                                                        className="gen_info_head"
                                                        data-toggle="collapse"
                                                        href="#pricing_detail"
                                                      >
                                                        <label>
                                                          PRICING DETAILS
                                                        </label>
                                                        <img
                                                          className="right_icon"
                                                          src={tringleRight}
                                                          alt=""
                                                        />
                                                      </div>
                                                      <div
                                                        id="pricing_detail"
                                                        className="all_detail_div collapse"
                                                        data-parent="#accordion_orderDes"
                                                      >
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              Trade SP:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.tradeSP
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Loyalty Used:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.loyaltyUsed
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Sgst
                                                              Amount::
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalSgstAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              NetAmount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.netAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Igst Amount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalIgstAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total SP:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalSP
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Amount With
                                                              Shipping:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalAmountWithShipping
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Tax:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalTax
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Cess Amount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalCessAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Utgst
                                                              Amount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalUtgstAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Cgst Amount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalCgstAmount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Shipping Charge:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.shippingCharge
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>
                                                            Total NNNow Cash
                                                            Details
                                                          </h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                Product NNNow
                                                                Cash:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .totalPricingDetails
                                                                    ?.totalNNNowCashDetails
                                                                    ?.productNNNowCash
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Cart NNNow Cash:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .totalPricingDetails
                                                                    ?.totalNNNowCashDetails
                                                                    ?.cartNNNowCash
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Total NNNow
                                                                Cash:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .totalPricingDetails
                                                                    ?.totalNNNowCashDetails
                                                                    ?.totalNNNowCash
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>
                                                            Total Discount
                                                            Details
                                                          </h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                Product
                                                                Discount:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .totalPricingDetails
                                                                    ?.totalDiscountDetails
                                                                    ?.productDiscount
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Total Discount:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .totalPricingDetails
                                                                    ?.totalDiscountDetails
                                                                    ?.totalDiscount
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>
                                                        <div className="customer_detail">
                                                          <h3>
                                                            Payment Summary
                                                          </h3>
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                Paid_at_source:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .paymentSummary
                                                                    ?.paid_at_source
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                </div>
                                                <div
                                                  className="tab-pane fade"
                                                  id="subOrder_detail_selected"
                                                  role="tabpanel"
                                                  aria-labelledby="subOrder_detail_selected"
                                                >
                                                  {/* sub order start */}
                                                  {ele.consignments.length !==
                                                    0 ? (
                                                    <div>
                                                      {ele.consignments.length >
                                                        0 && (
                                                          <div className="subOrder_pagination">
                                                            <label>
                                                              Showing{" "}
                                                              {currentSubOrder +
                                                                1}{" "}
                                                              of{" "}
                                                              {
                                                                ele.consignments
                                                                  .length
                                                              }
                                                            </label>
                                                            <button
                                                              disabled={
                                                                currentSubOrder ===
                                                                  0
                                                                  ? true
                                                                  : false
                                                              }
                                                              onClick={() => {
                                                                this.handleSubOderPagination(
                                                                  "prev"
                                                                );
                                                              }}
                                                            >
                                                              ❮
                                                            </button>
                                                            <button
                                                              disabled={
                                                                currentSubOrder ===
                                                                  ele.consignments
                                                                    .length -
                                                                  1
                                                                  ? true
                                                                  : false
                                                              }
                                                              onClick={() => {
                                                                this.handleSubOderPagination(
                                                                  "next"
                                                                );
                                                              }}
                                                            >
                                                              ❯
                                                            </button>
                                                          </div>
                                                        )}
                                                      {/* {subOrderShow === 'defaultShow' ? */}
                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "defaultShow"
                                                            ? "order_des"
                                                            : "d-none"
                                                        }
                                                        id="accordion_suborderDes"
                                                      >
                                                        <div className="single_order_data">
                                                          <div
                                                            className="gen_info_head"
                                                            data-toggle="collapse"
                                                            href="#gen_info_subDesc"
                                                          >
                                                            <label>
                                                              GENERAL INFO
                                                            </label>
                                                            <img
                                                              className="right_icon"
                                                              src={tringleRight}
                                                              alt=""
                                                            />
                                                          </div>
                                                          <div
                                                            id="gen_info_subDesc"
                                                            className="all_detail_div collapse"
                                                            data-parent="#accordion_suborderDes"
                                                          >
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Consignment
                                                                  Id:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      .consignmentId
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Item Count:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]?.itemCount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Sla End Time:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.slaEndTime
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Consignment
                                                                States DTO
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Id:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.id
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Name:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.name
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Type:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.type
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Status To
                                                                    Customer:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.statusToCustomer
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Status To
                                                                    Oms:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.statusToOms
                                                                    }
                                                                  </span>
                                                                </div>
                                                                {/* ps: I know color is given to show consignmentstate NAME :) */}
                                                                <div className="col-4">
                                                                  <label>
                                                                    Color Code:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.colorCode
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Processing
                                                                    Sequence:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.consignmentStatesDTO
                                                                        ?.processingSequence
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Address Details
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    City:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.city
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    State:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.state
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Country:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.country
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Pincode:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.pincode
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Mobile
                                                                    Number:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.mobileNumber
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Mobile
                                                                    Number
                                                                    Country
                                                                    Code:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.mobileNumberCountryCallingCode
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Address_line1:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.address_line1
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Full
                                                                    Address:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.addressDetails
                                                                        ?.fullAddress
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>Ff Type</h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Ff Type:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]?.ffType
                                                                        ?.ffType
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Type:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]?.ffType
                                                                        ?.type
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Logistics
                                                                Details
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Airway Bill
                                                                    Number:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.logisticsDetails
                                                                        ?.airwayBillNumber
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Tracking
                                                                    Link:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.logisticsDetails
                                                                        ?.trackingLink
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Promise
                                                                    Date:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.logisticsDetails
                                                                        ?.promiseDate
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Logistics
                                                                    Partner:
                                                                  </label>
                                                                  {/* <span>key not there</span> */}
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.logisticsDetails
                                                                        ?.logisticsPartner
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>Ff Center</h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Fc Id:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.ffCenter
                                                                        ?.fcid
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Fc Name:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .consignments[
                                                                        currentSubOrder
                                                                      ]
                                                                        ?.ffCenter
                                                                        ?.fcName
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                        <div className="single_order_data">
                                                          <div
                                                            className="gen_info_head"
                                                            data-toggle="collapse"
                                                            href="#sub_order_detail"
                                                          >
                                                            <label>
                                                              SUB ORDER
                                                            </label>
                                                            <img
                                                              className="right_icon"
                                                              src={tringleRight}
                                                              alt=""
                                                            />
                                                          </div>
                                                          <div
                                                            id="sub_order_detail"
                                                            className="all_detail_div collapse"
                                                            data-parent="#accordion_suborderDes"
                                                          >
                                                            <div
                                                              className="subOrder_items"
                                                              id="accordion_suborderItems"
                                                            >
                                                              {ele.consignments[
                                                                currentSubOrder
                                                              ]?.items
                                                                .length !== 0 &&
                                                                ele.consignments[
                                                                  currentSubOrder
                                                                ].items.map(
                                                                  (
                                                                    item,
                                                                    index
                                                                  ) => {
                                                                    return (
                                                                      <div
                                                                        className="subOrder_item"
                                                                        key={
                                                                          index
                                                                        }
                                                                      >
                                                                        <label
                                                                          className="item_id_div"
                                                                          data-toggle="collapse"
                                                                          href={
                                                                            "#sub_order_itemDetail" +
                                                                            index
                                                                          }
                                                                        >
                                                                          {" "}
                                                                          {item.itemId +
                                                                            " (" +
                                                                            item
                                                                              .product
                                                                              ?.description +
                                                                            ")"}
                                                                        </label>
                                                                        <div
                                                                          className="collapse"
                                                                          id={
                                                                            "sub_order_itemDetail" +
                                                                            index
                                                                          }
                                                                          data-parent="#accordion_suborderItems"
                                                                        >
                                                                          <div className="sync_button mb-1">
                                                                            <button
                                                                              onClick={() =>
                                                                                this.handleGetOrderList(
                                                                                  ele.orderId
                                                                                )
                                                                              }
                                                                            >
                                                                              <img
                                                                                src={
                                                                                  white_sync
                                                                                }
                                                                                alt=""
                                                                              />
                                                                              Sync
                                                                              ticket
                                                                              fields
                                                                            </button>
                                                                          </div>
                                                                          <div className="row">
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Item
                                                                                Id:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.itemId
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label
                                                                                className="check_eleg"
                                                                                onClick={() =>
                                                                                  this.checkCancelReturEligbile(
                                                                                    "cancellation",
                                                                                    item.itemId
                                                                                  )
                                                                                }
                                                                              >
                                                                                Eligbile
                                                                                For
                                                                                Cancellation:
                                                                              </label>
                                                                              <span>
                                                                                {item.eligibleForCancellation
                                                                                  ? "true"
                                                                                  : "false"}
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label
                                                                                className="check_eleg"
                                                                                onClick={() =>
                                                                                  this.checkCancelReturEligbile(
                                                                                    "returns",
                                                                                    item.itemId
                                                                                  )
                                                                                }
                                                                              >
                                                                                Eligbile
                                                                                For
                                                                                Return:
                                                                              </label>
                                                                              <span>
                                                                                {item.eligibleForReturn
                                                                                  ? "true"
                                                                                  : "false"}
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Return
                                                                                Id:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.returnId
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Return
                                                                                Status:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.returnStatus
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Refund
                                                                                Mode:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.refundMode
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Neft
                                                                                Id
                                                                                Linked:
                                                                              </label>
                                                                              <span>
                                                                                {item.neftIdLinked
                                                                                  ? "true"
                                                                                  : "false"}
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Refund
                                                                                Amount:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.refundAmount
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Refund
                                                                                Status:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.refundStatus
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <label>
                                                                                Ref
                                                                                No:
                                                                              </label>
                                                                              <span>
                                                                                {
                                                                                  item.refundRefNumber
                                                                                }
                                                                              </span>
                                                                            </div>
                                                                          </div>
                                                                          <div className="row cancel_return">
                                                                            <div className="col-4">
                                                                              <button
                                                                                disabled={
                                                                                  !item.eligibleForCancellation
                                                                                }
                                                                                className={
                                                                                  item.eligibleForCancellation
                                                                                    ? "check_eleg"
                                                                                    : "check_eleg disable"
                                                                                }
                                                                                onClick={() => {
                                                                                  this.getCancelData(
                                                                                    item,
                                                                                    "cancelItem"
                                                                                  );
                                                                                }}
                                                                              >
                                                                                Cancel
                                                                                Item
                                                                              </button>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <button
                                                                                className="check_eleg"
                                                                                onClick={() => {
                                                                                  this.getItemHistory(
                                                                                    item.orderItemHistory,
                                                                                    "itemhistory"
                                                                                  );
                                                                                }}
                                                                              >
                                                                                Item
                                                                                History
                                                                              </button>
                                                                            </div>
                                                                            <div className="col-4">
                                                                              <button
                                                                                disabled={
                                                                                  !item.eligibleForReturn
                                                                                }
                                                                                className={
                                                                                  item.eligibleForReturn
                                                                                    ? "check_eleg"
                                                                                    : "check_eleg disable"
                                                                                }
                                                                                onClick={() => {
                                                                                  this.getReturnData(
                                                                                    item,
                                                                                    "returnItem"
                                                                                  );
                                                                                }}
                                                                              >
                                                                                Return
                                                                                Item
                                                                              </button>
                                                                            </div>
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Metadata
                                                                            </h3>
                                                                            {item.metadata !==
                                                                              undefined &&
                                                                              item.metadata !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.metadata
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {this.handleSpaces(
                                                                                            key
                                                                                          )}

                                                                                          :
                                                                                        </label>
                                                                                        {(typeof value !==
                                                                                          "object" ||
                                                                                          value ===
                                                                                          null) && (
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          )}
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <p className="noData_div p-1">
                                                                                {" "}
                                                                                {
                                                                                  "No Data Available"
                                                                                }{" "}
                                                                              </p>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Return
                                                                              Metadata
                                                                            </h3>
                                                                            {item.refundMode !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.metadata
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Product
                                                                            </h3>
                                                                            {item.product !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.product
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Item
                                                                              Status
                                                                            </h3>
                                                                            {item.itemStatus !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.itemStatus
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Return
                                                                              Logistics
                                                                              Details
                                                                            </h3>
                                                                            {item.returnLogisticsDetails !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.returnLogisticsDetails
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3 className="mb-2">
                                                                              Refund
                                                                              Ratio
                                                                            </h3>
                                                                            {item.refundRatio !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.refundRatio
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    return (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                          <div className="customer_detail">
                                                                            <h3>
                                                                              Item
                                                                              Pricing
                                                                              Details
                                                                            </h3>
                                                                            {item.itemPricingDetails !==
                                                                              null ? (
                                                                              <div className="row">
                                                                                {Object.entries(
                                                                                  item.itemPricingDetails
                                                                                ).map(
                                                                                  ([
                                                                                    key,
                                                                                    value,
                                                                                  ]) => {
                                                                                    // value === null&& console.log(typeof(value));
                                                                                    return (
                                                                                      (typeof value !==
                                                                                        "object" ||
                                                                                        value ===
                                                                                        null) && (
                                                                                        <div className="col-4">
                                                                                          <label>
                                                                                            {
                                                                                              key
                                                                                            }

                                                                                            :
                                                                                          </label>
                                                                                          <span>
                                                                                            {value ===
                                                                                              true
                                                                                              ? "true"
                                                                                              : value ===
                                                                                                false
                                                                                                ? "false"
                                                                                                : value}
                                                                                          </span>
                                                                                        </div>
                                                                                      )
                                                                                    );
                                                                                  }
                                                                                )}
                                                                              </div>
                                                                            ) : (
                                                                              <div className="d-flex justify-content-center">
                                                                                No
                                                                                data
                                                                                available!
                                                                              </div>
                                                                            )}
                                                                          </div>
                                                                        </div>
                                                                      </div>
                                                                    );
                                                                  }
                                                                )}
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      {/* :
                                                subOrderShow === "cancellation" ? */}
                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "cancellation"
                                                            ? "all_detail_div refund_cancel_div"
                                                            : "d-none"
                                                        }
                                                      >
                                                        <button
                                                          className="back_button"
                                                          onClick={() => {
                                                            this.getDefaultSubOrderView(
                                                              "defaultShow"
                                                            );
                                                          }}
                                                        >
                                                          <img
                                                            src={blueLeftArrow}
                                                            alt=""
                                                          />
                                                          back
                                                        </button>
                                                        <div className="cancel_refund_div">
                                                          <h3>
                                                            Cancellation
                                                            Eligibility
                                                          </h3>
                                                          <div className="row align-items-baseline">
                                                            <div className="col-4">
                                                              <label>
                                                                Cancellable:
                                                              </label>
                                                              <span>
                                                                {cancelEligbleDetail.cancellable
                                                                  ? "true"
                                                                  : "false"}
                                                              </span>
                                                            </div>
                                                            <div className="col-8">
                                                              <label>
                                                                Reason:
                                                              </label>
                                                              <span>
                                                                {
                                                                  cancelEligbleDetail.reason
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                          <div className="refund_ratio p-3">
                                                            <h4 className="mb-2">
                                                              Refund Ratio
                                                            </h4>
                                                            <div className="d-flex justify-content-center">
                                                              No Record
                                                              Found...!
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      {/* :
                                                subOrderShow === "returns" ? */}
                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "returns"
                                                            ? "all_detail_div refund_cancel_div"
                                                            : "d-none"
                                                        }
                                                      >
                                                        <button
                                                          className="back_button"
                                                          onClick={() => {
                                                            this.getDefaultSubOrderView(
                                                              "defaultShow"
                                                            );
                                                          }}
                                                        >
                                                          <img
                                                            src={blueLeftArrow}
                                                            alt=""
                                                          />
                                                          back
                                                        </button>
                                                        <div className="cancel_refund_div">
                                                          <h3>
                                                            Return Eligibility
                                                          </h3>
                                                          <div className="row align-items-baseline">
                                                            <div className="col-4">
                                                              <label>
                                                                Returnable:
                                                              </label>
                                                              <span>
                                                                {returnEligbleDetail.returnable
                                                                  ? "true"
                                                                  : "false"}
                                                              </span>
                                                            </div>
                                                            <div className="col-8">
                                                              <label>
                                                                Reason:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnEligbleDetail.reason
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                          <div className="refund_ratio px-2">
                                                            <h4 className="mb-2">
                                                              Refund Ratio
                                                            </h4>
                                                            <div className="d-flex justify-content-center">
                                                              No Record
                                                              Found...!
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>

                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "itemhistory"
                                                            ? "item_history_div"
                                                            : "d-none"
                                                        }
                                                      >
                                                        <button
                                                          className="back_button"
                                                          onClick={() => {
                                                            this.getDefaultSubOrderView(
                                                              "defaultShow"
                                                            );
                                                          }}
                                                        >
                                                          <img
                                                            src={blueLeftArrow}
                                                            alt=""
                                                          />
                                                          back
                                                        </button>
                                                        <div className="item_history_map">
                                                          {itemOrderHistory.map(
                                                            (data, ind) => {
                                                              return (
                                                                <div className="history_card">
                                                                  <div className="history_detail">
                                                                    {Object.entries(
                                                                      data
                                                                    ).map(
                                                                      ([
                                                                        key,
                                                                        value,
                                                                      ]) => {
                                                                        return (
                                                                          <div className="d-flex pb-1">
                                                                            <label>
                                                                              {this.handleSpaces(
                                                                                key
                                                                              )}
                                                                              :{" "}
                                                                            </label>
                                                                            <span>
                                                                              {value ===
                                                                                null
                                                                                ? "---"
                                                                                : value}
                                                                            </span>
                                                                          </div>
                                                                        );
                                                                      }
                                                                    )}
                                                                  </div>
                                                                </div>
                                                              );
                                                            }
                                                          )}
                                                        </div>
                                                      </div>
                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "cancelItem"
                                                            ? "all_detail_div refund_cancel_div"
                                                            : "d-none"
                                                        }
                                                      >
                                                        <button
                                                          className="back_button"
                                                          onClick={() => {
                                                            this.getDefaultSubOrderView(
                                                              "defaultShow"
                                                            );
                                                          }}
                                                        >
                                                          <img
                                                            src={blueLeftArrow}
                                                            alt=""
                                                          />
                                                          back
                                                        </button>
                                                        <div className="cancel_refund_div">
                                                          <h3>Cancel Item</h3>

                                                          <div className="px-4">
                                                            <label>
                                                              Cancel Date :
                                                            </label>
                                                            <span>
                                                              {this.formatDate(
                                                                new Date().toString()
                                                              )}
                                                            </span>
                                                          </div>
                                                          <div className="return_reason_dropdown">
                                                            <label>
                                                              Select Reason
                                                            </label>
                                                            <select
                                                              onChange={
                                                                this
                                                                  .selectCancelReason
                                                              }
                                                            >
                                                              <option readOnly>
                                                                Select Reason
                                                              </option>
                                                              <option>
                                                                Delivery
                                                                timelines not as
                                                                expected
                                                              </option>
                                                              <option>
                                                                Price is high
                                                              </option>
                                                              <option>
                                                                Wrong order
                                                                placed
                                                              </option>
                                                              <option>
                                                                Will buy locally
                                                              </option>
                                                              <option>
                                                                Change of mind
                                                              </option>
                                                              <option>
                                                                Delay in
                                                                Delivery
                                                              </option>
                                                            </select>
                                                          </div>

                                                          <div className="sync_button m-0 p-4">
                                                            <button
                                                              onClick={
                                                                this.handleCancel

                                                              }
                                                            >

                                                              Update Cancel


                                                            </button>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className={
                                                          subOrderShow ===
                                                            "returnItem"
                                                            ? "all_detail_div refund_cancel_div"
                                                            : "d-none"
                                                        }
                                                      >
                                                        <button
                                                          className="back_button"
                                                          onClick={() => {
                                                            this.getDefaultSubOrderView(
                                                              "defaultShow"
                                                            );
                                                          }}
                                                        >
                                                          <img
                                                            src={blueLeftArrow}
                                                            alt=""
                                                          />
                                                          back
                                                        </button>
                                                        <div className="cancel_refund_div">
                                                          <h3>Return Item</h3>
                                                          <div className="row align-items-baseline">
                                                            <div className="col-6">
                                                              <label>
                                                                Sub Order Id:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnItemDetail?.itemId
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Product Code:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnItemDetail
                                                                    ?.product
                                                                    ?.eanCode
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Product Name:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnItemDetail
                                                                    ?.product
                                                                    ?.description
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Invoice Date:
                                                              </label>
                                                              <span>
                                                                {"---"}
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Base Payment
                                                                Mode:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .paymentSummary
                                                                    ?.paymentTransactionalDetails[0]
                                                                    ?.paymentMethod
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Returnable:
                                                              </label>
                                                              <span>
                                                                {returnEligbleDetail.returnable
                                                                  ? "true"
                                                                  : "false"}
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Reason:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnEligbleDetail.reason
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-6">
                                                              <label>
                                                                Refund Amount:
                                                              </label>
                                                              <span>
                                                                {
                                                                  returnEligbleDetail.refundAmount
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                          <div className="refund_ratio px-2">
                                                            <h4 className="mb-2">
                                                              Refund Ratio
                                                            </h4>
                                                            {returnItemDetail?.refundRatio !==
                                                              undefined &&
                                                              returnItemDetail?.refundRatio !==
                                                              null ? (
                                                              <div className="row">
                                                                {Object.entries(
                                                                  returnItemDetail?.refundRatio
                                                                ).map(
                                                                  ([
                                                                    key,
                                                                    value,
                                                                  ]) => {
                                                                    return (
                                                                      <div className="col-4">
                                                                        <label>
                                                                          {key}:
                                                                        </label>
                                                                        <span>
                                                                          {value ===
                                                                            true
                                                                            ? "true"
                                                                            : value ===
                                                                              false
                                                                              ? "false"
                                                                              : value}
                                                                        </span>
                                                                      </div>
                                                                    );
                                                                  }
                                                                )}
                                                              </div>
                                                            ) : (
                                                              <div className="d-flex justify-content-center">
                                                                No data
                                                                available!
                                                              </div>
                                                            )}
                                                          </div>
                                                          <div className="px-4">
                                                            <label>
                                                              Return Date :
                                                            </label>
                                                            <span>
                                                              {this.formatDate(
                                                                new Date().toString()
                                                              )}
                                                            </span>
                                                          </div>
                                                          <div className="return_reason_dropdown">
                                                            <label>
                                                              Select Reason
                                                            </label>
                                                            <select
                                                              onChange={
                                                                this
                                                                  .selectReturnReason
                                                              }
                                                            >
                                                              <option readOnly>
                                                                Select Reason
                                                              </option>
                                                              <option>
                                                                Product doesn't
                                                                fit
                                                              </option>
                                                              <option>
                                                                Product is
                                                                defective
                                                              </option>
                                                              <option>
                                                                Product is
                                                                damaged
                                                              </option>
                                                              <option>
                                                                Wrong order
                                                                received{" "}
                                                              </option>
                                                              <option>
                                                                Any other reason
                                                              </option>
                                                            </select>
                                                          </div>
                                                          <div className="return_reason_dropdown">
                                                            <label>
                                                              Select Refund Mode
                                                            </label>
                                                            <select>
                                                              <option>
                                                                BTS
                                                              </option>
                                                            </select>
                                                          </div>
                                                          <div className="sync_button m-0 p-4">
                                                            <button
                                                              onClick={() => {
                                                                this.handleReturn(
                                                                  ele
                                                                    .consignments[
                                                                  currentSubOrder
                                                                  ]
                                                                );
                                                              }}
                                                            >
                                                              Update Return
                                                            </button>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  ) : (
                                                    <p className="noData_div">
                                                      {" "}
                                                      {
                                                        "No Sub Order Available"
                                                      }{" "}
                                                    </p>
                                                  )}
                                                  {/* sub order end */}
                                                </div>
                                                {/* <div className="tab-pane fade" id="shiprocket-tab" role="tabpanel" aria-labelledby="shiprocket-tab">
                                                    Ship Rocket View

                                                  </div> */}
                                              </div>
                                            </div>
                                          </div>
                                        </div>
                                      );
                                    })
                                  ) : (
                                    <p className="noData_div">
                                      {" "}
                                      {"No Data Available"}{" "}
                                    </p>
                                  )}
                                </div>
                              </div>
                            ) : searchType === "orderId" ? (
                              <div
                                className="order_summary"
                                id="accordion_order"
                              >
                                {/* {console.log(orderList, orderList.length)} */}
                                {orderList.length ? (
                                  orderList.map((ele, i) => {
                                    return (
                                      <div
                                        className="single_order_data"
                                        key={i}
                                      >
                                        {/* <div className="card-header"> */}
                                        <div className="card-link d-flex">
                                          {/* <label className="col-1"> */}
                                          <img
                                            className="px-2 order_expand right_icon"
                                            data-toggle="collapse"
                                            href={"#" + ele.orderId}
                                            src={tringleRight}
                                            alt=""
                                          />
                                          {/* </label> */}
                                          <div className="row">
                                            <div className="col-2">
                                              <label className="order_label">
                                                Order Id:
                                              </label>
                                              {ele.orderId}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Date:
                                              </label>
                                              {this.formatDate(ele.orderDate)}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Mobile No:
                                              </label>
                                              {
                                                ele.customerDetails
                                                  ?.mobileNumber
                                              }
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Delivery Address:
                                              </label>
                                              {
                                                ele.metadata
                                                  ?.billing_address_address_line1
                                              }
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Order Type:
                                              </label>
                                              {ele.metadata?.shipmentName !==
                                                null
                                                ? ele.metadata?.shipmentName
                                                : "---"}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Email:{" "}
                                              </label>
                                              {ele.customerDetails?.emailId}
                                            </div>
                                            {/* <label className="col-2">{ele.orderId}</label> 
                                        <label className="col-2">{this.formatDate(ele.orderDate)}</label>
                                        <label className="col-2">{ele.customerDetails?.mobileNumber}</label>
                                        <label className="col-2">{ele.metadata?.billing_address_address_line1}</label>
                                        <label className="col-2">{ele.metadata?.shipmentName !== null ? ele.metadata?.shipmentName : "---"}</label>
                                        <label className="col-2">{ele.customerDetails?.emailId}</label>
                                      */}
                                          </div>
                                        </div>
                                        {/* </div> */}
                                        <div
                                          id={ele.orderId}
                                          className="collapse"
                                          data-parent="#accordion_order"
                                        >
                                          <div className="order_details">
                                            <ul className="nav" role="tablist">
                                              <li className="nav-item">
                                                <a
                                                  className="nav-link active"
                                                  data-toggle="tab"
                                                  href="#order_deatil"
                                                  role="tab"
                                                  aria-controls="order_deatil"
                                                  aria-selected="false"
                                                >
                                                  Order Details
                                                </a>
                                              </li>
                                              <li className="nav-item">
                                                <a
                                                  className="nav-link"
                                                  data-toggle="tab"
                                                  href="#subOrder_detail"
                                                  role="tab"
                                                  aria-controls="subOrder_detail"
                                                >
                                                  Sub Order Details
                                                </a>
                                              </li>
                                              {/* <li className="nav-item">
                                                    <a className="nav-link" data-toggle="tab"
                                                      href="#shiprocket-tab"
                                                      role="tab"
                                                      aria-controls="shiprocket-tab">Shiprocket View</a>
                                                  </li> */}
                                              <li className="">
                                                <button
                                                  type="button"
                                                  className="myticket-submit-solve-button ml-2 w-100"
                                                  // onClick={this.handleAttacheProduct.bind(this)}
                                                  onClick={
                                                    this
                                                      .newHandleOminiAttachProductData
                                                  }
                                                >
                                                  {selectedOminiItem?.length > 0
                                                    ? "Attach Product"
                                                    : "Attach Order"}
                                                </button>
                                              </li>
                                            </ul>
                                            <div className="tab-content ">
                                              <div
                                                className="tab-pane fade show active"
                                                id="order_deatil"
                                                role="tabpanel"
                                                aria-labelledby="order_deatil"
                                              >
                                                <div
                                                  className="order_des"
                                                  id="accordion_orderDes"
                                                >
                                                  <div className="single_order_data">
                                                    <div
                                                      className="gen_info_head"
                                                      data-toggle="collapse"
                                                      href="#gen_info_desc"
                                                    >
                                                      <label>
                                                        GENERAL INFO
                                                      </label>
                                                      <img
                                                        className="right_icon"
                                                        src={tringleRight}
                                                        alt=""
                                                      />
                                                    </div>
                                                    <div
                                                      id="gen_info_desc"
                                                      className="all_detail_div collapse"
                                                      data-parent="#accordion_orderDes"
                                                    >
                                                      <div className="row">
                                                        <div className="col-4">
                                                          <label>
                                                            Oredr Id:
                                                          </label>
                                                          <span>
                                                            {ele.orderId}
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Order Date:
                                                          </label>
                                                          <span>
                                                            {this.formatDate(
                                                              ele.orderDate
                                                            )}
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Order Channel:
                                                          </label>
                                                          <span>
                                                            {ele.orderChannel}
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>
                                                          Customer Details
                                                        </h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>Name:</label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .customerDetails
                                                                  .customerName
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Mobile Number:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .customerDetails
                                                                  .mobileNumber
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Email Id:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .customerDetails
                                                                  .emailId
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>Order Status</h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>Id:</label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .id
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Order Status:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .orderStatus
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Status Type:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .orderStatusType
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Status To
                                                              Customer:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .orderStatusToCustomer
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Status To Oms:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .orderStatusToOms
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Color Code:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele.orderStatus
                                                                  .colorCode
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>

                                                      <div className="customer_detail">
                                                        <h3>Metadata</h3>
                                                        {ele.metadata !==
                                                          undefined &&
                                                          ele.metadata !==
                                                          null ? (
                                                          <div className="row">
                                                            {Object.entries(
                                                              ele.metadata
                                                            ).map(
                                                              ([
                                                                key,
                                                                value,
                                                              ]) => {
                                                                return (
                                                                  <div className="col-4">
                                                                    <label>
                                                                      {this.handleSpaces(
                                                                        key
                                                                      )}
                                                                      :
                                                                    </label>
                                                                    {(typeof value !==
                                                                      "object" ||
                                                                      value ===
                                                                      null) && (
                                                                        <span>
                                                                          {value ===
                                                                            true
                                                                            ? "true"
                                                                            : value ===
                                                                              false
                                                                              ? "false"
                                                                              : value}
                                                                        </span>
                                                                      )}
                                                                  </div>
                                                                );
                                                              }
                                                            )}
                                                          </div>
                                                        ) : (
                                                          <p className="noData_div p-1">
                                                            {" "}
                                                            {
                                                              "No Data Available"
                                                            }{" "}
                                                          </p>
                                                        )}
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>
                                                          Payment Split Ratio J
                                                          S O N
                                                        </h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              POINTES:
                                                            </label>
                                                            <span>
                                                              {"Data"}
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>CARD:</label>
                                                            <span>
                                                              {"Data"}
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              VOUCHER:
                                                            </label>
                                                            <span>
                                                              {"Data"}
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>COD:</label>
                                                            <span>
                                                              {"Data"}
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div className="single_order_data">
                                                    <div
                                                      className="gen_info_head"
                                                      data-toggle="collapse"
                                                      href="#pricing_detail"
                                                    >
                                                      <label>
                                                        PRICING DETAILS
                                                      </label>
                                                      <img
                                                        className="right_icon"
                                                        src={tringleRight}
                                                        alt=""
                                                      />
                                                    </div>
                                                    <div
                                                      id="pricing_detail"
                                                      className="all_detail_div collapse"
                                                      data-parent="#accordion_orderDes"
                                                    >
                                                      <div className="row">
                                                        <div className="col-4">
                                                          <label>
                                                            Trade SP:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.tradeSP
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Loyalty Used:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.loyaltyUsed
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Sgst Amount::
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalSgstAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            NetAmount:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.netAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Igst Amount:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalIgstAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total SP:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalSP
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Amount With
                                                            Shipping:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalAmountWithShipping
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Tax:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalTax
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Cess Amount:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalCessAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Utgst Amount:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalUtgstAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Total Cgst Amount:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.totalCgstAmount
                                                            }
                                                          </span>
                                                        </div>
                                                        <div className="col-4">
                                                          <label>
                                                            Shipping Charge:
                                                          </label>
                                                          <span>
                                                            {
                                                              ele
                                                                .totalPricingDetails
                                                                ?.shippingCharge
                                                            }
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>
                                                          Total NNNow Cash
                                                          Details
                                                        </h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              Product NNNow
                                                              Cash:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalNNNowCashDetails
                                                                  ?.productNNNowCash
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Cart NNNow Cash:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalNNNowCashDetails
                                                                  ?.cartNNNowCash
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total NNNow Cash:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalNNNowCashDetails
                                                                  ?.totalNNNowCash
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>
                                                          Total Discount Details
                                                        </h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              Product Discount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalDiscountDetails
                                                                  ?.productDiscount
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-4">
                                                            <label>
                                                              Total Discount:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .totalPricingDetails
                                                                  ?.totalDiscountDetails
                                                                  ?.totalDiscount
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <div className="customer_detail">
                                                        <h3>Payment Summary</h3>
                                                        <div className="row">
                                                          <div className="col-4">
                                                            <label>
                                                              Paid_at_source:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .paymentSummary
                                                                  ?.paid_at_source
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <div
                                                className="tab-pane fade"
                                                id="subOrder_detail"
                                                role="tabpanel"
                                                aria-labelledby="subOrder_detail"
                                              >
                                                {/* sub order start */}
                                                {ele.consignments.length !==
                                                  0 ? (
                                                  <div>
                                                    {ele.consignments.length >
                                                      0 && (
                                                        <div className="subOrder_pagination">
                                                          <label>
                                                            Showing{" "}
                                                            {currentSubOrder + 1}{" "}
                                                            of{" "}
                                                            {
                                                              ele.consignments
                                                                .length
                                                            }
                                                          </label>
                                                          <button
                                                            disabled={
                                                              currentSubOrder ===
                                                                0
                                                                ? true
                                                                : false
                                                            }
                                                            onClick={() => {
                                                              this.handleSubOderPagination(
                                                                "prev"
                                                              );
                                                            }}
                                                          >
                                                            ❮
                                                          </button>
                                                          <button
                                                            disabled={
                                                              currentSubOrder ===
                                                                ele.consignments
                                                                  .length -
                                                                1
                                                                ? true
                                                                : false
                                                            }
                                                            onClick={() => {
                                                              this.handleSubOderPagination(
                                                                "next"
                                                              );
                                                            }}
                                                          >
                                                            ❯
                                                          </button>
                                                        </div>
                                                      )}
                                                    {/* {subOrderShow === 'defaultShow' ? */}
                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "defaultShow"
                                                          ? "order_des"
                                                          : "d-none"
                                                      }
                                                      id="accordion_suborderDes"
                                                    >
                                                      <div className="single_order_data">
                                                        <div
                                                          className="gen_info_head"
                                                          data-toggle="collapse"
                                                          href="#gen_info_subDesc"
                                                        >
                                                          <label>
                                                            GENERAL INFO
                                                          </label>
                                                          <img
                                                            className="right_icon"
                                                            src={tringleRight}
                                                            alt=""
                                                          />
                                                        </div>
                                                        <div
                                                          id="gen_info_subDesc"
                                                          className="all_detail_div collapse"
                                                          data-parent="#accordion_suborderDes"
                                                        >
                                                          <div className="row">
                                                            <div className="col-4">
                                                              <label>
                                                                Consignment Id:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .consignments[
                                                                    currentSubOrder
                                                                  ]
                                                                    .consignmentId
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Item Count:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .consignments[
                                                                    currentSubOrder
                                                                  ]?.itemCount
                                                                }
                                                              </span>
                                                            </div>
                                                            <div className="col-4">
                                                              <label>
                                                                Sla End Time:
                                                              </label>
                                                              <span>
                                                                {
                                                                  ele
                                                                    .consignments[
                                                                    currentSubOrder
                                                                  ]?.slaEndTime
                                                                }
                                                              </span>
                                                            </div>
                                                          </div>
                                                          <div className="customer_detail">
                                                            <h3>
                                                              Consignment States
                                                              DTO
                                                            </h3>
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Id:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.id
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Name:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.name
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Type:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.type
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Status To
                                                                  Customer:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.statusToCustomer
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Status To Oms:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.statusToOms
                                                                  }
                                                                </span>
                                                              </div>
                                                              {/* ps: I know color is given to show consignmentstate NAME :) */}
                                                              <div className="col-4">
                                                                <label>
                                                                  Color Code:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.colorCode
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Processing
                                                                  Sequence:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.consignmentStatesDTO
                                                                      ?.processingSequence
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div className="customer_detail">
                                                            <h3>
                                                              Address Details
                                                            </h3>
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  City:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.city
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  State:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.state
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Country:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.country
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Pincode:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.pincode
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Mobile Number:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.mobileNumber
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Mobile Number
                                                                  Country Code:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.mobileNumberCountryCallingCode
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Address_line1:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.address_line1
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Full Address:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.addressDetails
                                                                      ?.fullAddress
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div className="customer_detail">
                                                            <h3>Ff Type</h3>
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Ff Type:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]?.ffType
                                                                      ?.ffType
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Type:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]?.ffType
                                                                      ?.type
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div className="customer_detail">
                                                            <h3>
                                                              Logistics Details
                                                            </h3>
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Airway Bill
                                                                  Number:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.logisticsDetails
                                                                      ?.airwayBillNumber
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Tracking Link:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.logisticsDetails
                                                                      ?.trackingLink
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Promise Date:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.logisticsDetails
                                                                      ?.promiseDate
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Logistics
                                                                  Partner:
                                                                </label>
                                                                {/* <span>key not there</span> */}
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]
                                                                      ?.logisticsDetails
                                                                      ?.logisticsPartner
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div className="customer_detail">
                                                            <h3>Ff Center</h3>
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Fc Id:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]?.ffCenter
                                                                      ?.fcid
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Fc Name:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .consignments[
                                                                      currentSubOrder
                                                                    ]?.ffCenter
                                                                      ?.fcName
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                      <div className="single_order_data">
                                                        <div
                                                          className="gen_info_head"
                                                          data-toggle="collapse"
                                                          href="#sub_order_detail"
                                                        >
                                                          <label>
                                                            SUB ORDER
                                                          </label>
                                                          <img
                                                            className="right_icon"
                                                            src={tringleRight}
                                                            alt=""
                                                          />
                                                        </div>
                                                        <div
                                                          id="sub_order_detail"
                                                          className="all_detail_div collapse"
                                                          data-parent="#accordion_suborderDes"
                                                        >
                                                          <div
                                                            className="subOrder_items"
                                                            id="accordion_suborderItems"
                                                          >
                                                            {ele.consignments[
                                                              currentSubOrder
                                                            ]?.items.length !==
                                                              0 &&
                                                              ele.consignments[
                                                                currentSubOrder
                                                              ].items.map(
                                                                (
                                                                  item,
                                                                  index
                                                                ) => {
                                                                  return (
                                                                    <div
                                                                      className="subOrder_item"
                                                                      key={
                                                                        index
                                                                      }
                                                                    >
                                                                      <input
                                                                        type="checkbox"
                                                                        checked={selectedOminiItem.some(
                                                                          (
                                                                            val
                                                                          ) =>
                                                                            val.itemID ===
                                                                            item.itemId
                                                                        )}
                                                                        onChange={(
                                                                          e
                                                                        ) =>
                                                                          this.handleOminiSelectedItem(
                                                                            e,
                                                                            ele
                                                                              .consignments[
                                                                              currentSubOrder
                                                                            ]
                                                                              ?.consignmentId,
                                                                            item
                                                                          )
                                                                        }
                                                                      />
                                                                      <label
                                                                        className="item_id_div"
                                                                        data-toggle="collapse"
                                                                        href={
                                                                          "#sub_order_itemDetail" +
                                                                          index
                                                                        }
                                                                      >
                                                                        {" "}
                                                                        {item.itemId +
                                                                          " (" +
                                                                          item
                                                                            .product
                                                                            ?.description +
                                                                          ")"}
                                                                      </label>
                                                                      <div
                                                                        className="collapse"
                                                                        id={
                                                                          "sub_order_itemDetail" +
                                                                          index
                                                                        }
                                                                        data-parent="#accordion_suborderItems"
                                                                      >
                                                                        <div className="sync_button mb-1">
                                                                          <button
                                                                            onClick={() =>
                                                                              this.handleGetOrderList(
                                                                                ele.orderId
                                                                              )
                                                                            }
                                                                          >
                                                                            <img
                                                                              src={
                                                                                white_sync
                                                                              }
                                                                              alt=""
                                                                            />
                                                                            Sync
                                                                            ticket
                                                                            fields
                                                                          </button>
                                                                        </div>
                                                                        <div className="row">
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Item
                                                                              Id:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.itemId
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label
                                                                              className="check_eleg"
                                                                              onClick={() =>
                                                                                this.checkCancelReturEligbile(
                                                                                  "cancellation",
                                                                                  item.itemId
                                                                                )
                                                                              }
                                                                            >
                                                                              Eligbile
                                                                              For
                                                                              Cancellation:
                                                                            </label>
                                                                            <span>
                                                                              {item.eligibleForCancellation
                                                                                ? "true"
                                                                                : "false"}
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label
                                                                              className="check_eleg"
                                                                              onClick={() =>
                                                                                this.checkCancelReturEligbile(
                                                                                  "returns",
                                                                                  item.itemId
                                                                                )
                                                                              }
                                                                            >
                                                                              Eligbile
                                                                              For
                                                                              Return:
                                                                            </label>
                                                                            <span>
                                                                              {item.eligibleForReturn
                                                                                ? "true"
                                                                                : "false"}
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Return
                                                                              Id:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.returnId
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Return
                                                                              Status:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.returnStatus
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Refund
                                                                              Mode:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.refundMode
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Neft
                                                                              Id
                                                                              Linked:
                                                                            </label>
                                                                            <span>
                                                                              {item.neftIdLinked
                                                                                ? "true"
                                                                                : "false"}
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Refund
                                                                              Amount:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.refundAmount
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Refund
                                                                              Status:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.refundStatus
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <label>
                                                                              Ref
                                                                              No:
                                                                            </label>
                                                                            <span>
                                                                              {
                                                                                item.refundRefNumber
                                                                              }
                                                                            </span>
                                                                          </div>
                                                                        </div>
                                                                        <div className="row cancel_return">
                                                                          <div className="col-4">
                                                                            <button
                                                                              disabled={
                                                                                !item.eligibleForCancellation
                                                                              }
                                                                              className={
                                                                                item.eligibleForCancellation
                                                                                  ? "check_eleg"
                                                                                  : "check_eleg disable"
                                                                              }
                                                                              onClick={() => {
                                                                                this.getCancelData(
                                                                                  item,
                                                                                  "cancelItem"
                                                                                );
                                                                              }}
                                                                            >
                                                                              Cancel
                                                                              Item
                                                                            </button>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <button
                                                                              className="check_eleg"
                                                                              onClick={() => {
                                                                                this.getItemHistory(
                                                                                  item.orderItemHistory,
                                                                                  "itemhistory"
                                                                                );
                                                                              }}
                                                                            >
                                                                              Item
                                                                              History
                                                                            </button>
                                                                          </div>
                                                                          <div className="col-4">
                                                                            <button
                                                                              disabled={
                                                                                !item.eligibleForReturn
                                                                              }
                                                                              className={
                                                                                item.eligibleForReturn
                                                                                  ? "check_eleg"
                                                                                  : "check_eleg disable"
                                                                              }
                                                                              onClick={() => {
                                                                                this.getReturnData(
                                                                                  item,
                                                                                  "returnItem"
                                                                                );
                                                                              }}
                                                                            >
                                                                              Return
                                                                              Item
                                                                            </button>
                                                                          </div>
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Metadata
                                                                          </h3>
                                                                          {item.metadata !==
                                                                            undefined &&
                                                                            item.metadata !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.metadata
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {this.handleSpaces(
                                                                                          key
                                                                                        )}

                                                                                        :
                                                                                      </label>
                                                                                      {(typeof value !==
                                                                                        "object" ||
                                                                                        value ===
                                                                                        null) && (
                                                                                          <span>
                                                                                            {value ===
                                                                                              true
                                                                                              ? "true"
                                                                                              : value ===
                                                                                                false
                                                                                                ? "false"
                                                                                                : value}
                                                                                          </span>
                                                                                        )}
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <p className="noData_div p-1">
                                                                              {" "}
                                                                              {
                                                                                "No Data Available"
                                                                              }{" "}
                                                                            </p>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Return
                                                                            Metadata
                                                                          </h3>
                                                                          {item.refundMode !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.metadata
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {
                                                                                          key
                                                                                        }

                                                                                        :
                                                                                      </label>
                                                                                      <span>
                                                                                        {value ===
                                                                                          true
                                                                                          ? "true"
                                                                                          : value ===
                                                                                            false
                                                                                            ? "false"
                                                                                            : value}
                                                                                      </span>
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Product
                                                                          </h3>
                                                                          {item.product !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.product
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {
                                                                                          key
                                                                                        }

                                                                                        :
                                                                                      </label>
                                                                                      <span>
                                                                                        {value ===
                                                                                          true
                                                                                          ? "true"
                                                                                          : value ===
                                                                                            false
                                                                                            ? "false"
                                                                                            : value}
                                                                                      </span>
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Item
                                                                            Status
                                                                          </h3>
                                                                          {item.itemStatus !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.itemStatus
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {
                                                                                          key
                                                                                        }

                                                                                        :
                                                                                      </label>
                                                                                      <span>
                                                                                        {value ===
                                                                                          true
                                                                                          ? "true"
                                                                                          : value ===
                                                                                            false
                                                                                            ? "false"
                                                                                            : value}
                                                                                      </span>
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Return
                                                                            Logistics
                                                                            Details
                                                                          </h3>
                                                                          {item.returnLogisticsDetails !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.returnLogisticsDetails
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {
                                                                                          key
                                                                                        }

                                                                                        :
                                                                                      </label>
                                                                                      <span>
                                                                                        {value ===
                                                                                          true
                                                                                          ? "true"
                                                                                          : value ===
                                                                                            false
                                                                                            ? "false"
                                                                                            : value}
                                                                                      </span>
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3 className="mb-2">
                                                                            Refund
                                                                            Ratio
                                                                          </h3>
                                                                          {item.refundRatio !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.refundRatio
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  return (
                                                                                    <div className="col-4">
                                                                                      <label>
                                                                                        {
                                                                                          key
                                                                                        }

                                                                                        :
                                                                                      </label>
                                                                                      <span>
                                                                                        {value ===
                                                                                          true
                                                                                          ? "true"
                                                                                          : value ===
                                                                                            false
                                                                                            ? "false"
                                                                                            : value}
                                                                                      </span>
                                                                                    </div>
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                        <div className="customer_detail">
                                                                          <h3>
                                                                            Item
                                                                            Pricing
                                                                            Details
                                                                          </h3>
                                                                          {item.itemPricingDetails !==
                                                                            null ? (
                                                                            <div className="row">
                                                                              {Object.entries(
                                                                                item.itemPricingDetails
                                                                              ).map(
                                                                                ([
                                                                                  key,
                                                                                  value,
                                                                                ]) => {
                                                                                  // value === null&& console.log(typeof(value));
                                                                                  return (
                                                                                    (typeof value !==
                                                                                      "object" ||
                                                                                      value ===
                                                                                      null) && (
                                                                                      <div className="col-4">
                                                                                        <label>
                                                                                          {
                                                                                            key
                                                                                          }

                                                                                          :
                                                                                        </label>
                                                                                        <span>
                                                                                          {value ===
                                                                                            true
                                                                                            ? "true"
                                                                                            : value ===
                                                                                              false
                                                                                              ? "false"
                                                                                              : value}
                                                                                        </span>
                                                                                      </div>
                                                                                    )
                                                                                  );
                                                                                }
                                                                              )}
                                                                            </div>
                                                                          ) : (
                                                                            <div className="d-flex justify-content-center">
                                                                              No
                                                                              data
                                                                              available!
                                                                            </div>
                                                                          )}
                                                                        </div>
                                                                      </div>
                                                                    </div>
                                                                  );
                                                                }
                                                              )}
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                    {/* :
                                                subOrderShow === "cancellation" ? */}
                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "cancellation"
                                                          ? "all_detail_div refund_cancel_div"
                                                          : "d-none"
                                                      }
                                                    >
                                                      <button
                                                        className="back_button"
                                                        onClick={() => {
                                                          this.getDefaultSubOrderView(
                                                            "defaultShow"
                                                          );
                                                        }}
                                                      >
                                                        <img
                                                          src={blueLeftArrow}
                                                          alt=""
                                                        />
                                                        back
                                                      </button>
                                                      <div className="cancel_refund_div">
                                                        <h3>
                                                          Cancellation
                                                          Eligibility
                                                        </h3>
                                                        <div className="row align-items-baseline">
                                                          <div className="col-4">
                                                            <label>
                                                              Cancellable:
                                                            </label>
                                                            <span>
                                                              {cancelEligbleDetail.cancellable
                                                                ? "true"
                                                                : "false"}
                                                            </span>
                                                          </div>
                                                          <div className="col-8">
                                                            <label>
                                                              Reason:
                                                            </label>
                                                            <span>
                                                              {
                                                                cancelEligbleDetail.reason
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                        <div className="refund_ratio p-3">
                                                          <h4 className="mb-2">
                                                            Refund Ratio
                                                          </h4>
                                                          <div className="d-flex justify-content-center">
                                                            No Record Found...!
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                    {/* :
                                                subOrderShow === "returns" ? */}
                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "returns"
                                                          ? "all_detail_div refund_cancel_div"
                                                          : "d-none"
                                                      }
                                                    >
                                                      <button
                                                        className="back_button"
                                                        onClick={() => {
                                                          this.getDefaultSubOrderView(
                                                            "defaultShow"
                                                          );
                                                        }}
                                                      >
                                                        <img
                                                          src={blueLeftArrow}
                                                          alt=""
                                                        />
                                                        back
                                                      </button>
                                                      <div className="cancel_refund_div">
                                                        <h3>
                                                          Return Eligibility
                                                        </h3>
                                                        <div className="row align-items-baseline">
                                                          <div className="col-4">
                                                            <label>
                                                              Returnable:
                                                            </label>
                                                            <span>
                                                              {returnEligbleDetail.returnable
                                                                ? "true"
                                                                : "false"}
                                                            </span>
                                                          </div>
                                                          <div className="col-8">
                                                            <label>
                                                              Reason:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnEligbleDetail.reason
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                        <div className="refund_ratio px-2">
                                                          <h4 className="mb-2">
                                                            Refund Ratio
                                                          </h4>
                                                          <div className="d-flex justify-content-center">
                                                            No Record Found...!
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>

                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "itemhistory"
                                                          ? "item_history_div"
                                                          : "d-none"
                                                      }
                                                    >
                                                      <button
                                                        className="back_button"
                                                        onClick={() => {
                                                          this.getDefaultSubOrderView(
                                                            "defaultShow"
                                                          );
                                                        }}
                                                      >
                                                        <img
                                                          src={blueLeftArrow}
                                                          alt=""
                                                        />
                                                        back
                                                      </button>
                                                      <div className="item_history_map">
                                                        {itemOrderHistory.map(
                                                          (data, ind) => {
                                                            return (
                                                              <div className="history_card">
                                                                <div className="history_detail">
                                                                  {Object.entries(
                                                                    data
                                                                  ).map(
                                                                    ([
                                                                      key,
                                                                      value,
                                                                    ]) => {
                                                                      return (
                                                                        <div className="d-flex pb-1">
                                                                          <label>
                                                                            {this.handleSpaces(
                                                                              key
                                                                            )}
                                                                            :{" "}
                                                                          </label>
                                                                          <span>
                                                                            {value ===
                                                                              null
                                                                              ? "---"
                                                                              : value}
                                                                          </span>
                                                                        </div>
                                                                      );
                                                                    }
                                                                  )}
                                                                </div>
                                                              </div>
                                                            );
                                                          }
                                                        )}
                                                      </div>
                                                    </div>
                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "cancelItem"
                                                          ? "all_detail_div refund_cancel_div"
                                                          : "d-none"
                                                      }
                                                    >
                                                      <button
                                                        className="back_button"
                                                        onClick={() => {
                                                          this.getDefaultSubOrderView(
                                                            "defaultShow"
                                                          );
                                                        }}
                                                      >
                                                        <img
                                                          src={blueLeftArrow}
                                                          alt=""
                                                        />
                                                        back
                                                      </button>
                                                      <div className="cancel_refund_div">
                                                        <h3>Cancel Item</h3>

                                                        <div className="px-4">
                                                          <label>
                                                            Cancel Date :
                                                          </label>
                                                          <span>
                                                            {this.formatDate(
                                                              new Date().toString()
                                                            )}
                                                          </span>
                                                        </div>
                                                        <div className="return_reason_dropdown">
                                                          <label>
                                                            Select Reason
                                                          </label>
                                                          <select
                                                            onChange={
                                                              this
                                                                .selectCancelReason
                                                            }
                                                          >
                                                            <option readOnly>
                                                              Select Reason
                                                            </option>
                                                            <option>
                                                              Delivery timelines
                                                              not as expected
                                                            </option>
                                                            <option>
                                                              Price is high
                                                            </option>
                                                            <option>
                                                              Wrong order placed
                                                            </option>
                                                            <option>
                                                              Will buy locally
                                                            </option>
                                                            <option>
                                                              Change of mind
                                                            </option>
                                                            <option>
                                                              Delay in Delivery
                                                            </option>
                                                          </select>
                                                        </div>

                                                        <div className="sync_button m-0 p-4">
                                                          <button
                                                            onClick={
                                                              this.handleCancel
                                                            }
                                                          >
                                                            Update Cancel
                                                          </button>

                                                        </div>
                                                      </div>
                                                    </div>
                                                    <div
                                                      className={
                                                        subOrderShow ===
                                                          "returnItem"
                                                          ? "all_detail_div refund_cancel_div"
                                                          : "d-none"
                                                      }
                                                    >
                                                      <button
                                                        className="back_button"
                                                        onClick={() => {
                                                          this.getDefaultSubOrderView(
                                                            "defaultShow"
                                                          );
                                                        }}
                                                      >
                                                        <img
                                                          src={blueLeftArrow}
                                                          alt=""
                                                        />
                                                        back
                                                      </button>
                                                      <div className="cancel_refund_div">
                                                        <h3>Return Item</h3>
                                                        <div className="row align-items-baseline">
                                                          <div className="col-6">
                                                            <label>
                                                              Sub Order Id:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnItemDetail?.itemId
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Product Code:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnItemDetail
                                                                  ?.product
                                                                  ?.eanCode
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Product Name:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnItemDetail
                                                                  ?.product
                                                                  ?.description
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Invoice Date:
                                                            </label>
                                                            <span>{"---"}</span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Base Payment Mode:
                                                            </label>
                                                            <span>
                                                              {
                                                                ele
                                                                  .paymentSummary
                                                                  ?.paymentTransactionalDetails[0]
                                                                  ?.paymentMethod
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Returnable:
                                                            </label>
                                                            <span>
                                                              {returnEligbleDetail.returnable
                                                                ? "true"
                                                                : "false"}
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Reason:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnEligbleDetail.reason
                                                              }
                                                            </span>
                                                          </div>
                                                          <div className="col-6">
                                                            <label>
                                                              Refund Amount:
                                                            </label>
                                                            <span>
                                                              {
                                                                returnEligbleDetail.refundAmount
                                                              }
                                                            </span>
                                                          </div>
                                                        </div>
                                                        <div className="refund_ratio px-2">
                                                          <h4 className="mb-2">
                                                            Refund Ratio
                                                          </h4>
                                                          {returnItemDetail?.refundRatio !==
                                                            undefined &&
                                                            returnItemDetail?.refundRatio !==
                                                            null ? (
                                                            <div className="row">
                                                              {Object.entries(
                                                                returnItemDetail?.refundRatio
                                                              ).map(
                                                                ([
                                                                  key,
                                                                  value,
                                                                ]) => {
                                                                  return (
                                                                    <div className="col-4">
                                                                      <label>
                                                                        {key}:
                                                                      </label>
                                                                      <span>
                                                                        {value ===
                                                                          true
                                                                          ? "true"
                                                                          : value ===
                                                                            false
                                                                            ? "false"
                                                                            : value}
                                                                      </span>
                                                                    </div>
                                                                  );
                                                                }
                                                              )}
                                                            </div>
                                                          ) : (
                                                            <div className="d-flex justify-content-center">
                                                              No data available!
                                                            </div>
                                                          )}
                                                        </div>
                                                        <div className="px-4">
                                                          <label>
                                                            Return Date :
                                                          </label>
                                                          <span>
                                                            {this.formatDate(
                                                              new Date().toString()
                                                            )}
                                                          </span>
                                                        </div>
                                                        <div className="return_reason_dropdown">
                                                          <label>
                                                            Select Reason
                                                          </label>
                                                          <select
                                                            onChange={
                                                              this
                                                                .selectReturnReason
                                                            }
                                                          >
                                                            <option readOnly>
                                                              Select Reason
                                                            </option>
                                                            <option>
                                                              Product doesn't
                                                              fit
                                                            </option>
                                                            <option>
                                                              Product is
                                                              defective
                                                            </option>
                                                            <option>
                                                              Product is damaged
                                                            </option>
                                                            <option>
                                                              Wrong order
                                                              received{" "}
                                                            </option>
                                                            <option>
                                                              Any other reason
                                                            </option>
                                                          </select>
                                                        </div>
                                                        <div className="return_reason_dropdown">
                                                          <label>
                                                            Select Refund Mode
                                                          </label>
                                                          <select>
                                                            <option>BTS</option>
                                                          </select>
                                                        </div>
                                                        <div className="sync_button m-0 p-4">
                                                          <button
                                                            onClick={() => {
                                                              this.handleReturn(
                                                                ele
                                                                  .consignments[
                                                                currentSubOrder
                                                                ]
                                                              );
                                                            }}
                                                          >
                                                            Update Return
                                                          </button>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                ) : (
                                                  <p className="noData_div">
                                                    {" "}
                                                    {
                                                      "No Sub Order Available"
                                                    }{" "}
                                                  </p>
                                                )}
                                                {/* sub order end */}
                                              </div>
                                              {/* <div className="tab-pane fade" id="shiprocket-tab" role="tabpanel" aria-labelledby="shiprocket-tab">
                                                    Ship Rocket View

                                                   </div> */}
                                            </div>
                                          </div>
                                        </div>
                                      </div>
                                    );
                                  })
                                ) : (
                                  <p className="noData_div">
                                    {" "}
                                    {"No Data Available"}{" "}
                                  </p>
                                )}
                              </div>
                            ) : searchType === "mobId" ? (
                              <div
                                className="order_summary"
                                id="accordion_orderbyMob"
                              >
                                {mobileOrders.length ? (
                                  mobileOrders.map((item, i) => {
                                    return (
                                      <div
                                        className="single_order_data"
                                        key={i}
                                      >
                                        <div className="card-link d-flex">
                                          <img
                                            className="px-2 order_expand right_icon"
                                            onClick={() =>
                                              this.handleGetOrderList(
                                                item.orderId
                                              )
                                            }
                                            data-toggle="collapse"
                                            href={"#" + item.orderId}
                                            src={tringleRight}
                                            alt=""
                                          />
                                          <div className="row">
                                            <div className="col-2">
                                              <label className="order_label">
                                                Order Id:
                                              </label>
                                              {item.orderId}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Date:
                                              </label>
                                              {this.formatDate(item.orderDate)}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Mobile No:
                                              </label>
                                              {
                                                this.state.ticketDetailsData
                                                  .customerPhoneNumber
                                              }
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Delivery Address:
                                              </label>
                                              {"---"}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Order Type:
                                              </label>
                                              {"---"}
                                            </div>
                                            <div className="col-2">
                                              <label className="order_label">
                                                Email:{" "}
                                              </label>
                                              {"---"}
                                            </div>
                                          </div>
                                        </div>
                                        <div
                                          id={item.orderId}
                                          className="collapse"
                                          data-parent="#accordion_orderbyMob"
                                        >
                                          {orderList.length ? (
                                            orderList.map((ele, i) => {
                                              return (
                                                <div
                                                  className="order_details"
                                                  key={i}
                                                >
                                                  <ul
                                                    className="nav"
                                                    role="tablist"
                                                  >
                                                    <li className="nav-item">
                                                      <a
                                                        className="nav-link active"
                                                        data-toggle="tab"
                                                        href={
                                                          "#ord" + item.orderId
                                                        }
                                                        role="tab"
                                                        aria-controls={
                                                          "ord" + item.orderId
                                                        }
                                                        aria-selected="false"
                                                      >
                                                        Order Details
                                                      </a>
                                                    </li>
                                                    <li className="nav-item">
                                                      <a
                                                        className="nav-link"
                                                        data-toggle="tab"
                                                        href={
                                                          "#sub" + item.orderId
                                                        }
                                                        role="tab"
                                                        aria-controls={
                                                          "sub" + item.orderId
                                                        }
                                                      >
                                                        Sub Order Details
                                                      </a>
                                                    </li>
                                                    <li className="">
                                                      <button
                                                        type="button"
                                                        className="myticket-submit-solve-button ml-2 w-100"
                                                        // onClick={this.handleAttacheProduct.bind(this)}
                                                        onClick={
                                                          this
                                                            .newHandleOminiAttachProductData
                                                        }
                                                      >
                                                        {selectedOminiItem?.length >
                                                          0
                                                          ? "Attach Product"
                                                          : "Attach Order"}
                                                      </button>
                                                    </li>
                                                  </ul>
                                                  <div className="tab-content">
                                                    <div
                                                      className="tab-pane fade show active"
                                                      id={"ord" + item.orderId}
                                                      role="tabpanel"
                                                      aria-labelledby={
                                                        "ord" + item.orderId
                                                      }
                                                    >
                                                      <div
                                                        className="order_des"
                                                        id="accordion_bymob_orderDescrip"
                                                      >
                                                        <div className="single_order_data">
                                                          <div
                                                            className="gen_info_head"
                                                            data-toggle="collapse"
                                                            href="#bymob_gen_info_desc"
                                                          >
                                                            <label>
                                                              GENERAL INFO
                                                            </label>
                                                            <img
                                                              className="right_icon"
                                                              src={tringleRight}
                                                              alt=""
                                                            />
                                                          </div>
                                                          <div
                                                            id="bymob_gen_info_desc"
                                                            className="all_detail_div collapse"
                                                            data-parent="#accordion_bymob_orderDescrip"
                                                          >
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Oredr Id:
                                                                </label>
                                                                <span>
                                                                  {ele.orderId}
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Order Date:
                                                                </label>
                                                                <span>
                                                                  {this.formatDate(
                                                                    ele.orderDate
                                                                  )}
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Order Channel:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele.orderChannel
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Customer Details
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Name:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .customerDetails
                                                                        .customerName
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Mobile
                                                                    Number:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .customerDetails
                                                                        .mobileNumber
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Email Id:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .customerDetails
                                                                        .emailId
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Order Status
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Id:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .id
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Order
                                                                    Status:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .orderStatus
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Status Type:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .orderStatusType
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Status To
                                                                    Customer:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .orderStatusToCustomer
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Status To
                                                                    Oms:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .orderStatusToOms
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Color Code:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .orderStatus
                                                                        .colorCode
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>

                                                            <div className="customer_detail">
                                                              <h3>Metadata</h3>
                                                              {ele.metadata !==
                                                                undefined &&
                                                                ele.metadata !==
                                                                null ? (
                                                                <div className="row">
                                                                  {Object.entries(
                                                                    ele.metadata
                                                                  ).map(
                                                                    ([
                                                                      key,
                                                                      value,
                                                                    ]) => {
                                                                      return (
                                                                        <div className="col-4">
                                                                          <label>
                                                                            {this.handleSpaces(
                                                                              key
                                                                            )}
                                                                            :
                                                                          </label>
                                                                          {(typeof value !==
                                                                            "object" ||
                                                                            value ===
                                                                            null) && (
                                                                              <span>
                                                                                {value ===
                                                                                  true
                                                                                  ? "true"
                                                                                  : value ===
                                                                                    false
                                                                                    ? "false"
                                                                                    : value}
                                                                              </span>
                                                                            )}
                                                                        </div>
                                                                      );
                                                                    }
                                                                  )}
                                                                </div>
                                                              ) : (
                                                                <p className="noData_div p-1">
                                                                  {" "}
                                                                  {
                                                                    "No Data Available"
                                                                  }{" "}
                                                                </p>
                                                              )}
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Payment Split
                                                                Ratio J S O N
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    POINTES:
                                                                  </label>
                                                                  <span>
                                                                    {"Data"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    CARD:
                                                                  </label>
                                                                  <span>
                                                                    {"Data"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    VOUCHER:
                                                                  </label>
                                                                  <span>
                                                                    {"Data"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    COD:
                                                                  </label>
                                                                  <span>
                                                                    {"Data"}
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                        <div className="single_order_data">
                                                          <div
                                                            className="gen_info_head"
                                                            data-toggle="collapse"
                                                            href="#byMob_pricing_detail"
                                                          >
                                                            <label>
                                                              PRICING DETAILS
                                                            </label>
                                                            <img
                                                              className="right_icon"
                                                              src={tringleRight}
                                                              alt=""
                                                            />
                                                          </div>
                                                          <div
                                                            id="byMob_pricing_detail"
                                                            className="all_detail_div collapse"
                                                            data-parent="#accordion_bymob_orderDescrip"
                                                          >
                                                            <div className="row">
                                                              <div className="col-4">
                                                                <label>
                                                                  Trade SP:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.tradeSP
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Loyalty Used:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.loyaltyUsed
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Sgst
                                                                  Amount::
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalSgstAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  NetAmount:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.netAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Igst
                                                                  Amount:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalIgstAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total SP:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalSP
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Amount
                                                                  With Shipping:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalAmountWithShipping
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Tax:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalTax
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Cess
                                                                  Amount:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalCessAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Utgst
                                                                  Amount:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalUtgstAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Total Cgst
                                                                  Amount:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.totalCgstAmount
                                                                  }
                                                                </span>
                                                              </div>
                                                              <div className="col-4">
                                                                <label>
                                                                  Shipping
                                                                  Charge:
                                                                </label>
                                                                <span>
                                                                  {
                                                                    ele
                                                                      .totalPricingDetails
                                                                      ?.shippingCharge
                                                                  }
                                                                </span>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Total NNNow Cash
                                                                Details
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Product
                                                                    NNNow Cash:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .totalPricingDetails
                                                                        ?.totalNNNowCashDetails
                                                                        ?.productNNNowCash
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Cart NNNow
                                                                    Cash:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .totalPricingDetails
                                                                        ?.totalNNNowCashDetails
                                                                        ?.cartNNNowCash
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Total NNNow
                                                                    Cash:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .totalPricingDetails
                                                                        ?.totalNNNowCashDetails
                                                                        ?.totalNNNowCash
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Total Discount
                                                                Details
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Product
                                                                    Discount:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .totalPricingDetails
                                                                        ?.totalDiscountDetails
                                                                        ?.productDiscount
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-4">
                                                                  <label>
                                                                    Total
                                                                    Discount:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .totalPricingDetails
                                                                        ?.totalDiscountDetails
                                                                        ?.totalDiscount
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="customer_detail">
                                                              <h3>
                                                                Payment Summary
                                                              </h3>
                                                              <div className="row">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Paid_at_source:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .paymentSummary
                                                                        ?.paid_at_source
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                    <div
                                                      className="tab-pane fade"
                                                      id={"sub" + item.orderId}
                                                      role="tabpanel"
                                                      aria-labelledby={
                                                        "sub" + item.orderId
                                                      }
                                                    >
                                                      {ele.consignments
                                                        .length !== 0 ? (
                                                        <div>
                                                          {ele.consignments
                                                            .length > 0 && (
                                                              <div className="subOrder_pagination">
                                                                <label>
                                                                  Showing{" "}
                                                                  {currentSubOrder +
                                                                    1}{" "}
                                                                  of{" "}
                                                                  {
                                                                    ele
                                                                      .consignments
                                                                      .length
                                                                  }
                                                                </label>
                                                                <button
                                                                  disabled={
                                                                    currentSubOrder ===
                                                                      0
                                                                      ? true
                                                                      : false
                                                                  }
                                                                  onClick={() => {
                                                                    this.handleSubOderPagination(
                                                                      "prev"
                                                                    );
                                                                  }}
                                                                >
                                                                  ❮
                                                                </button>
                                                                <button
                                                                  disabled={
                                                                    currentSubOrder ===
                                                                      ele
                                                                        .consignments
                                                                        .length -
                                                                      1
                                                                      ? true
                                                                      : false
                                                                  }
                                                                  onClick={() => {
                                                                    this.handleSubOderPagination(
                                                                      "next"
                                                                    );
                                                                  }}
                                                                >
                                                                  ❯
                                                                </button>
                                                              </div>
                                                            )}
                                                          {/* {subOrderShow === 'defaultShow' ? */}
                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "defaultShow"
                                                                ? "order_des"
                                                                : "d-none"
                                                            }
                                                            id="accordion_byMobsuborderDes"
                                                          >
                                                            <div className="single_order_data">
                                                              <div
                                                                className="gen_info_head"
                                                                data-toggle="collapse"
                                                                href="#byMob_gen_info_subDesc"
                                                              >
                                                                <label>
                                                                  GENERAL INFO
                                                                </label>
                                                                <img
                                                                  className="right_icon"
                                                                  src={
                                                                    tringleRight
                                                                  }
                                                                  alt=""
                                                                />
                                                              </div>
                                                              <div
                                                                id="byMob_gen_info_subDesc"
                                                                className="all_detail_div collapse"
                                                                data-parent="#accordion_byMobsuborderDes"
                                                              >
                                                                <div className="row">
                                                                  <div className="col-4">
                                                                    <label>
                                                                      Consignment
                                                                      Id:
                                                                    </label>
                                                                    <span>
                                                                      {
                                                                        ele
                                                                          .consignments[
                                                                          currentSubOrder
                                                                        ]
                                                                          .consignmentId
                                                                      }
                                                                    </span>
                                                                  </div>
                                                                  <div className="col-4">
                                                                    <label>
                                                                      Item
                                                                      Count:
                                                                    </label>
                                                                    <span>
                                                                      {
                                                                        ele
                                                                          .consignments[
                                                                          currentSubOrder
                                                                        ]
                                                                          ?.itemCount
                                                                      }
                                                                    </span>
                                                                  </div>
                                                                  <div className="col-4">
                                                                    <label>
                                                                      Sla End
                                                                      Time:
                                                                    </label>
                                                                    <span>
                                                                      {
                                                                        ele
                                                                          .consignments[
                                                                          currentSubOrder
                                                                        ]
                                                                          ?.slaEndTime
                                                                      }
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <div className="customer_detail">
                                                                  <h3>
                                                                    Consignment
                                                                    States DTO
                                                                  </h3>
                                                                  <div className="row">
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Id:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.id
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Name:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.name
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Type:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.type
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Status
                                                                        To
                                                                        Customer:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.statusToCustomer
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Status
                                                                        To Oms:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.statusToOms
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    {/* ps: I know color is given to show consignmentstate NAME :) */}
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Color
                                                                        Code:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.colorCode
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Processing
                                                                        Sequence:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.consignmentStatesDTO
                                                                            ?.processingSequence
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div className="customer_detail">
                                                                  <h3>
                                                                    Address
                                                                    Details
                                                                  </h3>
                                                                  <div className="row">
                                                                    <div className="col-4">
                                                                      <label>
                                                                        City:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.city
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        State:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.state
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Country:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.country
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Pincode:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.pincode
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Mobile
                                                                        Number:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.mobileNumber
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Mobile
                                                                        Number
                                                                        Country
                                                                        Code:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.mobileNumberCountryCallingCode
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Address_line1:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.address_line1
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Full
                                                                        Address:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.addressDetails
                                                                            ?.fullAddress
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div className="customer_detail">
                                                                  <h3>
                                                                    Ff Type
                                                                  </h3>
                                                                  <div className="row">
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Ff Type:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.ffType
                                                                            ?.ffType
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Type:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.ffType
                                                                            ?.type
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div className="customer_detail">
                                                                  <h3>
                                                                    Logistics
                                                                    Details
                                                                  </h3>
                                                                  <div className="row">
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Airway
                                                                        Bill
                                                                        Number:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.logisticsDetails
                                                                            ?.airwayBillNumber
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Tracking
                                                                        Link:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.logisticsDetails
                                                                            ?.trackingLink
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Promise
                                                                        Date:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.logisticsDetails
                                                                            ?.promiseDate
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Logistics
                                                                        Partner:
                                                                      </label>
                                                                      {/* <span>key not there</span> */}
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.logisticsDetails
                                                                            ?.logisticsPartner
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div className="customer_detail">
                                                                  <h3>
                                                                    Ff Center
                                                                  </h3>
                                                                  <div className="row">
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Fc Id:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.ffCenter
                                                                            ?.fcid
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                    <div className="col-4">
                                                                      <label>
                                                                        Fc Name:
                                                                      </label>
                                                                      <span>
                                                                        {
                                                                          ele
                                                                            .consignments[
                                                                            currentSubOrder
                                                                          ]
                                                                            ?.ffCenter
                                                                            ?.fcName
                                                                        }
                                                                      </span>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </div>
                                                            <div className="single_order_data">
                                                              <div
                                                                className="gen_info_head"
                                                                data-toggle="collapse"
                                                                href="#byMobsub_order_detail"
                                                              >
                                                                <label>
                                                                  SUB ORDER
                                                                </label>
                                                                <img
                                                                  className="right_icon"
                                                                  src={
                                                                    tringleRight
                                                                  }
                                                                  alt=""
                                                                />
                                                              </div>
                                                              <div
                                                                id="byMobsub_order_detail"
                                                                className="all_detail_div collapse"
                                                                data-parent="#accordion_byMobsuborderDes"
                                                              >
                                                                <div
                                                                  className="subOrder_items"
                                                                  id="accordion_byMob_suborderItems"
                                                                >
                                                                  {ele
                                                                    .consignments[
                                                                    currentSubOrder
                                                                  ]?.items
                                                                    .length !==
                                                                    0 &&
                                                                    ele.consignments[
                                                                      currentSubOrder
                                                                    ].items.map(
                                                                      (
                                                                        item,
                                                                        index
                                                                      ) => {
                                                                        return (
                                                                          <div
                                                                            className="subOrder_item"
                                                                            key={
                                                                              index
                                                                            }
                                                                          >
                                                                            <input
                                                                              type="checkbox"
                                                                              checked={selectedOminiItem.some(
                                                                                (
                                                                                  val
                                                                                ) =>
                                                                                  val.itemID ===
                                                                                  item.itemId
                                                                              )}
                                                                              onChange={(
                                                                                e
                                                                              ) =>
                                                                                this.handleOminiSelectedItem(
                                                                                  e,
                                                                                  ele
                                                                                    .consignments[
                                                                                    currentSubOrder
                                                                                  ]
                                                                                    ?.consignmentId,
                                                                                  item
                                                                                )
                                                                              }
                                                                            />

                                                                            <label
                                                                              className="item_id_div"
                                                                              data-toggle="collapse"
                                                                              href={
                                                                                "#sub_order_itemDetail" +
                                                                                index
                                                                              }
                                                                            >
                                                                              {" "}
                                                                              {item.itemId +
                                                                                " (" +
                                                                                item
                                                                                  .product
                                                                                  ?.description +
                                                                                ")"}
                                                                            </label>
                                                                            <div
                                                                              className="collapse"
                                                                              id={
                                                                                "sub_order_itemDetail" +
                                                                                index
                                                                              }
                                                                              data-parent="#accordion_byMob_suborderItems"
                                                                            >
                                                                              <div className="sync_button mb-1">
                                                                                <button
                                                                                  onClick={() =>
                                                                                    this.handleGetOrderList(
                                                                                      ele.orderId
                                                                                    )
                                                                                  }
                                                                                >
                                                                                  <img
                                                                                    src={
                                                                                      white_sync
                                                                                    }
                                                                                    alt=""
                                                                                  />
                                                                                  Sync
                                                                                  ticket
                                                                                  fields
                                                                                </button>
                                                                              </div>
                                                                              <div className="row">
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Item
                                                                                    Id:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.itemId
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label
                                                                                    className="check_eleg"
                                                                                    onClick={() =>
                                                                                      this.checkCancelReturEligbile(
                                                                                        "cancellation",
                                                                                        item.itemId
                                                                                      )
                                                                                    }
                                                                                  >
                                                                                    Eligbile
                                                                                    For
                                                                                    Cancellation:
                                                                                  </label>
                                                                                  <span>
                                                                                    {item.eligibleForCancellation
                                                                                      ? "true"
                                                                                      : "false"}
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label
                                                                                    className="check_eleg"
                                                                                    onClick={() =>
                                                                                      this.checkCancelReturEligbile(
                                                                                        "returns",
                                                                                        item.itemId
                                                                                      )
                                                                                    }
                                                                                  >
                                                                                    Eligbile
                                                                                    For
                                                                                    Return:
                                                                                  </label>
                                                                                  <span>
                                                                                    {item.eligibleForReturn
                                                                                      ? "true"
                                                                                      : "false"}
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Return
                                                                                    Id:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.returnId
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Return
                                                                                    Status:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.returnStatus
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Refund
                                                                                    Mode:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.refundMode
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Neft
                                                                                    Id
                                                                                    Linked:
                                                                                  </label>
                                                                                  <span>
                                                                                    {item.neftIdLinked
                                                                                      ? "true"
                                                                                      : "false"}
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Refund
                                                                                    Amount:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.refundAmount
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Refund
                                                                                    Status:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.refundStatus
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <label>
                                                                                    Ref
                                                                                    No:
                                                                                  </label>
                                                                                  <span>
                                                                                    {
                                                                                      item.refundRefNumber
                                                                                    }
                                                                                  </span>
                                                                                </div>
                                                                              </div>
                                                                              <div className="row cancel_return">
                                                                                <div className="col-4">
                                                                                  <button
                                                                                    disabled={
                                                                                      !item.eligibleForCancellation
                                                                                    }
                                                                                    className={
                                                                                      item.eligibleForCancellation
                                                                                        ? "check_eleg"
                                                                                        : "check_eleg disable"
                                                                                    }
                                                                                    onClick={() => {
                                                                                      this.getCancelData(
                                                                                        item,
                                                                                        "cancelItem"
                                                                                      );
                                                                                    }}
                                                                                  >
                                                                                    Cancel
                                                                                    Item
                                                                                  </button>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <button
                                                                                    className="check_eleg"
                                                                                    onClick={() => {
                                                                                      this.getItemHistory(
                                                                                        item.orderItemHistory,
                                                                                        "itemhistory"
                                                                                      );
                                                                                    }}
                                                                                  >
                                                                                    Item
                                                                                    History
                                                                                  </button>
                                                                                </div>
                                                                                <div className="col-4">
                                                                                  <button
                                                                                    disabled={
                                                                                      !item.eligibleForReturn
                                                                                    }
                                                                                    className={
                                                                                      item.eligibleForReturn
                                                                                        ? "check_eleg"
                                                                                        : "check_eleg disable"
                                                                                    }
                                                                                    onClick={() => {
                                                                                      this.getReturnData(
                                                                                        item,
                                                                                        "returnItem"
                                                                                      );
                                                                                    }}
                                                                                  >
                                                                                    Return
                                                                                    Item
                                                                                  </button>
                                                                                </div>
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Metadata
                                                                                </h3>
                                                                                {item.metadata !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.metadata
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Return
                                                                                  Metadata
                                                                                </h3>
                                                                                {item.refundMode !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.metadata
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Product
                                                                                </h3>
                                                                                {item.product !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.product
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Item
                                                                                  Status
                                                                                </h3>
                                                                                {item.itemStatus !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.itemStatus
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Return
                                                                                  Logistics
                                                                                  Details
                                                                                </h3>
                                                                                {item.returnLogisticsDetails !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.returnLogisticsDetails
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3 className="mb-2">
                                                                                  Refund
                                                                                  Ratio
                                                                                </h3>
                                                                                {item.refundRatio !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.refundRatio
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        return (
                                                                                          <div className="col-4">
                                                                                            <label>
                                                                                              {
                                                                                                key
                                                                                              }

                                                                                              :
                                                                                            </label>
                                                                                            <span>
                                                                                              {value ===
                                                                                                true
                                                                                                ? "true"
                                                                                                : value ===
                                                                                                  false
                                                                                                  ? "false"
                                                                                                  : value}
                                                                                            </span>
                                                                                          </div>
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                              <div className="customer_detail">
                                                                                <h3>
                                                                                  Item
                                                                                  Pricing
                                                                                  Details
                                                                                </h3>
                                                                                {item.itemPricingDetails !==
                                                                                  null ? (
                                                                                  <div className="row">
                                                                                    {Object.entries(
                                                                                      item.itemPricingDetails
                                                                                    ).map(
                                                                                      ([
                                                                                        key,
                                                                                        value,
                                                                                      ]) => {
                                                                                        // value === null&& console.log(typeof(value));
                                                                                        return (
                                                                                          (typeof value !==
                                                                                            "object" ||
                                                                                            value ===
                                                                                            null) && (
                                                                                            <div className="col-4">
                                                                                              <label>
                                                                                                {
                                                                                                  key
                                                                                                }

                                                                                                :
                                                                                              </label>
                                                                                              <span>
                                                                                                {value ===
                                                                                                  true
                                                                                                  ? "true"
                                                                                                  : value ===
                                                                                                    false
                                                                                                    ? "false"
                                                                                                    : value}
                                                                                              </span>
                                                                                            </div>
                                                                                          )
                                                                                        );
                                                                                      }
                                                                                    )}
                                                                                  </div>
                                                                                ) : (
                                                                                  <div className="d-flex justify-content-center">
                                                                                    No
                                                                                    data
                                                                                    available!
                                                                                  </div>
                                                                                )}
                                                                              </div>
                                                                            </div>
                                                                          </div>
                                                                        );
                                                                      }
                                                                    )}
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "cancellation"
                                                                ? "all_detail_div refund_cancel_div"
                                                                : "d-none"
                                                            }
                                                          >
                                                            <button
                                                              className="back_button"
                                                              onClick={() => {
                                                                this.getDefaultSubOrderView(
                                                                  "defaultShow"
                                                                );
                                                              }}
                                                            >
                                                              <img
                                                                src={
                                                                  blueLeftArrow
                                                                }
                                                                alt=""
                                                              />
                                                              back
                                                            </button>
                                                            <div className="cancel_refund_div">
                                                              <h3>
                                                                Cancellation
                                                                Eligibility
                                                              </h3>
                                                              <div className="row align-items-baseline">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Cancellable:
                                                                  </label>
                                                                  <span>
                                                                    {cancelEligbleDetail.cancellable
                                                                      ? "true"
                                                                      : "false"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-8">
                                                                  <label>
                                                                    Reason:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      cancelEligbleDetail.reason
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                              <div className="refund_ratio p-3">
                                                                <h4 className="mb-2">
                                                                  Refund Ratio
                                                                </h4>
                                                                <div className="d-flex justify-content-center">
                                                                  No Record
                                                                  Found...!
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>

                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "returns"
                                                                ? "all_detail_div refund_cancel_div"
                                                                : "d-none"
                                                            }
                                                          >
                                                            <button
                                                              className="back_button"
                                                              onClick={() => {
                                                                this.getDefaultSubOrderView(
                                                                  "defaultShow"
                                                                );
                                                              }}
                                                            >
                                                              <img
                                                                src={
                                                                  blueLeftArrow
                                                                }
                                                                alt=""
                                                              />
                                                              back
                                                            </button>
                                                            <div className="cancel_refund_div">
                                                              <h3>
                                                                Return
                                                                Eligibility
                                                              </h3>
                                                              <div className="row align-items-baseline">
                                                                <div className="col-4">
                                                                  <label>
                                                                    Returnable:
                                                                  </label>
                                                                  <span>
                                                                    {returnEligbleDetail.returnable
                                                                      ? "true"
                                                                      : "false"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-8">
                                                                  <label>
                                                                    Reason:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnEligbleDetail.reason
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                              <div className="refund_ratio px-2">
                                                                <h4 className="mb-2">
                                                                  Refund Ratio
                                                                </h4>
                                                                <div className="d-flex justify-content-center">
                                                                  No Record
                                                                  Found...!
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>

                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "itemhistory"
                                                                ? "item_history_div"
                                                                : "d-none"
                                                            }
                                                          >
                                                            <button
                                                              className="back_button"
                                                              onClick={() => {
                                                                this.getDefaultSubOrderView(
                                                                  "defaultShow"
                                                                );
                                                              }}
                                                            >
                                                              <img
                                                                src={
                                                                  blueLeftArrow
                                                                }
                                                                alt=""
                                                              />
                                                              back
                                                            </button>
                                                            <div className="item_history_map">
                                                              {itemOrderHistory.map(
                                                                (data, ind) => {
                                                                  return (
                                                                    <div className="history_card">
                                                                      <div className="history_detail">
                                                                        {Object.entries(
                                                                          data
                                                                        ).map(
                                                                          ([
                                                                            key,
                                                                            value,
                                                                          ]) => {
                                                                            return (
                                                                              <div className="d-flex pb-1">
                                                                                <label>
                                                                                  {this.handleSpaces(
                                                                                    key
                                                                                  )}

                                                                                  :{" "}
                                                                                </label>
                                                                                <span>
                                                                                  {value ===
                                                                                    null
                                                                                    ? "---"
                                                                                    : value}
                                                                                </span>
                                                                              </div>
                                                                            );
                                                                          }
                                                                        )}
                                                                      </div>
                                                                    </div>
                                                                  );
                                                                }
                                                              )}
                                                            </div>
                                                          </div>
                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "cancelItem"
                                                                ? "all_detail_div refund_cancel_div"
                                                                : "d-none"
                                                            }
                                                          >
                                                            <button
                                                              className="back_button"
                                                              onClick={() => {
                                                                this.getDefaultSubOrderView(
                                                                  "defaultShow"
                                                                );
                                                              }}
                                                            >
                                                              <img
                                                                src={
                                                                  blueLeftArrow
                                                                }
                                                                alt=""
                                                              />
                                                              back
                                                            </button>
                                                            <div className="cancel_refund_div">
                                                              <h3>
                                                                Cancel Item
                                                              </h3>

                                                              <div className="px-4">
                                                                <label>
                                                                  Cancel Date :
                                                                </label>
                                                                <span>
                                                                  {this.formatDate(
                                                                    new Date().toString()
                                                                  )}
                                                                </span>
                                                              </div>
                                                              <div className="return_reason_dropdown">
                                                                <label>
                                                                  Select Reason
                                                                </label>
                                                                <select
                                                                  onChange={
                                                                    this
                                                                      .selectCancelReason
                                                                  }
                                                                >
                                                                  <option
                                                                    readOnly
                                                                  >
                                                                    Select
                                                                    Reason
                                                                  </option>
                                                                  <option>
                                                                    Delivery
                                                                    timelines
                                                                    not as
                                                                    expected
                                                                  </option>
                                                                  <option>
                                                                    Price is
                                                                    high
                                                                  </option>
                                                                  <option>
                                                                    Wrong order
                                                                    placed
                                                                  </option>
                                                                  <option>
                                                                    Will buy
                                                                    locally
                                                                  </option>
                                                                  <option>
                                                                    Change of
                                                                    mind
                                                                  </option>
                                                                  <option>
                                                                    Delay in
                                                                    Delivery
                                                                  </option>
                                                                </select>
                                                              </div>

                                                              <div className="sync_button m-0 p-4">

                                                                <button
                                                                  disabled={this.state.isCancelsubOrder}
                                                                  onClick={
                                                                    this.handleCancel

                                                                  }
                                                                >
                                                                  {this.state.isCancelsubOrder ? (
                                                                    <img
                                                                      src={loaderGif}
                                                                      alt="loading"
                                                                      style={{ width: "20px" }}
                                                                    />
                                                                  ) : (
                                                                    "Update Cancel"
                                                                  )}

                                                                </button>
                                                              </div>
                                                            </div>
                                                          </div>
                                                          <div
                                                            className={
                                                              subOrderShow ===
                                                                "returnItem"
                                                                ? "all_detail_div refund_cancel_div"
                                                                : "d-none"
                                                            }
                                                          >
                                                            <button
                                                              className="back_button"
                                                              onClick={() => {
                                                                this.getDefaultSubOrderView(
                                                                  "defaultShow"
                                                                );
                                                              }}
                                                            >
                                                              <img
                                                                src={
                                                                  blueLeftArrow
                                                                }
                                                                alt=""
                                                              />
                                                              back
                                                            </button>
                                                            <div className="cancel_refund_div">
                                                              <h3>
                                                                Return Item
                                                              </h3>
                                                              <div className="row align-items-baseline">
                                                                <div className="col-6">
                                                                  <label>
                                                                    Sub Order
                                                                    Id:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnItemDetail?.itemId
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Product
                                                                    Code:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnItemDetail
                                                                        ?.product
                                                                        ?.eanCode
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Product
                                                                    Name:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnItemDetail
                                                                        ?.product
                                                                        ?.description
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Invoice
                                                                    Date:
                                                                  </label>
                                                                  <span>
                                                                    {"---"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Base Payment
                                                                    Mode:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      ele
                                                                        .paymentSummary
                                                                        ?.paymentTransactionalDetails[0]
                                                                        ?.paymentMethod
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Returnable:
                                                                  </label>
                                                                  <span>
                                                                    {returnEligbleDetail.returnable
                                                                      ? "true"
                                                                      : "false"}
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Reason:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnEligbleDetail.reason
                                                                    }
                                                                  </span>
                                                                </div>
                                                                <div className="col-6">
                                                                  <label>
                                                                    Refund
                                                                    Amount:
                                                                  </label>
                                                                  <span>
                                                                    {
                                                                      returnEligbleDetail.refundAmount
                                                                    }
                                                                  </span>
                                                                </div>
                                                              </div>
                                                              <div className="refund_ratio px-2">
                                                                <h4 className="mb-2">
                                                                  Refund Ratio
                                                                </h4>
                                                                {returnItemDetail?.refundRatio !==
                                                                  undefined &&
                                                                  returnItemDetail?.refundRatio !==
                                                                  null ? (
                                                                  <div className="row">
                                                                    {Object.entries(
                                                                      returnItemDetail?.refundRatio
                                                                    ).map(
                                                                      ([
                                                                        key,
                                                                        value,
                                                                      ]) => {
                                                                        return (
                                                                          <div className="col-4">
                                                                            <label>
                                                                              {
                                                                                key
                                                                              }
                                                                              :
                                                                            </label>
                                                                            <span>
                                                                              {value ===
                                                                                true
                                                                                ? "true"
                                                                                : value ===
                                                                                  false
                                                                                  ? "false"
                                                                                  : value}
                                                                            </span>
                                                                          </div>
                                                                        );
                                                                      }
                                                                    )}
                                                                  </div>
                                                                ) : (
                                                                  <div className="d-flex justify-content-center">
                                                                    No data
                                                                    available!
                                                                  </div>
                                                                )}
                                                              </div>
                                                              <div className="px-4">
                                                                <label>
                                                                  Return Date :
                                                                </label>
                                                                <span>
                                                                  {this.formatDate(
                                                                    new Date().toString()
                                                                  )}
                                                                </span>
                                                              </div>
                                                              <div className="return_reason_dropdown">
                                                                <label>
                                                                  Select Reason
                                                                </label>
                                                                <select
                                                                  onChange={
                                                                    this
                                                                      .selectReturnReason
                                                                  }
                                                                >
                                                                  <option
                                                                    readOnly
                                                                  >
                                                                    Select
                                                                    Reason
                                                                  </option>
                                                                  <option>
                                                                    Product
                                                                    doesn't fit
                                                                  </option>
                                                                  <option>
                                                                    Product is
                                                                    defective
                                                                  </option>
                                                                  <option>
                                                                    Product is
                                                                    damaged
                                                                  </option>
                                                                  <option>
                                                                    Wrong order
                                                                    received{" "}
                                                                  </option>
                                                                  <option>
                                                                    Any other
                                                                    reason
                                                                  </option>
                                                                </select>
                                                              </div>
                                                              <div className="return_reason_dropdown">
                                                                <label>
                                                                  Select Refund
                                                                  Mode
                                                                </label>
                                                                <select>
                                                                  <option>
                                                                    BTS
                                                                  </option>
                                                                </select>
                                                              </div>
                                                              <div className="sync_button m-0 p-4">
                                                                <button
                                                                  disabled={this.state.isCancelsubOrder}
                                                                  onClick={() => {
                                                                    this.handleReturn(
                                                                      ele
                                                                        .consignments[
                                                                      currentSubOrder
                                                                      ]
                                                                    );
                                                                  }}
                                                                >
                                                                  {this.state.isCancelsubOrder ? (
                                                                    <img
                                                                      src={loaderGif}
                                                                      alt="loading"
                                                                      style={{ width: "20px" }}
                                                                    />
                                                                  ) : (
                                                                    "Update Return"
                                                                  )}

                                                                </button>

                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      ) : (
                                                        <p className="noData_div">
                                                          {" "}
                                                          {
                                                            "No Sub Order Available"
                                                          }{" "}
                                                        </p>
                                                      )}
                                                    </div>
                                                  </div>
                                                </div>
                                              );
                                            })
                                          ) : (
                                            <p className="noData_div p-2">
                                              {" "}
                                              {"No Data Available"}{" "}
                                            </p>
                                          )}
                                        </div>
                                      </div>
                                    );
                                  })
                                ) : (
                                  <p className="noData_div p-3">
                                    {" "}
                                    {"No Data Available"}{" "}
                                  </p>
                                )}
                              </div>
                            ) : null}
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )}
              {flags?.isHorizontal && flags?.isCreditNote && (
                <div
                  className="tab-pane fade"
                  id="creditNote_page"
                  role="tabpanel"
                  aria-labelledby="creditNote_page"
                >
                  <div className="credit_note_div">
                    <div className="row m-0">
                      <div className="col-3">
                        <div className="search_div">
                          <h3>Search By</h3>
                          <div className="d-flex justify-content-between">
                            <div className="serch_by_div">
                              <input
                                id="credit_note"
                                defaultChecked
                                type="radio"
                                name="search_type_credit"
                                onChange={this.handleSearchOrderType}
                              />
                              <label htmlFor="credit_note">
                                Credit Note Id
                              </label>
                            </div>
                            <div className="serch_by_div">
                              <input
                                id="mobile_credit"
                                type="radio"
                                name="search_type_credit"
                                onChange={this.handleSearchOrderType}
                              />
                              <label htmlFor="mobile_credit">Mobile</label>
                            </div>
                          </div>
                          {searchType === "credit_note" ? (
                            <div className="order_input">
                              <label>Credit Note Id</label>
                              <input
                                className="w-100"
                                placeholder="Enter Credit Note Id"
                                type="text"
                                onChange={this.getCreditNoteOrderId}
                                value={creditNoteOrderId}
                              />
                            </div>
                          ) : searchType === "mobile_credit" ? (
                            <div className="order_input">
                              <label>Mobile</label>
                              <input
                                maxLength={10}
                                className="w-100"
                                placeholder="Enter Mobile Number"
                                type="number"
                                onChange={this.getCreditNoteMobile}
                                value={mobileNoCreditNote}
                              />
                              <p className="mobile_remark">
                                *Enter 10 digit mobile number
                              </p>
                            </div>
                          ) : null}
                          <div className="seach_button">
                            <button
                              disabled={isOrderSearchCreditLoading}
                              onClick={
                                searchType === "credit_note"
                                  ? this.handleCheckCreditNoteList
                                  : this.handleGetCreditNoteList
                              }
                            >
                              {isOrderSearchCreditLoading ? (
                                <img
                                  src={loaderGif}
                                  alt="loading"
                                  style={{ width: "20px" }}
                                />
                              ) : (
                                "Search"
                              )}
                            </button>
                          </div>
                        </div>
                      </div>
                      <div className="col-5">
                        <div>
                          {creditNotes.length > 0 && (
                            <div className="subOrder_pagination">
                              <label>
                                Showing {currentCreditNote + 1} of{" "}
                                {creditNotes.length}
                              </label>
                              <button
                                disabled={
                                  currentCreditNote === 0 ? true : false
                                }
                                onClick={() => {
                                  this.handleCreditNoteMobilePagination("prev");
                                }}
                              >
                                ❮
                              </button>
                              <button
                                disabled={
                                  currentCreditNote === creditNotes.length - 1
                                    ? true
                                    : false
                                }
                                onClick={() => {
                                  this.handleCreditNoteMobilePagination("next");
                                }}
                              >
                                ❯
                              </button>
                            </div>
                          )}
                          {isExtendCancel === "default" && (
                            <div className="extend_cancel">
                              <button
                                className={
                                  creditNotes?.length === 0
                                    ? "btnClickDisabled"
                                    : null
                                }
                                disabled={creditNotes?.length === 0}
                                onClick={() => {
                                  this.handleExtendCancel("extend");
                                }}
                              >
                                Extend Validity
                                <img src={edit_white} alt="" />
                              </button>
                              <button
                                className={
                                  creditNotes?.length === 0
                                    ? "btnClickDisabled"
                                    : null
                                }
                                disabled={creditNotes?.length === 0}
                                onClick={() => {
                                  this.handleExtendCancel("cancel");
                                }}
                              >
                                Cancel Credit Note
                                <img src={cross_circle_white} />
                              </button>
                            </div>
                          )}
                          {isExtendCancel === "default" ? (
                            <div
                              className="creditnot_description"
                              id="accordion_creditNote"
                            >
                              <div className="single_order_data">
                                <div
                                  className="gen_info_head"
                                  data-toggle="collapse"
                                  href="#gen_info_creditNote"
                                >
                                  <label>GENERAL INFO</label>
                                  <img
                                    className="right_icon"
                                    src={tringleRight}
                                    alt=""
                                  />
                                </div>
                                <div
                                  id="gen_info_creditNote"
                                  className="all_detail_div"
                                  data-parent="#accordion_creditNote"
                                >
                                  <div className="row m-0">
                                    {creditNotes?.length !== 0 ? (
                                      Object.entries(
                                        creditNotes[currentCreditNote]
                                      ).map(([key, value]) => {
                                        if (creditNotes === null || creditNotes === undefined) {
                                          return null
                                        }
                                        return (
                                          // (typeof (value) !== 'object' || value === null) &&
                                          <div className="col-6">
                                            <label>{key}:</label>
                                            <span>
                                              {value === true
                                                ? "true"
                                                : value === false
                                                  ? "false"
                                                  : value}
                                            </span>
                                          </div>
                                        );
                                      })
                                    ) : (
                                      <p className="noData_div justify-content-center p-0 w-100">
                                        {" "}
                                        {"No Data Available"}{" "}
                                      </p>
                                    )}
                                    {/* <div className="col-6">
                                    <label>data:</label>
                                    <span>data detail</span>
                                  </div>
                                  <div className="col-6">
                                    <label>data:</label>
                                    <span>data detail</span>
                                  </div>
                                  <div className="col-6">
                                    <label>data:</label>
                                    <span>data detail</span>
                                  </div>
                                  <div className="col-6">
                                    <label>data:</label>
                                    <span>data detail</span>
                                  </div>
                                  <div className="col-6">
                                    <label>data:</label>
                                    <span>data detail</span>
                                  </div> */}
                                  </div>
                                </div>
                              </div>
                            </div>
                          ) : isExtendCancel === "extend" ? (
                            <div className="extend_div">
                              <button
                                className="back_button"
                                onClick={() => {
                                  this.handleExtendCancel("default");
                                }}
                              >
                                <img src={blueLeftArrow} alt="" />
                                back
                              </button>
                              <div className="exted_credit">
                                <h3>Extend Credit Note</h3>
                                <div className="credit_input">
                                  <label>Coupon Code:</label>
                                  <input
                                    readOnly
                                    type="text"
                                    value={
                                      creditNotes[currentCreditNote]?.couponCode
                                    }
                                  />
                                </div>
                                <div className="credit_input">
                                  <label>No Of Days To Extend:</label>
                                  <input
                                    type="number"
                                    onChange={this.handleNumberOfDaysExtand}
                                    value={extedDays}
                                  />
                                </div>
                                <div className="credit_input">
                                  <label>Reason For Extention:</label>
                                  <textarea
                                    placeholder="Enter your reason"
                                    onChange={this.handleExtandReason}
                                    value={extandReason}
                                  />
                                </div>
                                <div className="sync_button m-0">
                                  <button
                                    disabled={
                                      extedDays > 0 && extandReason !== ""
                                        ? false
                                        : true
                                    }
                                    className="extend_button"
                                    onClick={this.showExtendConfirm}
                                  >
                                    Extend Validity
                                  </button>
                                </div>
                                <Modal
                                  open={this.state.showExtendCredit}
                                  classNames={{ modal: "creditNoteModal" }}
                                  onClose={this.showExtendConfirm}
                                  // modalId="profile-details-error"
                                  overlayId="logout-ovrly"
                                >
                                  <div className="credit_note_confirm">
                                    <label>
                                      Are you sure you want to extend validity
                                    </label>
                                    <div className="confirm_buttons">
                                      <button
                                        className="cancel_btn"
                                        onClick={this.showExtendConfirm}
                                      >
                                        Cancel
                                      </button>
                                      <button
                                        onClick={() => {
                                          this.confirmExtand(
                                            creditNotes[currentCreditNote]
                                              ?.couponCode
                                          );
                                        }}
                                      >
                                        Submit
                                      </button>
                                    </div>
                                  </div>
                                </Modal>
                              </div>
                            </div>
                          ) : isExtendCancel === "cancel" ? (
                            <div className="cancel_credit_div">
                              <button
                                className="back_button"
                                onClick={() => {
                                  this.handleExtendCancel("default");
                                }}
                              >
                                <img src={blueLeftArrow} alt="" />
                                back
                              </button>
                              <div className="exted_credit">
                                <h3>Cancel Credit Note</h3>
                                <div className="credit_input">
                                  <label>Coupon Code</label>
                                  <input
                                    type="text"
                                    readOnly
                                    value={
                                      creditNotes[currentCreditNote]?.couponCode
                                    }
                                  />
                                </div>
                                <div className="credit_input">
                                  <label>Cancel Reference Number</label>
                                  <input
                                    type="number"
                                    readOnly
                                    value={
                                      creditNotes[
                                        currentCreditNote
                                      ]?.couponCode.split("R")[1]
                                    }
                                  />
                                </div>
                                <div className="credit_input">
                                  <label>Reason For Cancellation</label>
                                  <textarea
                                    placeholder="Enter your reason"
                                    onChange={this.handleCancelExtandReason}
                                    value={cancelExtandReason}
                                  />
                                </div>
                                <div className="sync_button m-0">
                                  <button
                                    disabled={
                                      cancelExtandReason !== "" ? false : true
                                    }
                                    className="extend_button"
                                    onClick={this.showCancelCreditConfirm}
                                  >
                                    Cancel Credit Note
                                  </button>
                                </div>
                                <Modal
                                  open={this.state.showCancelCredit}
                                  classNames={{ modal: "creditNoteModal" }}
                                  onClose={this.showCancelCreditConfirm}
                                  // modalId="profile-details-error"
                                  overlayId="logout-ovrly"
                                >
                                  <div className="credit_note_confirm">
                                    <label>
                                      Are you sure you want to cancel credit
                                      note
                                    </label>
                                    <div className="confirm_buttons">
                                      <button
                                        className="cancel_btn"
                                        onClick={this.showCancelCreditConfirm}
                                      >
                                        Cancel
                                      </button>
                                      <button
                                        onClick={() => {
                                          this.cancelExtand(
                                            creditNotes[currentCreditNote]
                                              ?.couponCode
                                          );
                                        }}
                                      >
                                        Submit
                                      </button>
                                    </div>
                                  </div>
                                </Modal>
                              </div>
                            </div>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              {flags?.isHorizontal && (
                <div
                  className="tab-pane fade"
                  id="store_page"
                  role="tabpanel"
                  aria-labelledby="store_page"
                >
                  <div className="store_tab_div">
                    <div className="row storemainrow">
                      <div className={"col-md-12"}>
                        <select
                          className={
                            this.state.isKB
                              ? "systemstoredropdown1 iskbticket"
                              : "systemstoredropdown1"
                          }
                          value={this.state.CustStoreStatusDrop}
                          onChange={this.hanldeStatusChange.bind(this)}
                        >
                          <option value="1">
                            {TranslationContext !== undefined
                              ? TranslationContext.ticketingDashboard
                                .customerwanttovisitstore
                              : "Customer Want to visit store"}
                          </option>
                          <option value="2">
                            {TranslationContext !== undefined
                              ? TranslationContext.ticketingDashboard
                                .customeralreadyvisitedstore
                              : "Customer Already visited store"}
                          </option>
                        </select>
                        <div
                          style={{
                            display: "flex",
                            alignItems: "baseline",
                            marginTop: "7px",
                            float: "right",
                          }}
                        >
                          <label className="orderdetailpopup">
                            {TranslationContext !== undefined
                              ? TranslationContext.option.yes
                              : "Yes"}
                          </label>
                          <div
                            className={
                              this.state.isKB
                                ? "switchmargin iskbticket"
                                : "switchmargin"
                            }
                          >
                            <div className="switch switch-primary d-inline m-r-10">
                              <input type="checkbox" id="editDashboard-p-12_" />
                              <label
                                htmlFor="editDashboard-p-12_"
                                className="cr"
                              ></label>
                            </div>
                          </div>
                          <label className="orderdetailpopup">
                            {TranslationContext !== undefined
                              ? TranslationContext.option.no
                              : "No"}
                          </label>
                        </div>
                      </div>
                    </div>

                    <div className="row m-0">
                      <div
                        className={
                          this.state.isKB
                            ? "col-md-6 m-b-10 m-t-10 iskbticket"
                            : "col-md-6 m-b-10 m-t-10"
                        }
                      >
                        <input
                          type="text"
                          className="systemordersearch"
                          placeholder={
                            TranslationContext !== undefined
                              ? TranslationContext.label.searchbynamepincodecode
                              : "Search By Store Name, Pin Code, Store Code"
                          }
                          value={this.state.SearchStore}
                          name="SearchStore"
                          autoComplete="off"
                          onChange={this.handleNoteOnChange}
                        />
                        <img
                          src={SearchBlackImg}
                          alt="Search"
                          className="systemorder-imgsearch"
                          onClick={this.handleGetStoreDetails.bind(this)}
                        />
                      </div>
                      <div className="col-md-6 m-b-10 m-t-10 text-right">
                        <button
                          type="button"
                          className={
                            this.state.isKB
                              ? "myticket-submit-solve-button m-0 iskbticket"
                              : "myticket-submit-solve-button m-0"
                          }
                          onClick={this.handleAttachStoreData.bind(this)}
                        >
                          {TranslationContext !== undefined
                            ? TranslationContext.button.attachstore
                            : "Attach Store"}
                        </button>
                      </div>
                    </div>
                    <span className="linestore1"></span>
                    <div className="newtabstore">
                      <div className="tab-content tabcontentstore">
                        <div className="">
                          <ul
                            className="nav alert-nav-tabs3 store-nav-tabs"
                            role="tablist"
                          >
                            <li className="nav-item fo">
                              <a
                                className="nav-link active"
                                data-toggle="tab"
                                href="#storedetails-tab"
                                role="tab"
                                aria-controls="storedetails-tab"
                                aria-selected="true"
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.a.storedetails
                                  : "Store Details"}
                              </a>
                            </li>
                            {/* {this.state.selectedStoreData.length >
                            0 || selectedStore.length > 0 ? (
                            <li className="nav-item fo">
                              <a
                                className="nav-link"
                                data-toggle="tab"
                                href="#selectedstores-tab"
                                role="tab"
                                aria-controls="selectedstores-tab"
                                aria-selected="false"
                              >
                                {TranslationContext !== undefined
                                  ? TranslationContext.a
                                    .selectedstore
                                  : "Selected Store"}
                              </a>
                            </li>
                          ) : null} */}
                          </ul>
                        </div>
                      </div>
                    </div>
                    <span className="linestore2"></span>
                    <div className="tab-content p-0">
                      <div
                        className="tab-pane fade show active"
                        id="storedetails-tab"
                        role="tabpanel"
                        aria-labelledby="storedetails-tab"
                      >
                        <div className="reactstoreselect mystyle custom-react-table">
                          <ReactTable
                            data={this.state.storeDetails}
                            columns={[
                              {
                                Header: <span></span>,
                                accessor: "purpose",
                                Cell: (row) => {
                                  var storeId = 0;
                                  if (row.original.lpassStoreID > 0) {
                                    storeId = row.original.lpassStoreID;
                                  } else {
                                    storeId = row.original.storeID;
                                  }
                                  return (
                                    <div className="radioInput">
                                      <input
                                        type="radio"
                                        id={"i" + storeId}
                                        // style={{
                                        //   display: "none",
                                        // }}
                                        name="ticket-store"
                                        checked={
                                          this.state.CheckStoreID === storeId
                                        }
                                        onChange={this.handleCheckStoreID.bind(
                                          this,
                                          storeId,
                                          row.original
                                        )}
                                      //defaultChecked={true}
                                      />
                                      {/* <label
                                      htmlFor={"i" + storeId}
                                    ></label> */}
                                    </div>
                                  );
                                },
                                width: 20,
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.storecode
                                      : "Store Code"}
                                  </span>
                                ),
                                accessor: "storeCode",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.storename
                                      : "Store Name"}
                                  </span>
                                ),
                                accessor: "storeName",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.storepincode
                                      : "Store Pin Code"}
                                  </span>
                                ),
                                accessor: "pincode",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.span.storeemailid
                                      : "Store Email ID"}
                                  </span>
                                ),
                                accessor: "storeEmailID",
                              },
                              {
                                Header: (
                                  <span>
                                    {TranslationContext !== undefined
                                      ? TranslationContext.label.storeaddress
                                      : "Store Address"}
                                  </span>
                                ),
                                accessor: "address",
                              },
                              {
                                Header: <span>Store Contact</span>,
                                accessor: "storePhoneNo",
                              },
                              {
                                Header: <span>Action</span>,
                                sortable: false,
                                accessor: "action",
                                Cell: (row) => {
                                  return (
                                    <div>
                                      <div>
                                        <button
                                          className="react-tabel-button editre"
                                          id="p-edit-pop-2"
                                          onClick={() =>
                                            this.handleSendStoreInfo(
                                              row.original, row.index
                                            )
                                          }
                                          disabled={this.state.storeInfoLoading && selectedIndex == row.index}
                                        >
                                          {(this.state.storeInfoLoading && selectedIndex == row.index) ? (
                                            <img
                                              src={loaderGif}
                                              alt="loading"
                                              style={{ width: "20px" }}
                                            />
                                          ) : (
                                            "SEND"
                                          )}
                                        </button>
                                      </div>
                                    </div>
                                  );
                                },
                              },
                            ]}
                            defaultPageSize={5}
                            showPagination={true}
                            minRows={2}
                            resizable={true}
                          />
                        </div>
                      </div>
                      {/* <div
                      className="tab-pane fade"
                      id="selectedstores-tab"
                      role="tabpanel"
                      aria-labelledby="selectedstores-tab"
                    >
                      <div className="reactstoreselect custom-react-table datePickertable storeTdetail">
                        <ReactTable
                          data={this.state.selectedStoreData}
                          columns={[
                            {
                              Header: "",
                              accessor: "storeID",
                              width: 20,
                              Cell: (row) => {
                                var storeId = 0;
                                if (row.original.lpassStoreID > 0) {
                                  storeId =
                                    row.original.lpassStoreID;
                                } else {
                                  storeId = row.original.storeID;
                                }
                                return (
                                  <div
                                    className="filter-checkbox"
                                    style={{
                                      marginLeft: "15px",
                                    }}
                                  >
                                    <input
                                      type="checkbox"
                                      id={"i" + storeId}
                                      style={{
                                        display: "none",
                                      }}
                                      name="ticket-store"
                                      checked={
                                        this.state.CheckStoreID[
                                        storeId
                                        ] === true
                                      }
                                      onChange={this.handleCheckStoreID.bind(
                                        this,
                                        storeId,
                                        row.original
                                      )}
                                      defaultChecked={true}
                                    />
                                    <label
                                      htmlFor={"i" + storeId}
                                    ></label>
                                  </div>
                                );
                              },
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.span
                                      .purpose
                                    : "Purpose"}
                                </span>
                              ),
                              accessor: "invoiceNumber",
                              minWidth: 160,
                              Cell: (row) => (
                                <div
                                  className="filter-checkbox"
                                  style={{
                                    marginLeft: "15px",
                                  }}
                                >
                                  <label
                                    htmlFor={
                                      "i" + row.original.storeID
                                    }
                                  >
                                    {row.original.Purpose_Id === 1
                                      ? "Customer Want to visit store"
                                      : "Customer Already visited store"}
                                  </label>
                                </div>
                              ),
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label
                                      .storecode
                                    : "Store Code"}
                                </span>
                              ),
                              accessor: "storeCode",
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label
                                      .storename
                                    : "Store Name"}
                                </span>
                              ),
                              accessor: "storeName",
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label
                                      .storepincode
                                    : "Store Pin Code"}
                                </span>
                              ),
                              accessor: "pincode",
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.span
                                      .storeemailid
                                    : "Store Email ID"}
                                </span>
                              ),
                              accessor: "storeEmailID",
                              minWidth: 190,
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.label
                                      .storeaddress
                                    : "Store Address"}
                                </span>
                              ),
                              accessor: "address",
                              minWidth: 140,
                            },
                            {
                              Header: (
                                <span>
                                  {TranslationContext !== undefined
                                    ? TranslationContext.span
                                      .visitdate
                                    : "Visit Date"}
                                </span>
                              ),
                              accessor: "storeVisitDate",
                              minWidth: 150,
                              Cell: (row) => {
                                var storeId = 0;
                                if (row.original.lpassStoreID > 0) {
                                  storeId =
                                    row.original.lpassStoreID;
                                } else {
                                  storeId = row.original.storeID;
                                }
                                return (
                                  <div className="col-sm-12 p-0">
                                    <DatePicker
                                      selected={
                                        row.original
                                          .storeVisitDate !== null
                                          ? new Date(
                                            row.original.storeVisitDate
                                          )
                                          : new Date()
                                      }
                                      placeholderText="MM/DD/YYYY"
                                      showIcon
                                      showMonthDropdown
                                      showYearDropdown
                                      dateFormat="MM/DD/YYYY"
                                      id={"visitDate" + storeId}
                                      value={
                                        row.original
                                          .storeVisitDate !== null
                                          ? moment(
                                            row.original
                                              .storeVisitDate
                                          ).format("MM/DD/YYYY")
                                          : ""
                                      }
                                      onChange={this.handleByvisitDate.bind(
                                        this,
                                        row
                                      )}
                                    />
                                  </div>
                                );
                              },
                            },
                          ]}
                          resizable={false}
                          defaultPageSize={5}
                          showPagination={true}
                          minRows={2}
                        />
                      </div>
                    </div> */}
                    </div>
                  </div>
                </div>
              )}
              {flags?.isHorizontal && flags?.isCCAvenue && (
                <div
                  className="tab-pane fade"
                  id="cc_avenue"
                  role="tabpanel"
                  aria-labelledby="cc_avenue"
                >
                  <div className="cc_avenue_div">
                    <div className="row m-0">
                      <div className="col-3">
                        <div className="search_div">
                          <div className="d-flex justify-content-between">
                            <div className="serch_by_div">
                              <input
                                id="cc_orderId"
                                defaultChecked
                                type="radio"
                                name="search_type"
                                onChange={this.handleSearchCCAvenueType}
                              />
                              <label htmlFor="cc_orderId">Order Id</label>
                            </div>
                            <div className="serch_by_div">
                              <input
                                id="cc_mobId"
                                type="radio"
                                name="search_type"
                                onChange={this.handleSearchCCAvenueType}
                              />
                              <label htmlFor="cc_mobId">Mobile</label>
                            </div>
                          </div>
                          {ccAve_searchType === "cc_orderId" ? (
                            <div className="order_input">
                              <label>Order Id</label>
                              <input
                                className="w-100"
                                placeholder="Enter Order Id"
                                type="text"
                                value={ccAvenueTobeSearched}
                                onChange={this.handleSetCCAveID}
                              />
                            </div>
                          ) : ccAve_searchType === "cc_mobId" ? (
                            <div className="order_input">
                              <label>Mobile</label>
                              <input
                                maxLength={10}
                                className="w-100"
                                placeholder="Enter Mobile Number"
                                type="number"
                                onChange={this.getCCAveMobileNo}
                                value={ccAve_mobileNOtoSearch}
                                readOnly
                              />
                              <p className="mobile_remark">
                                *Enter 10 digit mobile number
                              </p>
                            </div>
                          ) : null}
                          <div className="seach_button">
                            <button
                              disabled={isCCAvenueSearchLoading}
                              onClick={
                                ccAve_searchType === "cc_orderId"
                                  ? () => this.handleGetCCAvenueOrder("")
                                  : this.getListOfCCAvenueMobile
                              }
                            >
                              {isCCAvenueSearchLoading ? (
                                <img
                                  src={loaderGif}
                                  alt="loading"
                                  style={{ width: "20px" }}
                                />
                              ) : (
                                "Search"
                              )}
                            </button>
                          </div>
                        </div>
                      </div>
                      <div className="col-9">
                        <>
                          {ccAve_searchType === "cc_orderId" ? (
                            <div
                              className="order_summary"
                              id="accordion_ccAvenue"
                            >
                              {/* {console.log(orderList, orderList.length)} */}
                              {ccAvenueOrderList.encResponse !== undefined &&
                                ccAvenueOrderList.encResponse !== null ? (
                                <div className="single_order_data">
                                  <div className="card-link d-flex">
                                    <img
                                      className="px-2 order_expand right_icon"
                                      data-toggle="collapse"
                                      href={
                                        "#data" +
                                        ccAvenueOrderList.encResponse.order_no
                                      }
                                      src={tringleRight}
                                      alt=""
                                    />
                                    <div className="row w-100 ml-1">
                                      <div className="col-3">
                                        <label className="order_label">
                                          Order Id:
                                        </label>
                                        {ccAvenueOrderList.encResponse.order_no}
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    id={
                                      "data" +
                                      ccAvenueOrderList.encResponse.order_no
                                    }
                                    className="collapse"
                                    data-parent="#accordion_ccAvenue"
                                  >
                                    <div className="order_details">
                                      <div className="all_detail_div">
                                        <div className="row">
                                          {Object.entries(
                                            ccAvenueOrderList.encResponse
                                          ).map(([key, value]) => {
                                            return (
                                              <div className="col-4">
                                                <label>
                                                  {this.handleSpaces(key)}:
                                                </label>
                                                {(typeof value !== "object" ||
                                                  value === null) && (
                                                    <span>
                                                      {value === true
                                                        ? "true"
                                                        : value === false
                                                          ? "false"
                                                          : value}
                                                    </span>
                                                  )}
                                              </div>
                                            );
                                          })}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : (
                                <p className="noData_div">
                                  {" "}
                                  {"No Data Available"}{" "}
                                </p>
                              )}
                            </div>
                          ) : ccAve_searchType === "cc_mobId" ? (
                            <div
                              className="order_summary"
                              id="accordion_ccAv_Mob"
                            >
                              {ccAvenueMobileList?.length ? (
                                ccAvenueMobileList.map((item, i) => {
                                  return (
                                    <div className="single_order_data" key={i}>
                                      <div className="card-link d-flex">
                                        <img
                                          className="px-2 order_expand right_icon"
                                          onClick={() =>
                                            this.handleGetCCAvenueOrder(
                                              item.order_no
                                            )
                                          }
                                          data-toggle="collapse"
                                          href={"#data" + item.reference_no}
                                          src={tringleRight}
                                          alt=""
                                        />
                                        <div className="row w-100 ml-1">
                                          <div className="col-2">
                                            <label className="order_label">
                                              Order Id:
                                            </label>
                                            {item.order_no}
                                          </div>
                                        </div>
                                      </div>
                                      <div
                                        id={"data" + item.reference_no}
                                        className="collapse"
                                        data-parent="#accordion_ccAv_Mob"
                                      >
                                        {ccAvenueOrderList.encResponse !==
                                          undefined &&
                                          ccAvenueOrderList.encResponse !==
                                          null ? (
                                          <div className="order_details">
                                            <div className="all_detail_div">
                                              <div className="row">
                                                {Object.entries(
                                                  ccAvenueOrderList.encResponse
                                                ).map(([key, value]) => {
                                                  return (
                                                    <div className="col-4">
                                                      <label>
                                                        {this.handleSpaces(key)}
                                                        :
                                                      </label>
                                                      {(typeof value !==
                                                        "object" ||
                                                        value === null) && (
                                                          <span>
                                                            {value === true
                                                              ? "true"
                                                              : value === false
                                                                ? "false"
                                                                : value}
                                                          </span>
                                                        )}
                                                    </div>
                                                  );
                                                })}
                                              </div>
                                            </div>
                                          </div>
                                        ) : (
                                          <p className="noData_div p-2">
                                            {" "}
                                            {"No Data Available"}{" "}
                                          </p>
                                        )}
                                      </div>
                                    </div>
                                  );
                                })
                              ) : (
                                <p className="noData_div p-3">
                                  {" "}
                                  {"No Data Available"}{" "}
                                </p>
                              )}
                            </div>
                          ) : null}
                        </>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              {/* <div className="tab-pane fade" id="razor_pay" role="tabpanel" aria-labelledby="razor_pay">
                <iframe src="https://x.razorpay.com/" title="" />
              </div> */}
              <Modal
                open={this.state.profilemodal}
                onClose={this.HandleProfileModalClose.bind(this)}
                modalId="profile-popup"
                overlayId="logout-ovrly"
              >
                <div className="profilemodalmaindiv">
                  <div style={{ float: "right" }}>
                    <img
                      src={CrossIcon}
                      alt="cross-icon"
                      className="pro-cross-icn"
                      onClick={this.HandleProfileModalClose.bind(this)}
                    />
                  </div>

                  <div className="row profilemodalrow">
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.span.name
                          : "Name"}
                      </label>
                      {this.state.isEditCustomerProfile ? (
                        <input
                          className="customer-profile-input"
                          type="text"
                          value={this.state.customerProfileInfo.customerName}
                          name="customerName"
                          onChange={this.handleCustomerProfileChange}
                        />
                      ) : (
                        <label className="profilemodal-textval">
                          {ticketDetailsData.customerName}
                        </label>
                      )}
                    </div>
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.label.mobile
                          : "Mobile"}
                      </label>
                      {this.state.isEditCustomerProfile ? (
                        <>
                          <input
                            className="customer-profile-input"
                            placeholder="91xxxxxxxxxx"
                            type="text"
                            value={
                              this.state.customerProfileInfo.customerPhoneNumber
                            }
                            // maxLength="10"
                            name="customerPhoneNumber"
                            onChange={this.handleCustomerProfileChange}
                          />
                          {this.state.validMobileNoStatus ? (
                            <label className="mobile_status">
                              Enter {this.state.mobileNoLength} Digit Mobile
                              Number including country code
                            </label>
                          ) : null}
                        </>
                      ) : (
                        <label className="profilemodal-textval">
                          {ticketDetailsData.customerPhoneNumber}
                        </label>
                      )}
                    </div>
                  </div>
                  <div className="row profilemodalrow-1">
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.a.email
                          : "Email"}
                      </label>
                      {this.state.isEditCustomerProfile ? (
                        <input
                          className="customer-profile-input"
                          type="text"
                          value={this.state.customerProfileInfo.customerEmailId}
                          name="customerEmailId"
                          onChange={this.handleCustomerProfileChange}
                        />
                      ) : (
                        <label className="profilemodal-textval">
                          {ticketDetailsData.customerEmailId}
                        </label>
                      )}
                    </div>

                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.label.alternatenumber
                          : "Alternate Number"}
                      </label>
                      {this.state.isEditCustomerProfile ? (
                        <>
                          <input
                            className="customer-profile-input"
                            placeholder="91xxxxxxxxxx"
                            type="text"
                            value={this.state.customerProfileInfo.altNumber}
                            name="altNumber"
                            onChange={this.handleCustomerProfileChange}
                          />
                          {this.state.validAltMobileNoStatus ? (
                            <label className="mobile_status">
                              Enter {this.state.mobileNoLength} Digit Mobile
                              Number including country code
                            </label>
                          ) : null}
                        </>
                      ) : (
                        <label className="profilemodal-textval">
                          {ticketDetailsData.altNumber}
                        </label>
                      )}
                    </div>
                  </div>
                  {/* new develop */}
                  <div className="row profilemodalrow-1">
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.a.email
                          : "Facebook Name"}
                      </label>
                      {this.state.isEditCustomerProfile ? <input className="customer-profile-input" name="customerFacebookName" onChange={(e) => this.handleCustomerProfileChangeSocial(e)} /> :
                        <label className="profilemodal-textval">
                          {this.state.customerSocialDetails.facebookUserID}
                        </label>
                      }


                    </div>
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.a.email
                          : "Twitter Name"}
                      </label>
                      {this.state.isEditCustomerProfile ? <input className="customer-profile-input" name="customertwitName" onChange={(e) => this.handleCustomerProfileChangeSocial(e)} /> :
                        <label className="profilemodal-textval">
                          {this.state.customerSocialDetails.twitterUserID}
                        </label>
                      }


                    </div>
                  </div>
                  <div className="row profilemodalrow-1">
                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.a.email
                          : "Google User Name"}
                      </label>
                      {this.state.isEditCustomerProfile ? <input className="customer-profile-input" name="customergoogleName" onChange={(e) => this.handleCustomerProfileChangeSocial(e)} /> :
                        <label className="profilemodal-textval">
                          {this.state.customerSocialDetails.googleReviewUserID}
                        </label>
                      }



                    </div>

                    <div className="col-md-6">
                      <label className="profilemodal-text">
                        {TranslationContext !== undefined
                          ? TranslationContext.a.email
                          : "Instagram Name"}
                      </label>
                      {this.state.isEditCustomerProfile ? <input className="customer-profile-input" name="customerInstaName" onChange={(e) => this.handleCustomerProfileChangeSocial(e)} /> :
                        <label className="profilemodal-textval">
                          {this.state.customerSocialDetails.instagramUserID}
                        </label>
                      }


                    </div>
                  </div>


                  {/* new develop */}

                  <div className="row" style={{ marginLeft: "15px" }}>
                    <div className="openticketbox profilemodalrow-1">
                      <label
                        className="open-tickets-box-text"
                        onClick={() =>
                          this.handleShowCustomerTicketsModal("102")
                        }
                      >
                        {ticketDetailsData.openTicket}
                        <small className="open-tickets-box-textval">
                          {TranslationContext !== undefined
                            ? TranslationContext.ticketingDashboard.opentickets
                            : "Open Tickets"}
                        </small>
                      </label>
                    </div>
                    <div className="openticketbox-2 profilemodalrow-1">
                      <label
                        className="open-tickets-box-text"
                        onClick={() => this.handleShowCustomerTicketsModal("")}
                      >
                        {ticketDetailsData.totalticket}
                        <small className="open-tickets-box-textval">
                          {TranslationContext !== undefined
                            ? TranslationContext.ticketingDashboard.totaltickets
                            : "Total Tickets"}
                        </small>
                      </label>
                      {this.state.showCustomerTicketsModal && (
                        <CustomerTickets
                          closeModel={() =>
                            this.handleCloseCustomerTicketsModal()
                          }
                          openModel={this.state.showCustomerTicketsModal}
                          customerTicketsStatus={
                            this.state.showCustomerTicketsStatus
                          }
                          customerMobile={ticketDetailsData.customerPhoneNumber}
                          customerEmail={ticketDetailsData.customerEmailId}
                          closeCustomerDetailsModal={() =>
                            this.HandleProfileModalClose()
                          }
                        />
                      )}
                    </div>
                  </div>
                  <div className="row  profilemodalrow-1 ">
                    <div className="col-md-6">
                      {this.state.isEditCustomerProfile ? (
                        <button
                          style={{ cursor: "pointer" }}
                          onClick={this.handleEditCustomerProfile}
                        >
                          {this.state.customerInfoLoading ? (
                            <img
                              src={loaderGif}
                              alt="loading"
                              style={{ width: "20px" }}
                            />
                          ) : (
                            "SAVE"
                          )}
                        </button>
                      ) : (
                        <button
                          style={{ cursor: "pointer" }}
                          onClick={this.handleIsEditCustomerProfile}
                        >
                          EDIT
                        </button>
                      )}
                    </div>

                    <div className="col-md-6">
                      {
                        // window.localStorage.getItem("Programcode") ===
                        //   "bataclub" ? (
                        //   <div>
                        //     {/* <select
                        //       className="my-tic-email"
                        //       onChange={(e) => this.handleProfileViewDrop(e)}
                        //     >

                        //       <option value="-5" >
                        //         Select Profile

                        //       </option>

                        //       <option value="bataclub" >
                        //         Bataclub

                        //       </option>
                        //       <option value="hushpuppiessignatureclub" >
                        //         Hushpuppies

                        //       </option>


                        //     </select> */}
                        //     <div className="module-switch logic-radio">
                        //       <label
                        //         className="full-profile-view-text"
                        //         style={{ paddingLeft: 0 }}
                        //       >
                        //         View Profile
                        //       </label>
                        //       <div className="radio-profile_view">
                        //         <input
                        //           type="radio"
                        //           value="bataclub"
                        //           checked={
                        //             this.state.programselect === "bataclub"
                        //           }
                        //           onChange={(e) => this.handleRadioChange(e)}
                        //         />
                        //         <label>Bataclub</label>
                        //       </div>
                        //       <div className="radio-profile_view">
                        //         <input
                        //           type="radio"
                        //           value="hushpuppiessignatureclub"
                        //           checked={
                        //             this.state.programselect ===
                        //             "hushpuppiessignatureclub"
                        //           }
                        //           onChange={(e) => this.handleRadioChange(e)}
                        //         />
                        //         <label>Hushpuppies</label>
                        //       </div>
                        //       <div
                        //         style={{
                        //           textAlign: "end",
                        //           marginTop: "10px",
                        //         }}
                        //       >
                        //         <button
                        //           style={{ cursor: "pointer" }}
                        //           onClick={this.handleProfileViewDrop}
                        //         >
                        //           View
                        //         </button>
                        //       </div>
                        //     </div>
                        //   </div>
                        // ) : 
                        (
                          <div>
                            <img src={CustomerIcon} alt="customer-icon" />
                            <label
                              className="full-profile-view-text"
                              onClick={this.HandleProfileDetailOpen.bind(this)}
                            >
                              {TranslationContext !== undefined
                                ? TranslationContext.label.fullprofileview
                                : "FULL PROFILE VIEW"}
                            </label>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              </Modal>

              {this.state.profiledetailserror === "" ? (
                <Modal
                  open={this.state.profiledetail}
                  onClose={this.HandleProfileDetailClose.bind(this)}
                  modalId="profile-details"
                  overlayId="logout-ovrly"
                >
                  <div className="profilemodalmaindiv">
                    <div className="row">
                      <div className="col-md-6 profile_header">
                        <label className="profile-txt"> Profile Details </label>
                      </div>

                      <div
                        className="col-md-6 cross_div"
                        style={{ float: "right" }}
                      >
                        <img
                          src={CrossIcon}
                          alt="cross-icon"
                          className="pro-cross-icn"
                          onClick={this.HandleProfileDetailClose.bind(this)}
                        />
                      </div>
                    </div>

                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "FirstName"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.firstName}
                            name="firstName"
                            onChange={this.handleProfiledetailsChange.bind(
                              this
                            )}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.firstName}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">FirstName</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.firstName}
                      </label>
                    </div> */}
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "LastName"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.lastName}
                            name="lastName"
                            onChange={this.handleProfiledetailsChange.bind(
                              this
                            )}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.lastName}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">LastName</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.lastName}
                      </label>
                    </div> */}
                    </div>
                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "Email"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.email}
                            name="email"
                            onChange={this.handleProfiledetailsChange}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.email}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">Email</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.email}
                      </label>
                    </div> */}
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "Mobile"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.mobile}
                            name="mobile"
                            onChange={this.handleProfiledetailsChange}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.mobile}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">Mobile</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.mobile}
                      </label>
                    </div> */}
                    </div>
                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "Gender"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.gender}
                            name="gender"
                            onChange={this.handleProfiledetailsChange}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.gender}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">Gender</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.gender}
                      </label>
                    </div> */}
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          {TranslationContext !== undefined
                            ? TranslationContext.span.name
                            : "Date of Birth"}
                        </label>
                        {this.state.isEditProfiledetails ? (
                          <input
                            className="customer-profile-input"
                            type="text"
                            value={this.state.profiledetailinfoData.dateOfBirth}
                            name="dateOfBirth"
                            onChange={this.handleProfiledetailsChange}
                          />
                        ) : (
                          <label className="profilemodal-textval">
                            {profiledetailData.dateOfBirth}
                          </label>
                        )}
                      </div>
                      {/* <div className="col-md-6">
                      <label className="profilemodal-text">Date of Birth</label>

                      <label className="profilemodal-textval">
                        {profiledetailData.dateOfBirth}
                      </label>
                    </div> */}
                    </div>
                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          Accrual Points
                        </label>

                        <label className="profilemodal-textval">
                          {profiledetailData.accrualPoints}
                        </label>
                      </div>
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          Total Points Accrued
                        </label>

                        <label className="profilemodal-textval">
                          {profiledetailData.totalPointsAccrued}
                        </label>
                      </div>
                    </div>
                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          Current Tier
                        </label>

                        <label className="profilemodal-textval">
                          {profiledetailData.currentTier}
                        </label>
                      </div>
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          Referral Code
                        </label>

                        <label className="profilemodal-textval">
                          {profiledetailData.referralCode}
                        </label>
                      </div>
                    </div>
                    <div className="row profiledetail-row">
                      <div className="col-md-6">
                        <label className="profilemodal-text">Total Spend</label>

                        <label className="profilemodal-textval">
                          {profiledetailData.totalSpends}
                        </label>
                      </div>
                      <div className="col-md-6">
                        <label className="profilemodal-text">
                          Total Point Redeemed
                        </label>

                        <label className="profilemodal-textval">
                          {profiledetailData.totalPointsRedeemed}
                        </label>
                      </div>
                    </div>
                    <div className="row  profilemodalrow-1 ">
                      <div className="col-md-6">
                        {this.state.isEditProfiledetails ? (
                          <button
                            style={{ cursor: "pointer" }}
                            onClick={this.handleEditprofiledetails}
                          >
                            {this.state.customerInfoLoading ? (
                              <img
                                src={loaderGif}
                                alt="loading"
                                style={{ width: "20px" }}
                              />
                            ) : (
                              "SAVE"
                            )}
                          </button>
                        ) : (
                          <button
                            style={{ cursor: "pointer" }}
                            onClick={this.handleIsEditProfiledetails}
                          >
                            EDIT
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                </Modal>
              ) : (
                <Modal
                  open={this.state.profiledetail}
                  onClose={this.HandleProfileDetailClose.bind(this)}
                  modalId="profile-details-error"
                  overlayId="logout-ovrly"
                >
                  <div className="profilemodalmaindiv">
                    <div style={{ float: "right" }}>
                      <img
                        src={CrossIcon}
                        alt="cross-icon"
                        className="pro-cross-icn"
                        onClick={this.HandleProfileDetailClose.bind(this)}
                      />
                    </div>
                    <div className="row profilerror-row">
                      <label className="profile-error-msg">
                        Profile Details Not Found
                      </label>
                    </div>
                  </div>
                </Modal>
              )}

              <div className="row d-none" style={{ margin: "0" }}>
                <div className="TicketTabs">
                  <ul className="mb-0">
                    <li className="SubR">
                      <img src={PlusImg} alt="Plus" className="Ticket" />
                    </li>
                    <li className="Sub">
                      <span>
                        <img src={Ticket} alt="Ticket" className="Ticket" />
                      </span>
                      <label className="Subject">
                        {TranslationContext !== undefined
                          ? TranslationContext.span.subject
                          : "Subject"}
                        :
                        {TranslationContext !== undefined
                          ? TranslationContext.ticketingDashboard.needtochangem
                          : "Need to change m..."}
                      </label>
                      <span>
                        <img
                          src={CancelImgGrey}
                          alt="Cancel"
                          className="cancel"
                        />
                      </span>
                    </li>
                    <li className="Sub active">
                      <span>
                        <img src={Ticket} alt="Ticket" className="Ticket" />
                      </span>
                      <label className="Subject">
                        {TranslationContext !== undefined
                          ? TranslationContext.span.subject
                          : "Subject"}
                        :
                        {TranslationContext !== undefined
                          ? TranslationContext.ticketingDashboard.needtochangem
                          : "Need to change m..."}
                      </label>
                      <span>
                        <img
                          src={CancelImgGrey}
                          alt="Cancel"
                          className="cancel"
                        />
                      </span>
                    </li>
                    <li className="Sub">
                      <span>
                        <img src={Ticket} alt="Ticket" className="Ticket" />
                      </span>
                      <label className="Subject">
                        {TranslationContext !== undefined
                          ? TranslationContext.span.subject
                          : "Subject"}
                        :
                        {TranslationContext !== undefined
                          ? TranslationContext.ticketingDashboard.needtochangem
                          : "Need to change m..."}
                      </label>
                      <span>
                        <img
                          src={CancelImgGrey}
                          alt="Cancel"
                          className="cancel"
                        />
                      </span>
                    </li>
                    <li className="Sub">
                      <span>
                        <img src={Ticket} alt="Ticket" className="Ticket" />
                      </span>
                      <label className="Subject">
                        {TranslationContext !== undefined
                          ? TranslationContext.span.subject
                          : "Subject"}
                        :
                        {TranslationContext !== undefined
                          ? TranslationContext.ticketingDashboard.needtochangem
                          : "Need to change m..."}
                      </label>
                      <span>
                        <img
                          src={CancelImgGrey}
                          alt="Cancel"
                          className="cancel"
                        />
                      </span>
                    </li>
                    <li className="SubL">
                      <label className="More">
                        {TranslationContext !== undefined
                          ? TranslationContext.label.more
                          : "More"}
                      </label>
                      <span>
                        <img src={MoreUp} alt="Cancel" className="MoreUp" />
                      </span>
                    </li>
                  </ul>
                </div>
              </div>
              {/* -------------------Start knowledge base modal pop up----------------------- */}
              <Modal
                open={this.state.KnowledgeBaseModal}
                onClose={this.hadnleCloseKnowledage.bind(this)}
                closeIconId="sdsg"
                modalId="Historical-popup"
                overlayId="logout-ovrly"
                classNames={{
                  modal: "myticket-knowpopup",
                }}
              >
                <div className="commenttextborder">
                  <div className="d-flex justify-content-end">
                    <div>
                      <img
                        src={CircleCancelImg}
                        alt="cross"
                        className="headPhone3"
                        onClick={this.handleCloseKnwBasePopup}

                      />
                    </div>
                  </div>
                  <div className="Commentlabel">
                    <p className="Commentlabel1 mb-4 text-center">
                      {TranslationContext !== undefined
                        ? TranslationContext.ticketingDashboard
                          .addthisticketinknowledgebase
                        : "Add this ticket in Knowledge Base ?"}
                    </p>
                  </div>
                  <div
                    className="SendCommentBtn mb-0"
                    style={{ float: "left" }}
                  >
                    <button
                      className="SendCommentBtn1"
                      onClick={this.handleYesNoClick.bind(this, false)}
                    >
                      {TranslationContext !== undefined
                        ? TranslationContext.option.no
                        : "No"}
                    </button>
                  </div>
                  <div className="SendCommentBtn mb-0">
                    <button
                      className="SendCommentBtn1"
                      onClick={this.handleYesNoClick.bind(this, true)}
                    >
                      {TranslationContext !== undefined
                        ? TranslationContext.option.yes
                        : "Yes"}
                    </button>
                  </div>
                </div>
              </Modal>
              {/* -------------------End knowledge base modal pop up----------------------- */}
            </div>
            <Modal
              open={this.state.openAddOrder}
              onClose={this.closeAddOrder}
              closeIconId="sdsg"
              modalId="Historical-popup"
              overlayId="logout-ovrly"
              classNames={{ modal: "historical-popup" }}
            >
              <TicketSystemOrder
                isUnknown={this.state.masterConfigrationUnknown.isUnknown}
                // custDetails={this.state.customerID}
                custDetails={this.state.custID}
                // AttachOrder={this.handleCustomerAttachamentStatus}
                // getParentOrderData={this.handleGetOrderId}
                // getItemOrderData={this.handleGetItemData}
                handleOrderSearchData={this.handleOrderSearchData}
                closeAddOrder={this.closeAddOrder}
                purchaseMode={0}
                message="Add"
                AddManuallyData={true}
                CurrentTicket={this.state.ticket_Id}
                modeData={this.state.modeData}
                searchHide={false}
              // ticket_IDS={this.state.ticketDetailID}
              // ShowOderdData={this.state.showOrderDetails}
              // parentCallBackFuncation={this.parentCallBackFuncation}
              />
            </Modal>
          </div>
        )
        }
      </Fragment>
    );
  }
}
export default withRouter(MyTicket);
